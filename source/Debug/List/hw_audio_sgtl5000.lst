###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      15/Jul/2015  14:11:14 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\User\Desktop\freescale\source\demo_i2s\src\hw\h #
#                    w_audio_sgtl5000.c                                       #
#    Command line =  C:\Users\User\Desktop\freescale\source\demo_i2s\src\hw\h #
#                    w_audio_sgtl5000.c -lCN C:\Users\User\Desktop\freescale\ #
#                    source\Debug\List\ -o C:\Users\User\Desktop\freescale\so #
#                    urce\Debug\Obj\ --no_cse --no_unroll --no_inline         #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --char_is_signed --fpu=None --dlib_config             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\work\prj\g_demo_k\demo_k\src\include\ -On             #
#    List file    =  C:\Users\User\Desktop\freescale\source\Debug\List\hw_aud #
#                    io_sgtl5000.lst                                          #
#    Object file  =  C:\Users\User\Desktop\freescale\source\Debug\Obj\hw_audi #
#                    o_sgtl5000.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\User\Desktop\freescale\source\demo_i2s\src\hw\hw_audio_sgtl5000.c
      1          
      2          
      3          #include "..\\include\\global.h"
      4          #include "..\\include\\MKxxx.h"
      5          #include "..\\include\\hal_i2c_ex.h"
      6          #include "..\\include\\hal_config.h"
      7          
      8          #define I2C_ADDR_SGTL5000 (0x0a<<1)
      9          
     10          #if (BOARD == BOARD_K60) || (BOARD == BOARD_K10)
     11              #define I2C_BASE I2C0_BASE_PTR
     12          #endif
     13          #if (BOARD == BOARD_K50) || (BOARD == BOARD_K40)
     14              #define I2C_BASE I2C1_BASE_PTR
     15          #endif
     16          
     17          // this delay is very important, it may cause w-r operation failure.

   \                                 In section .text, align 4, keep-with-next
     18          static void pause(void)
     19          {
     20              int n;
     21              for(n=0; n<400; n++)
   \                     pause:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x0008             MOVS     R0,R1
   \                     ??pause_0:
   \   00000004   0xF5B0 0x7FC8      CMP      R0,#+400
   \   00000008   0xDA02             BGE.N    ??pause_1
     22                  asm("nop");
   \   0000000A   0xBF00             nop
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0xE7F9             B.N      ??pause_0
     23          }
   \                     ??pause_1:
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     24          static u16 _read(u16 addr)
     25          {
   \                     _read:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
     26              char result[2];
     27          
     28              i2c_start(I2C_BASE);
   \   00000006   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000008   0x.... 0x....      BL       i2c_start
     29          
     30              i2c_write_byte(I2C_BASE,I2C_ADDR_SGTL5000 | I2C_WRITE);
   \   0000000C   0x2114             MOVS     R1,#+20
   \   0000000E   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000010   0x.... 0x....      BL       i2c_write_byte
     31              i2c_wait(I2C_BASE);
   \   00000014   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000016   0x.... 0x....      BL       i2c_wait
     32              i2c_get_ack(I2C_BASE);
   \   0000001A   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000001C   0x.... 0x....      BL       i2c_get_ack
     33          
     34              i2c_write_byte(I2C_BASE, addr>>8);
   \   00000020   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000022   0x0A21             LSRS     R1,R4,#+8
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000028   0x.... 0x....      BL       i2c_write_byte
     35              i2c_wait(I2C_BASE);
   \   0000002C   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000002E   0x.... 0x....      BL       i2c_wait
     36              i2c_get_ack(I2C_BASE);
   \   00000032   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000034   0x.... 0x....      BL       i2c_get_ack
     37          
     38              i2c_write_byte(I2C_BASE, addr&0xff);
   \   00000038   0x0021             MOVS     R1,R4
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000003E   0x.... 0x....      BL       i2c_write_byte
     39              i2c_wait(I2C_BASE);
   \   00000042   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000044   0x.... 0x....      BL       i2c_wait
     40              i2c_get_ack(I2C_BASE);
   \   00000048   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000004A   0x.... 0x....      BL       i2c_get_ack
     41              
     42              i2c_repeated_start(I2C_BASE);
   \   0000004E   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000050   0x.... 0x....      BL       i2c_repeated_start
     43              i2c_write_byte(I2C_BASE, I2C_ADDR_SGTL5000 | I2C_READ);
   \   00000054   0x2115             MOVS     R1,#+21
   \   00000056   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000058   0x.... 0x....      BL       i2c_write_byte
     44              i2c_wait(I2C_BASE);
   \   0000005C   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000005E   0x.... 0x....      BL       i2c_wait
     45              i2c_get_ack(I2C_BASE);
   \   00000062   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000064   0x.... 0x....      BL       i2c_get_ack
     46          
     47              i2c_set_rx_mode(I2C_BASE);
   \   00000068   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000006A   0x.... 0x....      BL       i2c_set_rx_mode
     48          
     49              i2c_give_ack(I2C_BASE);
   \   0000006E   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000070   0x.... 0x....      BL       i2c_give_ack
     50              result[0] = i2c_read_byte(I2C_BASE);
   \   00000074   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000076   0x.... 0x....      BL       i2c_read_byte
   \   0000007A   0xF88D 0x0000      STRB     R0,[SP, #+0]
     51              i2c_wait(I2C_BASE);
   \   0000007E   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000080   0x.... 0x....      BL       i2c_wait
     52          
     53              i2c_give_nack(I2C_BASE);
   \   00000084   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000086   0x.... 0x....      BL       i2c_give_nack
     54              result[0] = i2c_read_byte(I2C_BASE);
   \   0000008A   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000008C   0x.... 0x....      BL       i2c_read_byte
   \   00000090   0xF88D 0x0000      STRB     R0,[SP, #+0]
     55              i2c_wait(I2C_BASE);
   \   00000094   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000096   0x.... 0x....      BL       i2c_wait
     56          
     57              i2c_stop(I2C_BASE);
   \   0000009A   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000009C   0x.... 0x....      BL       i2c_stop
     58              result[1] = i2c_read_byte(I2C_BASE);
   \   000000A0   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   000000A2   0x.... 0x....      BL       i2c_read_byte
   \   000000A6   0xF88D 0x0001      STRB     R0,[SP, #+1]
     59              pause();
   \   000000AA   0x.... 0x....      BL       pause
     60          
     61              return (result[0]<<8) | result[1];
   \   000000AE   0xF99D 0x0000      LDRSB    R0,[SP, #+0]
   \   000000B2   0xF99D 0x1001      LDRSB    R1,[SP, #+1]
   \   000000B6   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000000BA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000BC   0xBD16             POP      {R1,R2,R4,PC}    ;; return
     62          }
     63          

   \                                 In section .text, align 2, keep-with-next
     64          static void _write(u16 addr,u16 data)
     65          {
   \                     _write:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     66              i2c_start(I2C_BASE);
   \   00000006   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000008   0x.... 0x....      BL       i2c_start
     67          
     68              i2c_write_byte(I2C_BASE, I2C_ADDR_SGTL5000|I2C_WRITE);
   \   0000000C   0x2114             MOVS     R1,#+20
   \   0000000E   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000010   0x.... 0x....      BL       i2c_write_byte
     69              i2c_wait(I2C_BASE);
   \   00000014   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000016   0x.... 0x....      BL       i2c_wait
     70              i2c_get_ack(I2C_BASE);
   \   0000001A   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000001C   0x.... 0x....      BL       i2c_get_ack
     71          
     72              i2c_write_byte(I2C_BASE, addr>>8);
   \   00000020   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000022   0x0A21             LSRS     R1,R4,#+8
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000028   0x.... 0x....      BL       i2c_write_byte
     73              i2c_wait(I2C_BASE);
   \   0000002C   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000002E   0x.... 0x....      BL       i2c_wait
     74              i2c_get_ack(I2C_BASE);
   \   00000032   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000034   0x.... 0x....      BL       i2c_get_ack
     75          
     76              i2c_write_byte(I2C_BASE, addr&0xff);
   \   00000038   0x0021             MOVS     R1,R4
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000003E   0x.... 0x....      BL       i2c_write_byte
     77              i2c_wait(I2C_BASE);
   \   00000042   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000044   0x.... 0x....      BL       i2c_wait
     78              i2c_get_ack(I2C_BASE);
   \   00000048   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000004A   0x.... 0x....      BL       i2c_get_ack
     79          
     80              i2c_write_byte(I2C_BASE, data>>8);
   \   0000004E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000050   0x0A29             LSRS     R1,R5,#+8
   \   00000052   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000054   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000056   0x.... 0x....      BL       i2c_write_byte
     81              i2c_wait(I2C_BASE);
   \   0000005A   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000005C   0x.... 0x....      BL       i2c_wait
     82              i2c_get_ack(I2C_BASE);
   \   00000060   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000062   0x.... 0x....      BL       i2c_get_ack
     83          
     84              i2c_write_byte(I2C_BASE, data&0xff);
   \   00000066   0x0029             MOVS     R1,R5
   \   00000068   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006A   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000006C   0x.... 0x....      BL       i2c_write_byte
     85              i2c_wait(I2C_BASE);
   \   00000070   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000072   0x.... 0x....      BL       i2c_wait
     86              i2c_get_ack(I2C_BASE);
   \   00000076   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   00000078   0x.... 0x....      BL       i2c_get_ack
     87          
     88              i2c_stop(I2C_BASE);
   \   0000007C   0x....             LDR.N    R0,??DataTable3  ;; 0x40066000
   \   0000007E   0x.... 0x....      BL       i2c_stop
     89              pause();
   \   00000082   0x.... 0x....      BL       pause
     90          }
   \   00000086   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     91          

   \                                 In section .text, align 2, keep-with-next
     92          void hw_audio_sgtl5000_test_reg(void)
     93          {
   \                     hw_audio_sgtl5000_test_reg:
   \   00000000   0xB580             PUSH     {R7,LR}
     94              printf("get sgtl5000 id: %x \n", _read(0x0000));
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       _read
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0x....             LDR.N    R0,??DataTable3_1
   \   0000000E   0x.... 0x....      BL       q_printf
     95          /*
     96              printf("get sgtl5000 id: %x \n", _read(0x0038));
     97              _write(0x0038,0x1234);
     98              printf("get sgtl5000 0x0038: %x \n", _read(0x0038));
     99          // */
    100          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    101          
    102          
    103          
    104          
    105          /* * Register values. */
    106          #define SGTL5000_CHIP_ID                0x0000
    107          #define SGTL5000_CHIP_DIG_POWER         0x0002
    108          #define SGTL5000_CHIP_CLK_CTRL          0x0004
    109          #define SGTL5000_CHIP_I2S_CTRL          0x0006
    110          #define SGTL5000_CHIP_SSS_CTRL          0x000a
    111          #define SGTL5000_CHIP_ADCDAC_CTRL       0x000e
    112          #define SGTL5000_CHIP_DAC_VOL           0x0010
    113          #define SGTL5000_CHIP_PAD_STRENGTH      0x0014
    114          #define SGTL5000_CHIP_ANA_ADC_CTRL      0x0020
    115          #define SGTL5000_CHIP_ANA_HP_CTRL       0x0022
    116          #define SGTL5000_CHIP_ANA_CTRL          0x0024
    117          #define SGTL5000_CHIP_LINREG_CTRL       0x0026
    118          #define SGTL5000_CHIP_REF_CTRL          0x0028
    119          #define SGTL5000_CHIP_MIC_CTRL          0x002a
    120          #define SGTL5000_CHIP_LINE_OUT_CTRL     0x002c
    121          #define SGTL5000_CHIP_LINE_OUT_VOL      0x002e
    122          #define SGTL5000_CHIP_ANA_POWER         0x0030
    123          #define SGTL5000_CHIP_PLL_CTRL          0x0032
    124          #define SGTL5000_CHIP_CLK_TOP_CTRL      0x0034
    125          #define SGTL5000_CHIP_ANA_STATUS        0x0036
    126          #define SGTL5000_CHIP_SHORT_CTRL        0x003c
    127          #define SGTL5000_CHIP_ANA_TEST2         0x003a
    128          #define SGTL5000_CHIP_DAP_BASS_ENHANCE          0x0104
    129          #define SGTL5000_CHIP_DAP_BASS_ENHANCE_CTRL     0x0106
    130              
    131          #define SGTL5000_DAP_AUDIO_EQ                   0x0108
    132          #define SGTL5000_DAP_AUDIO_EQ_BASS_BAND0        0x0116
    133          #define SGTL5000_DAP_AUDIO_EQ_BASS_BAND1        0x0118
    134          #define SGTL5000_DAP_AUDIO_EQ_BASS_BAND2        0x011A
    135          #define SGTL5000_DAP_AUDIO_EQ_BASS_BAND3        0x011C
    136          #define SGTL5000_DAP_AUDIO_EQ_BASS_BAND4        0x011E
    137          
    138          #define SGTL5000_CHIP_DAP_AVC_CTRL              0x0124
    139          #define SGTL5000_CHIP_DAP_MAIN_CHAN             0x0120
    140          #define SGTL5000_CHIP_DAP_CTRL                  0x0100
    141          

   \                                 In section .text, align 2, keep-with-next
    142          void hw_audio_sgtl5000_init(void)
    143          {
   \                     hw_audio_sgtl5000_init:
   \   00000000   0xB580             PUSH     {R7,LR}
    144              //# Configuration for 1.8V, 1.8V, 1.8V VDDD, VDDA, VDDIO
    145              //# Set VDDD regulator
    146              _write(SGTL5000_CHIP_LINREG_CTRL, 0x000c);
   \   00000002   0x210C             MOVS     R1,#+12
   \   00000004   0x2026             MOVS     R0,#+38
   \   00000006   0x.... 0x....      BL       _write
    147          
    148              // Enable internal oscillator for charge pump
    149              _write(SGTL5000_CHIP_CLK_TOP_CTRL, 0x0800);
   \   0000000A   0xF44F 0x6100      MOV      R1,#+2048
   \   0000000E   0x2034             MOVS     R0,#+52
   \   00000010   0x.... 0x....      BL       _write
    150          
    151              //# Set VAG level, ref bias to -50%
    152              //_write(SGTL5000_CHIP_REF_CTRL, 0x004E);
    153          
    154              _write(SGTL5000_CHIP_REF_CTRL, 0x01EE);
   \   00000014   0xF44F 0x71F7      MOV      R1,#+494
   \   00000018   0x2028             MOVS     R0,#+40
   \   0000001A   0x.... 0x....      BL       _write
    155                  
    156              //# Set LINREG level to 1V
    157              _write(SGTL5000_CHIP_LINREG_CTRL, 0x000C);
   \   0000001E   0x210C             MOVS     R1,#+12
   \   00000020   0x2026             MOVS     R0,#+38
   \   00000022   0x.... 0x....      BL       _write
    158              
    159              //# Set LINEOUT voltage/current
    160              _write(SGTL5000_CHIP_LINE_OUT_CTRL, 0x0F04);
   \   00000026   0xF640 0x7104      MOVW     R1,#+3844
   \   0000002A   0x202C             MOVS     R0,#+44
   \   0000002C   0x.... 0x....      BL       _write
    161          
    162              //# Set LO volume
    163              //_write(SGTL5000_CHIP_LINE_OUT_VOL, 0x0F0F);
    164              _write(SGTL5000_CHIP_LINE_OUT_VOL, 0x0000);
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x202E             MOVS     R0,#+46
   \   00000034   0x.... 0x....      BL       _write
    165          
    166          
    167              //# Power up inputs/outputs  
    168              //# Power up CPUMP, Power up VAG, Turn off VDDD regulators (using ext supplies)
    169              //_write(SGTL5000_CHIP_ANA_POWER, 0x4AFF);
    170              // by gj, adc for mic set to mono mode
    171              _write(SGTL5000_CHIP_ANA_POWER, 0x4ABF);
   \   00000038   0xF644 0x21BF      MOVW     R1,#+19135
   \   0000003C   0x2030             MOVS     R0,#+48
   \   0000003E   0x.... 0x....      BL       _write
    172          
    173              //# Power up digital blocks
    174              _write(SGTL5000_CHIP_DIG_POWER, 0x01FF);
   \   00000042   0xF240 0x11FF      MOVW     R1,#+511
   \   00000046   0x2002             MOVS     R0,#+2
   \   00000048   0x.... 0x....      BL       _write
    175          
    176              //# Set clocks for 48kHz, 256*Fs
    177              //_write(SGTL5000_CHIP_CLK_CTRL,0x0008);
    178              
    179              // 44.1 kHz
    180              // _write(SGTL5000_CHIP_CLK_CTRL,0x0004);
    181              // 32 k
    182              _write(SGTL5000_CHIP_CLK_CTRL,0x0000);
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x2004             MOVS     R0,#+4
   \   00000050   0x.... 0x....      BL       _write
    183          
    184              //# Set Master, 24-bit I2S
    185              _write(SGTL5000_CHIP_I2S_CTRL, 0x0010);
   \   00000054   0x2110             MOVS     R1,#+16
   \   00000056   0x2006             MOVS     R0,#+6
   \   00000058   0x.... 0x....      BL       _write
    186          
    187              //# Set I/O configuration
    188              // adc in to i2s out (i.e. input to Kinetis tower card)
    189              // i2s in to dac (i.e.output from Kinetis tower card)
    190          
    191              // I2S_IN->DAC 
    192              //_write(SGTL5000_CHIP_SSS_CTRL, 0x0010);
    193          
    194              // I2S_IN->DAP->DAC->LINEOUT, HP
    195              _write(SGTL5000_CHIP_DAP_CTRL, 0x0001); // DAP_EN
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0xF44F 0x7080      MOV      R0,#+256
   \   00000062   0x.... 0x....      BL       _write
    196              // i2s->dap->dac
    197              _write(SGTL5000_CHIP_SSS_CTRL, 0x0070); 
   \   00000066   0x2170             MOVS     R1,#+112
   \   00000068   0x200A             MOVS     R0,#+10
   \   0000006A   0x.... 0x....      BL       _write
    198              // by gj, adc->dap->dac, ok
    199              //_write(SGTL5000_CHIP_SSS_CTRL, 0x0030); 
    200              // by gj adc-->dac
    201              //_write(SGTL5000_CHIP_SSS_CTRL, 0x0000); 
    202              // open micphone
    203              _write(SGTL5000_CHIP_MIC_CTRL, 2<<8);
   \   0000006E   0xF44F 0x7100      MOV      R1,#+512
   \   00000072   0x202A             MOVS     R0,#+42
   \   00000074   0x.... 0x....      BL       _write
    204          
    205          
    206              // i2s in-> dac
    207              //_write(SGTL5000_CHIP_SSS_CTRL, 0x0050);
    208          
    209              //# Set Unmute DAC, ADC
    210              //_write(SGTL5000_CHIP_ADCDAC_CTRL, 0x0230);
    211              _write(SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);        
   \   00000078   0x2100             MOVS     R1,#+0
   \   0000007A   0x200E             MOVS     R0,#+14
   \   0000007C   0x.... 0x....      BL       _write
    212              _write(SGTL5000_CHIP_DAC_VOL, 0x0000);
   \   00000080   0x2100             MOVS     R1,#+0
   \   00000082   0x2010             MOVS     R0,#+16
   \   00000084   0x.... 0x....      BL       _write
    213          
    214              _write(SGTL5000_CHIP_LINE_OUT_VOL, 0x0F0F); // Lineout Volume Adjustment
   \   00000088   0xF640 0x710F      MOVW     R1,#+3855
   \   0000008C   0x202E             MOVS     R0,#+46
   \   0000008E   0x.... 0x....      BL       _write
    215          
    216              // Set Line Out Analog Ground to 1.55V
    217              _write(SGTL5000_CHIP_LINE_OUT_CTRL, 0x0F1E); 
   \   00000092   0xF640 0x711E      MOVW     R1,#+3870
   \   00000096   0x202C             MOVS     R0,#+44
   \   00000098   0x.... 0x....      BL       _write
    218          
    219              //For Input from Line IN
    220              //_write(SGTL5000_CHIP_ANA_CTRL ,0x0004);
    221          
    222              // dac->hp, micphone->adc, hp unmute, adc unmute
    223              _write(SGTL5000_CHIP_ANA_CTRL ,0x0000);
   \   0000009C   0x2100             MOVS     R1,#+0
   \   0000009E   0x2024             MOVS     R0,#+36
   \   000000A0   0x.... 0x....      BL       _write
    224              _write(SGTL5000_CHIP_DAP_MAIN_CHAN,0xFFFF);
   \   000000A4   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000A8   0xF44F 0x7090      MOV      R0,#+288
   \   000000AC   0x.... 0x....      BL       _write
    225          
    226              // Turn ON AVC - Very Important for gain level
    227              _write(SGTL5000_CHIP_DAP_AVC_CTRL,0x7101); // Try AVC enable with max. GAIN
   \   000000B0   0xF247 0x1101      MOVW     R1,#+28929
   \   000000B4   0xF44F 0x7092      MOV      R0,#+292
   \   000000B8   0x.... 0x....      BL       _write
    228              _write(SGTL5000_CHIP_DAP_BASS_ENHANCE,0x0021); // Enable Bass Boost
   \   000000BC   0x2121             MOVS     R1,#+33
   \   000000BE   0xF44F 0x7082      MOV      R0,#+260
   \   000000C2   0x.... 0x....      BL       _write
    229              _write(SGTL5000_CHIP_DAP_BASS_ENHANCE_CTRL,0x0000);
   \   000000C6   0x2100             MOVS     R1,#+0
   \   000000C8   0xF44F 0x7083      MOV      R0,#+262
   \   000000CC   0x.... 0x....      BL       _write
    230          }
   \   000000D0   0xBD01             POP      {R0,PC}          ;; return
    231          
    232          #define SIN_TEST
    233          /*
    234              about how to show sinewave
    235          
    236              sample rate is set to 32k
    237          */
    238          #ifdef SIN_TEST
    239          #include "math.h"
    240          #endif

   \                                 In section .text, align 2, keep-with-next
    241          void hw_audio_sgtl5000_play(s32 *sin_table, s32 *sin_table2, uint buf_size)
    242          {
   \                     hw_audio_sgtl5000_play:
   \   00000000   0xB430             PUSH     {R4,R5}
    243              int i = 0;
   \   00000002   0x2300             MOVS     R3,#+0
    244          
    245              while(1)
    246              {
    247                  // clear flag
    248                  if(I2S0_TCSR&(1<<18))
   \                     ??hw_audio_sgtl5000_play_0:
   \   00000004   0x....             LDR.N    R4,??DataTable3_2  ;; 0x4002f000
   \   00000006   0x6824             LDR      R4,[R4, #+0]
   \   00000008   0x0364             LSLS     R4,R4,#+13
   \   0000000A   0xD505             BPL.N    ??hw_audio_sgtl5000_play_1
    249                      I2S0_TCSR |= (1<<18);
   \   0000000C   0x....             LDR.N    R4,??DataTable3_2  ;; 0x4002f000
   \   0000000E   0x6824             LDR      R4,[R4, #+0]
   \   00000010   0xF454 0x2480      ORRS     R4,R4,#0x40000
   \   00000014   0x....             LDR.N    R5,??DataTable3_2  ;; 0x4002f000
   \   00000016   0x602C             STR      R4,[R5, #+0]
    250                      
    251                  //continue;
    252                  if( (I2S0_TCSR&(1<<16)) != 0)
   \                     ??hw_audio_sgtl5000_play_1:
   \   00000018   0x....             LDR.N    R4,??DataTable3_2  ;; 0x4002f000
   \   0000001A   0x6824             LDR      R4,[R4, #+0]
   \   0000001C   0x03E4             LSLS     R4,R4,#+15
   \   0000001E   0xD5F1             BPL.N    ??hw_audio_sgtl5000_play_0
    253                  {
    254                      #ifdef SIN_TEST
    255                          I2S0_TDR0 = sin_table[i];
   \   00000020   0xF850 0x4023      LDR      R4,[R0, R3, LSL #+2]
   \   00000024   0x....             LDR.N    R5,??DataTable3_3  ;; 0x4002f020
   \   00000026   0x602C             STR      R4,[R5, #+0]
    256                          I2S0_TDR0 = sin_table2[i];
   \   00000028   0xF851 0x4023      LDR      R4,[R1, R3, LSL #+2]
   \   0000002C   0x....             LDR.N    R5,??DataTable3_3  ;; 0x4002f020
   \   0000002E   0x602C             STR      R4,[R5, #+0]
    257                          i++;
   \   00000030   0x1C5B             ADDS     R3,R3,#+1
    258                          if(i >= buf_size)
   \   00000032   0x4293             CMP      R3,R2
   \   00000034   0xD3E6             BCC.N    ??hw_audio_sgtl5000_play_0
    259                              i = 0;
   \   00000036   0x2400             MOVS     R4,#+0
   \   00000038   0x0023             MOVS     R3,R4
   \   0000003A   0xE7E3             B.N      ??hw_audio_sgtl5000_play_0
    260                      #else
    261                          I2S0_TX0 = I2S0_RX0; // &0xffff00;
    262                          I2S0_TX0 = I2S0_RX0; // &0xffff00;
    263                      #endif
    264                  }
    265          // */
    266              }
    267          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40066000         DC32     0x40066000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     `?<Constant "get sgtl5000 id: %x \\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x4002F000         DC32     0x4002f000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x4002F020         DC32     0x4002f020

   \                                 In section .rodata, align 4
   \                     `?<Constant "get sgtl5000 id: %x \\n">`:
   \   00000000   0x67 0x65          DC8 "get sgtl5000 id: %x \012"
   \              0x74 0x20    
   \              0x73 0x67    
   \              0x74 0x6C    
   \              0x35 0x30    
   \              0x30 0x30    
   \              0x20 0x69    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0
    268          
    269          
    270          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   _read
        16   -> i2c_get_ack
        16   -> i2c_give_ack
        16   -> i2c_give_nack
        16   -> i2c_read_byte
        16   -> i2c_repeated_start
        16   -> i2c_set_rx_mode
        16   -> i2c_start
        16   -> i2c_stop
        16   -> i2c_wait
        16   -> i2c_write_byte
        16   -> pause
      16   _write
        16   -> i2c_get_ack
        16   -> i2c_start
        16   -> i2c_stop
        16   -> i2c_wait
        16   -> i2c_write_byte
        16   -> pause
       8   hw_audio_sgtl5000_init
         8   -> _write
       8   hw_audio_sgtl5000_play
       8   hw_audio_sgtl5000_test_reg
         8   -> _read
         8   -> q_printf
       0   pause


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "get sgtl5000 id: %x \n">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
     190  _read
     136  _write
     210  hw_audio_sgtl5000_init
      60  hw_audio_sgtl5000_play
      20  hw_audio_sgtl5000_test_reg
      18  pause

 
  24 bytes in section .rodata
 650 bytes in section .text
 
 650 bytes of CODE  memory
  24 bytes of CONST memory

Errors: none
Warnings: none
