###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      15/Jul/2015  14:11:15 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\User\Desktop\freescale\source\demo_i2s\src\lib\ #
#                    q_printf.c                                               #
#    Command line =  C:\Users\User\Desktop\freescale\source\demo_i2s\src\lib\ #
#                    q_printf.c -lCN C:\Users\User\Desktop\freescale\source\D #
#                    ebug\List\ -o C:\Users\User\Desktop\freescale\source\Deb #
#                    ug\Obj\ --no_cse --no_unroll --no_inline                 #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --char_is_signed --fpu=None --dlib_config             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\work\prj\g_demo_k\demo_k\src\include\ -On             #
#    List file    =  C:\Users\User\Desktop\freescale\source\Debug\List\q_prin #
#                    tf.lst                                                   #
#    Object file  =  C:\Users\User\Desktop\freescale\source\Debug\Obj\q_print #
#                    f.o                                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\User\Desktop\freescale\source\demo_i2s\src\lib\q_printf.c
      1          
      2          
      3          #include "..\\include\\global.h" 
      4          #include "..\\include\\hal_uart.h"
      5          #include <stdarg.h>
      6          
      7          #ifdef printf
      8          #undef printf
      9          #endif
     10          #include <stdio.h>
     11          
     12          

   \                                 In section .bss, align 4
     13          static char buf[512];
   \                     buf:
   \   00000000                      DS8 512
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void send_string(char *p_str)
     16          {
   \                     send_string:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     17              for(;*p_str!=NULL;p_str++)
   \                     ??send_string_0:
   \   00000004   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD00C             BEQ.N    ??send_string_1
     18              {
     19                  hal_uart_shell_send_byte(*p_str);
   \   0000000C   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000010   0x.... 0x....      BL       hal_uart_shell_send_byte
     20                  if(*p_str == '\n')
   \   00000014   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000018   0x280A             CMP      R0,#+10
   \   0000001A   0xD102             BNE.N    ??send_string_2
     21                      hal_uart_shell_send_byte('\r');
   \   0000001C   0x200D             MOVS     R0,#+13
   \   0000001E   0x.... 0x....      BL       hal_uart_shell_send_byte
     22              }
   \                     ??send_string_2:
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \   00000024   0xE7EE             B.N      ??send_string_0
     23          }
   \                     ??send_string_1:
   \   00000026   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     24          void q_printf(char *fmt, ...)
     25          {
   \                     q_printf:
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB530             PUSH     {R4,R5,LR}
   \   00000004   0x0004             MOVS     R4,R0
     26              va_list arg;
     27              va_start(arg, fmt);
   \   00000006   0xA803             ADD      R0,SP,#+12
   \   00000008   0x0005             MOVS     R5,R0
     28              vsprintf(buf, fmt, arg);
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0x0021             MOVS     R1,R4
   \   0000000E   0x....             LDR.N    R0,??DataTable1_2
   \   00000010   0x.... 0x....      BL       vsprintf
     29              va_end(arg);
     30          
     31              send_string(buf);
   \   00000014   0x....             LDR.N    R0,??DataTable1_2
   \   00000016   0x.... 0x....      BL       send_string
     32          }
   \   0000001A   0xBC30             POP      {R4,R5}
   \   0000001C   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return

   \                                 In section .text, align 2, keep-with-next
     33          void print_buf(void *buf, uint size)
     34          {
   \                     print_buf:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     35              int i;
     36              byte *p = (byte*)buf;
   \   00000006   0x0027             MOVS     R7,R4
     37              for(i=0;i<size;i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0006             MOVS     R6,R0
   \                     ??print_buf_0:
   \   0000000C   0x42AE             CMP      R6,R5
   \   0000000E   0xD213             BCS.N    ??print_buf_1
     38              {
     39                  q_printf("0x%.2x,", p[i]);
   \   00000010   0x5DF1             LDRB     R1,[R6, R7]
   \   00000012   0x....             LDR.N    R0,??DataTable1_3
   \   00000014   0x.... 0x....      BL       q_printf
     40                  if(((i+1)&0x3) == 0)
   \   00000018   0x1C70             ADDS     R0,R6,#+1
   \   0000001A   0xF010 0x0F03      TST      R0,#0x3
   \   0000001E   0xD102             BNE.N    ??print_buf_2
     41                      q_printf("  ");
   \   00000020   0x....             ADR.N    R0,??DataTable1  ;; 0x20, 0x20, 0x00, 0x00
   \   00000022   0x.... 0x....      BL       q_printf
     42                  if(((i+1)&0x7) == 0)
   \                     ??print_buf_2:
   \   00000026   0x1C70             ADDS     R0,R6,#+1
   \   00000028   0xF010 0x0F07      TST      R0,#0x7
   \   0000002C   0xD102             BNE.N    ??print_buf_3
     43                      q_printf("\n");
   \   0000002E   0x....             ADR.N    R0,??DataTable1_1  ;; "\n"
   \   00000030   0x.... 0x....      BL       q_printf
     44              }
   \                     ??print_buf_3:
   \   00000034   0x1C76             ADDS     R6,R6,#+1
   \   00000036   0xE7E9             B.N      ??print_buf_0
     45          
     46              q_printf("\n");
   \                     ??print_buf_1:
   \   00000038   0x....             ADR.N    R0,??DataTable1_1  ;; "\n"
   \   0000003A   0x.... 0x....      BL       q_printf
     47          }
   \   0000003E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x20 0x20          DC8      0x20, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     `?<Constant "0x%.2x,">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "0x%.2x,">`:
   \   00000000   0x30 0x78          DC8 "0x%.2x,"
   \              0x25 0x2E    
   \              0x32 0x78    
   \              0x2C 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x20 0x20          DC8 "  "
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 2
   \   00000000   0x0A 0x00          DC8 "\012"
     48          
     49          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   print_buf
        24   -> q_printf
      24   q_printf
        24   -> send_string
        24   -> vsprintf
       8   send_string
         8   -> hal_uart_shell_send_byte


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "  ">
       8  ?<Constant "0x%.2x,">
       2  ?<Constant "\n">
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
     512  buf
      64  print_buf
      32  q_printf
      40  send_string

 
 512 bytes in section .bss
  14 bytes in section .rodata
 152 bytes in section .text
 
 152 bytes of CODE  memory
  14 bytes of CONST memory
 512 bytes of DATA  memory

Errors: none
Warnings: none
