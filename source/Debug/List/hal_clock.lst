###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.3.4676/W32 for ARM      15/Jul/2015  14:11:14 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\User\Desktop\freescale\source\demo_i2s\src\hal\ #
#                    hal_clock.c                                              #
#    Command line =  C:\Users\User\Desktop\freescale\source\demo_i2s\src\hal\ #
#                    hal_clock.c -lCN C:\Users\User\Desktop\freescale\source\ #
#                    Debug\List\ -o C:\Users\User\Desktop\freescale\source\De #
#                    bug\Obj\ --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --char_is_signed --fpu=None --dlib_config             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\work\prj\g_demo_k\demo_k\src\include\ -On             #
#    List file    =  C:\Users\User\Desktop\freescale\source\Debug\List\hal_cl #
#                    ock.lst                                                  #
#    Object file  =  C:\Users\User\Desktop\freescale\source\Debug\Obj\hal_clo #
#                    ck.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\User\Desktop\freescale\source\demo_i2s\src\hal\hal_clock.c
      1          
      2          #include "..\\include\\global.h"
      3          #include "..\\include\\MKxxx.h"
      4          #include "..\\include\\hal_config.h"
      5          
      6          
      7          // xM --> /n --> 2M --> *24 --> 48M

   \                                 In section .text, align 2, keep-with-next
      8          void pll_init(void)
      9          {
     10              #if (BOARD == BOARD_K60) || (BOARD == BOARD_K50)
     11                  MCG_C2 = MCG_C2_RANGE0(2);
   \                     pll_init:
   \   00000000   0x....             LDR.N    R0,??DataTable1  ;; 0x40064001
   \   00000002   0x2120             MOVS     R1,#+32
   \   00000004   0x7001             STRB     R1,[R0, #+0]
     12              #else
     13                  MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK;
     14              #endif
     15          
     16              // after initialization of oscillator release latched state of oscillator and GPIO
     17              //SIM_SCGC4 |= SIM_SCGC4_LLWU_MASK;
     18              //LLWU_CS |= LLWU_CS_ACKISO_MASK;
     19            
     20              // Select external oscilator and Reference Divider and clear IREFS to start ext osc
     21              // CLKS=2, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
     22              MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);
   \   00000006   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40064000
   \   00000008   0x2198             MOVS     R1,#+152
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
     23          
     24          
     25              #if (BOARD == BOARD_K10) || (BOARD == BOARD_K40)
     26                  // if we aren't using an osc input we don't need to wait for the osc to init
     27                  // wait for oscillator to initialize
     28                  while (!(MCG_S & MCG_S_OSCINIT0_MASK))
     29                      ;
     30              #endif
     31          
     32              // wait for Reference clock Status bit to clear
     33              while (MCG_S & MCG_S_IREFST_MASK)
   \                     ??pll_init_0:
   \   0000000C   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40064006
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x06C0             LSLS     R0,R0,#+27
   \   00000012   0xD4FB             BMI.N    ??pll_init_0
     34                  ; 
     35              // Wait for clock status bits to show clock source is ext ref clk
     36              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2)
   \                     ??pll_init_1:
   \   00000014   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40064006
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x2802             CMP      R0,#+2
   \   00000020   0xD1F8             BNE.N    ??pll_init_1
     37                  ; 
     38          
     39              // Now in FBE
     40              #if (BOARD == BOARD_K10) || (BOARD == BOARD_K40)
     41              // 输入时钟4分频,8M->2M
     42              MCG_C5 = MCG_C5_PRDIV0(3);
     43              #endif
     44          
     45              #if (BOARD == BOARD_K50) || (BOARD == BOARD_K60)
     46              // 输入时钟25分频,50M->2M
     47              MCG_C5 = MCG_C5_PRDIV0(24);
   \   00000022   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40064004
   \   00000024   0x2118             MOVS     R1,#+24
   \   00000026   0x7001             STRB     R1,[R0, #+0]
     48              #endif
     49          
     50              // Ensure MCG_C6 is at the reset default of 0. 
     51              // LOLIE disabled, PLL disabled, clk monitor disabled, PLL VCO divider is clear
     52              MCG_C6 = 0x0;
   \   00000028   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40064005
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x7001             STRB     R1,[R0, #+0]
     53              // set_sys_dividers(0,1,1,3), to get 1,2,2,4;
     54              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) 
     55                          | SIM_CLKDIV1_OUTDIV3(1) | SIM_CLKDIV1_OUTDIV4(3);
   \   0000002E   0x....             LDR.N    R0,??DataTable1_5  ;; 0x40048044
   \   00000030   0x....             LDR.N    R1,??DataTable1_6  ;; 0x1130000
   \   00000032   0x6001             STR      R1,[R0, #+0]
     56          
     57              // 0 = 24倍频
     58              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0); 
   \   00000034   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40064005
   \   00000036   0x2140             MOVS     R1,#+64
   \   00000038   0x7001             STRB     R1,[R0, #+0]
     59          
     60              while (!(MCG_S & MCG_S_PLLST_MASK)){}; // wait for PLL status bit to set
   \                     ??pll_init_2:
   \   0000003A   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40064006
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x0680             LSLS     R0,R0,#+26
   \   00000040   0xD5FB             BPL.N    ??pll_init_2
     61              while (!(MCG_S & MCG_S_LOCK0_MASK)){}; // Wait for LOCK bit to set
   \                     ??pll_init_3:
   \   00000042   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40064006
   \   00000044   0x7800             LDRB     R0,[R0, #+0]
   \   00000046   0x0640             LSLS     R0,R0,#+25
   \   00000048   0xD5FB             BPL.N    ??pll_init_3
     62          
     63              // Now running PBE Mode
     64              // Transition into PEE by setting CLKS to 0
     65              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \   0000004A   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40064000
   \   0000004C   0x7800             LDRB     R0,[R0, #+0]
   \   0000004E   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000052   0x....             LDR.N    R1,??DataTable1_1  ;; 0x40064000
   \   00000054   0x7008             STRB     R0,[R1, #+0]
     66          
     67              // Wait for clock status bits to update
     68              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3)
   \                     ??pll_init_4:
   \   00000056   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40064006
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x2803             CMP      R0,#+3
   \   00000062   0xD1F8             BNE.N    ??pll_init_4
     69                  ;
     70          
     71              // Now running PEE Mode
     72          }
   \   00000064   0x4770             BX       LR               ;; return
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void port_clock_init(void)
     75          {
     76              // enable port clock
     77              SIM_SCGC5 |=  1u << SIM_SCGC5_PORTA_SHIFT; 
   \                     port_clock_init:
   \   00000000   0x....             LDR.N    R0,??DataTable1_7  ;; 0x40048038
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   00000008   0x....             LDR.N    R1,??DataTable1_7  ;; 0x40048038
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     78              SIM_SCGC5 |=  1u << SIM_SCGC5_PORTB_SHIFT; 
   \   0000000C   0x....             LDR.N    R0,??DataTable1_7  ;; 0x40048038
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000014   0x....             LDR.N    R1,??DataTable1_7  ;; 0x40048038
   \   00000016   0x6008             STR      R0,[R1, #+0]
     79              SIM_SCGC5 |=  1u << SIM_SCGC5_PORTC_SHIFT; 
   \   00000018   0x....             LDR.N    R0,??DataTable1_7  ;; 0x40048038
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000020   0x....             LDR.N    R1,??DataTable1_7  ;; 0x40048038
   \   00000022   0x6008             STR      R0,[R1, #+0]
     80              SIM_SCGC5 |=  1u << SIM_SCGC5_PORTD_SHIFT; 
   \   00000024   0x....             LDR.N    R0,??DataTable1_7  ;; 0x40048038
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   0000002C   0x....             LDR.N    R1,??DataTable1_7  ;; 0x40048038
   \   0000002E   0x6008             STR      R0,[R1, #+0]
     81              SIM_SCGC5 |=  1u << SIM_SCGC5_PORTE_SHIFT; 
   \   00000030   0x....             LDR.N    R0,??DataTable1_7  ;; 0x40048038
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000038   0x....             LDR.N    R1,??DataTable1_7  ;; 0x40048038
   \   0000003A   0x6008             STR      R0,[R1, #+0]
     82          }
   \   0000003C   0x4770             BX       LR               ;; return
     83          
     84          

   \                                 In section .text, align 2, keep-with-next
     85          void hal_clock_init(void)
     86          {
   \                     hal_clock_init:
   \   00000000   0xB580             PUSH     {R7,LR}
     87              pll_init();
   \   00000002   0x.... 0x....      BL       pll_init
     88              port_clock_init();
   \   00000006   0x.... 0x....      BL       port_clock_init
     89          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40064001         DC32     0x40064001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40064000         DC32     0x40064000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40064006         DC32     0x40064006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x40064004         DC32     0x40064004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40064005         DC32     0x40064005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x01130000         DC32     0x1130000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x40048038         DC32     0x40048038
     90          
     91          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   hal_clock_init
         8   -> pll_init
         8   -> port_clock_init
       0   pll_init
       0   port_clock_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
      12  hal_clock_init
     102  pll_init
      62  port_clock_init

 
 208 bytes in section .text
 
 208 bytes of CODE memory

Errors: none
Warnings: none
