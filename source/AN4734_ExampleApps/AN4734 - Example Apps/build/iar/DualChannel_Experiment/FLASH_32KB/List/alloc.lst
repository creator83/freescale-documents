###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.3.54009/W32 for ARM     18/Feb/2013  16:57:29 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\common\alloc.c                              #
#    Command line =  "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\common\alloc.c" -D IAR -D FRDM -D EX2 -lCN  #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -lB "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -o "D:\Profiles\B38350\My Documents\App              #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \" --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0+ -e --fpu=None           #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    rojects\DualChannel_Experiment\" -I                      #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    ommon\" -I "D:\Profiles\B38350\My Documents\App          #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\" -I "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\headers\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\llwu\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\adc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\lptmr\" -I "D:\Profiles\B38350\My Documents\App   #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\mcg\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\pmc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rcm\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rtc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\smc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\wdog\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    latforms\" -I "D:\Profiles\B38350\My Documents\App       #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\alloc.lst                                              #
#    Object file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \alloc.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B38350\My Documents\App Notes\Kinetis\L Series\CMP pin sampling\Example Projects\src\common\alloc.c
      1          /*
      2           * File:        alloc.c
      3           * Purpose:     generic malloc() and free() engine
      4           *
      5           * Notes:       99% of this code stolen/borrowed from the K&R C
      6           *              examples.
      7           *
      8           */
      9          
     10          #include "common.h"
     11          #include "stdlib.h"
     12          
     13          #pragma section = "HEAP"
     14          
     15          /********************************************************************/
     16          
     17          /*
     18           * This struct forms the minimum block size which is allocated, and
     19           * also forms the linked list for the memory space used with alloc()
     20           * and free().  It is padded so that on a 32-bit machine, all malloc'ed
     21           * pointers are 16-byte aligned.
     22           */
     23          typedef struct ALLOC_HDR
     24          {
     25              struct
     26              {
     27                  struct ALLOC_HDR     *ptr;
     28                  unsigned int size;
     29              } s;
     30              unsigned int align;
     31              unsigned int pad;
     32          } ALLOC_HDR;
     33          

   \                                 In section .bss, align 4
     34          static ALLOC_HDR base;
   \                     base:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     35          static ALLOC_HDR *freep = NULL;
   \                     freep:
   \   00000000                      DS8 4
     36          
     37          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     38          void
     39          free (void *ap)
     40          {
   \                     free:
   \   00000000   0xB500             PUSH     {LR}
     41              ALLOC_HDR *bp, *p;
     42          
     43              bp = (ALLOC_HDR *)ap - 1;   /* point to block header */
   \   00000002   0x3810             SUBS     R0,R0,#+16
     44              for (p = freep; !((bp > p) && (bp < p->s.ptr)) ; p = p->s.ptr)
   \   00000004   0x....             LDR      R1,??DataTable1
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0xE000             B        ??free_0
   \                     ??free_1:
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \                     ??free_0:
   \   0000000C   0x4281             CMP      R1,R0
   \   0000000E   0xD202             BCS      ??free_2
   \   00000010   0x680A             LDR      R2,[R1, #+0]
   \   00000012   0x4290             CMP      R0,R2
   \   00000014   0xD307             BCC      ??free_3
     45              {
     46                  if ((p >= p->s.ptr) && ((bp > p) || (bp < p->s.ptr)))
   \                     ??free_2:
   \   00000016   0x680A             LDR      R2,[R1, #+0]
   \   00000018   0x4291             CMP      R1,R2
   \   0000001A   0xD3F6             BCC      ??free_1
   \   0000001C   0x4281             CMP      R1,R0
   \   0000001E   0xD302             BCC      ??free_4
   \   00000020   0x680A             LDR      R2,[R1, #+0]
   \   00000022   0x4290             CMP      R0,R2
   \   00000024   0xD2F1             BCS      ??free_1
     47                  {
     48                      break; /* freed block at start or end of arena */
     49                  }
     50              }
     51          
     52              if ((bp + bp->s.size) == p->s.ptr)
   \                     ??free_4:
   \                     ??free_3:
   \   00000026   0x6842             LDR      R2,[R0, #+4]
   \   00000028   0x2310             MOVS     R3,#+16
   \   0000002A   0x435A             MULS     R2,R3,R2
   \   0000002C   0x1882             ADDS     R2,R0,R2
   \   0000002E   0x680B             LDR      R3,[R1, #+0]
   \   00000030   0x429A             CMP      R2,R3
   \   00000032   0xD108             BNE      ??free_5
     53              {
     54                  bp->s.size += p->s.ptr->s.size;
   \   00000034   0x6842             LDR      R2,[R0, #+4]
   \   00000036   0x680B             LDR      R3,[R1, #+0]
   \   00000038   0x685B             LDR      R3,[R3, #+4]
   \   0000003A   0x18D2             ADDS     R2,R2,R3
   \   0000003C   0x6042             STR      R2,[R0, #+4]
     55                  bp->s.ptr = p->s.ptr->s.ptr;
   \   0000003E   0x680A             LDR      R2,[R1, #+0]
   \   00000040   0x6812             LDR      R2,[R2, #+0]
   \   00000042   0x6002             STR      R2,[R0, #+0]
   \   00000044   0xE001             B        ??free_6
     56              }
     57              else
     58              {
     59                  bp->s.ptr = p->s.ptr;
   \                     ??free_5:
   \   00000046   0x680A             LDR      R2,[R1, #+0]
   \   00000048   0x6002             STR      R2,[R0, #+0]
     60              }
     61          
     62              if ((p + p->s.size) == bp)
   \                     ??free_6:
   \   0000004A   0x684A             LDR      R2,[R1, #+4]
   \   0000004C   0x2310             MOVS     R3,#+16
   \   0000004E   0x435A             MULS     R2,R3,R2
   \   00000050   0x188A             ADDS     R2,R1,R2
   \   00000052   0x4282             CMP      R2,R0
   \   00000054   0xD106             BNE      ??free_7
     63              {
     64                  p->s.size += bp->s.size;
   \   00000056   0x684A             LDR      R2,[R1, #+4]
   \   00000058   0x6843             LDR      R3,[R0, #+4]
   \   0000005A   0x18D2             ADDS     R2,R2,R3
   \   0000005C   0x604A             STR      R2,[R1, #+4]
     65                  p->s.ptr = bp->s.ptr;
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x6008             STR      R0,[R1, #+0]
   \   00000062   0xE000             B        ??free_8
     66              }
     67              else
     68              {
     69                  p->s.ptr = bp;
   \                     ??free_7:
   \   00000064   0x6008             STR      R0,[R1, #+0]
     70              }
     71          
     72              freep = p;
   \                     ??free_8:
   \   00000066   0x....             LDR      R0,??DataTable1
   \   00000068   0x6001             STR      R1,[R0, #+0]
     73          }
   \   0000006A   0xBD00             POP      {PC}             ;; return
     74          
     75          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     76          void *
     77          malloc (unsigned nbytes)
     78          {
   \                     malloc:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0001             MOVS     R1,R0
     79              /* Get addresses for the HEAP start and end */
     80              #if defined(CW)  
     81                extern char __HEAP_START[];
     82                extern char __HEAP_END[];
     83              #elif defined(IAR)
     84                char* __HEAP_START = __section_begin("HEAP");
   \   00000004   0x....             LDR      R0,??DataTable1_1
     85                char* __HEAP_END = __section_end("HEAP");
   \   00000006   0x....             LDR      R3,??DataTable1_2
     86              #elif defined(KEIL)
     87              #endif
     88             
     89              ALLOC_HDR *p, *prevp;
     90              unsigned nunits;
     91          
     92              nunits = ((nbytes+sizeof(ALLOC_HDR)-1) / sizeof(ALLOC_HDR)) + 1;
   \   00000008   0x310F             ADDS     R1,R1,#+15
   \   0000000A   0x0909             LSRS     R1,R1,#+4
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
     93          
     94              if ((prevp = freep) == NULL)
   \   0000000E   0x....             LDR      R2,??DataTable1
   \   00000010   0x6812             LDR      R2,[R2, #+0]
   \   00000012   0x2A00             CMP      R2,#+0
   \   00000014   0xD10C             BNE      ??malloc_0
     95              {
     96                  p = (ALLOC_HDR *)__HEAP_START;
     97                  p->s.size = ( ((uint32)__HEAP_END - (uint32)__HEAP_START)
     98                      / sizeof(ALLOC_HDR) );
   \   00000016   0x1A1A             SUBS     R2,R3,R0
   \   00000018   0x0912             LSRS     R2,R2,#+4
   \   0000001A   0x6042             STR      R2,[R0, #+4]
     99                  p->s.ptr = &base;
   \   0000001C   0x....             LDR      R2,??DataTable1_3
   \   0000001E   0x6002             STR      R2,[R0, #+0]
    100                  base.s.ptr = p;
   \   00000020   0x....             LDR      R2,??DataTable1_3
   \   00000022   0x6010             STR      R0,[R2, #+0]
    101                  base.s.size = 0;
   \   00000024   0x....             LDR      R0,??DataTable1_3
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x6042             STR      R2,[R0, #+4]
    102                  prevp = freep = &base;
   \   0000002A   0x....             LDR      R2,??DataTable1_3
   \   0000002C   0x....             LDR      R0,??DataTable1
   \   0000002E   0x6002             STR      R2,[R0, #+0]
    103              }
    104          
    105              for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr)
   \                     ??malloc_0:
   \   00000030   0x6810             LDR      R0,[R2, #+0]
   \   00000032   0xE001             B        ??malloc_1
   \                     ??malloc_2:
   \   00000034   0x0002             MOVS     R2,R0
   \   00000036   0x6800             LDR      R0,[R0, #+0]
    106              {
    107                  if (p->s.size >= nunits)
   \                     ??malloc_1:
   \   00000038   0x6843             LDR      R3,[R0, #+4]
   \   0000003A   0x428B             CMP      R3,R1
   \   0000003C   0xD311             BCC      ??malloc_3
    108                  {
    109                      if (p->s.size == nunits)
   \   0000003E   0x6843             LDR      R3,[R0, #+4]
   \   00000040   0x428B             CMP      R3,R1
   \   00000042   0xD102             BNE      ??malloc_4
    110                      {
    111                          prevp->s.ptr = p->s.ptr;
   \   00000044   0x6801             LDR      R1,[R0, #+0]
   \   00000046   0x6011             STR      R1,[R2, #+0]
   \   00000048   0xE007             B        ??malloc_5
    112                      }
    113                      else
    114                      {
    115                          p->s.size -= nunits;
   \                     ??malloc_4:
   \   0000004A   0x6843             LDR      R3,[R0, #+4]
   \   0000004C   0x1A5B             SUBS     R3,R3,R1
   \   0000004E   0x6043             STR      R3,[R0, #+4]
    116                          p += p->s.size;
   \   00000050   0x6843             LDR      R3,[R0, #+4]
   \   00000052   0x2410             MOVS     R4,#+16
   \   00000054   0x4363             MULS     R3,R4,R3
   \   00000056   0x18C0             ADDS     R0,R0,R3
    117                          p->s.size = nunits;
   \   00000058   0x6041             STR      R1,[R0, #+4]
    118                      }
    119                      freep = prevp;
   \                     ??malloc_5:
   \   0000005A   0x....             LDR      R1,??DataTable1
   \   0000005C   0x600A             STR      R2,[R1, #+0]
    120                      return (void *)(p + 1);
   \   0000005E   0x3010             ADDS     R0,R0,#+16
   \   00000060   0xE004             B        ??malloc_6
    121                  }
    122          
    123                  if (p == freep)
   \                     ??malloc_3:
   \   00000062   0x....             LDR      R2,??DataTable1
   \   00000064   0x6812             LDR      R2,[R2, #+0]
   \   00000066   0x4290             CMP      R0,R2
   \   00000068   0xD1E4             BNE      ??malloc_2
    124                      return NULL;
   \   0000006A   0x2000             MOVS     R0,#+0
   \                     ??malloc_6:
   \   0000006C   0xBD10             POP      {R4,PC}          ;; return
    125              }
    126          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     freep

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     SFB(HEAP)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     SFE(HEAP)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     base
    127          
    128          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        4  free
        8  malloc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
      16  base
     108  free
       4  freep
     110  malloc

 
  20 bytes in section .bss
 234 bytes in section .text
 
 234 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
