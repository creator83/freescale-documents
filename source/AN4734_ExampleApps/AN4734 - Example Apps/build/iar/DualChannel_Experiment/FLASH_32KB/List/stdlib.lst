###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.3.54009/W32 for ARM     18/Feb/2013  16:57:31 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\common\stdlib.c                             #
#    Command line =  "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\common\stdlib.c" -D IAR -D FRDM -D EX2      #
#                    -lCN "D:\Profiles\B38350\My Documents\App                #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -lB "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -o "D:\Profiles\B38350\My Documents\App              #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \" --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0+ -e --fpu=None           #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    rojects\DualChannel_Experiment\" -I                      #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    ommon\" -I "D:\Profiles\B38350\My Documents\App          #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\" -I "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\headers\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\llwu\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\adc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\lptmr\" -I "D:\Profiles\B38350\My Documents\App   #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\mcg\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\pmc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rcm\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rtc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\smc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\wdog\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    latforms\" -I "D:\Profiles\B38350\My Documents\App       #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\stdlib.lst                                             #
#    Object file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \stdlib.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B38350\My Documents\App Notes\Kinetis\L Series\CMP pin sampling\Example Projects\src\common\stdlib.c
      1          /*
      2           * File:        stdlib.c
      3           * Purpose:     Functions normally found in a standard C lib.
      4           *
      5           * Notes:       This supports ASCII only!!!
      6           *
      7           */
      8          
      9          #include "common.h"
     10          #include "stdlib.h"
     11          
     12          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     13          int
     14          isspace (int ch)
     15          {
   \                     isspace:
   \   00000000   0xB500             PUSH     {LR}
     16              if ((ch == ' ') || (ch == '\t'))    /* \n ??? */
   \   00000002   0x2820             CMP      R0,#+32
   \   00000004   0xD001             BEQ      ??isspace_0
   \   00000006   0x2809             CMP      R0,#+9
   \   00000008   0xD101             BNE      ??isspace_1
     17                  return TRUE;
   \                     ??isspace_0:
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xE000             B        ??isspace_2
     18              else
     19                  return FALSE;
   \                     ??isspace_1:
   \   0000000E   0x2000             MOVS     R0,#+0
   \                     ??isspace_2:
   \   00000010   0xBD00             POP      {PC}             ;; return
     20          }
     21          
     22          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     23          int
     24          isalnum (int ch)
     25          {
   \                     isalnum:
   \   00000000   0xB500             PUSH     {LR}
     26              /* ASCII only */
     27              if (((ch >= '0') && (ch <= '9')) ||
     28                  ((ch >= 'A') && (ch <= 'Z')) ||
     29                  ((ch >= 'a') && (ch <= 'z')))
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x3930             SUBS     R1,R1,#+48
   \   00000006   0x290A             CMP      R1,#+10
   \   00000008   0xD306             BCC      ??isalnum_0
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0x3941             SUBS     R1,R1,#+65
   \   0000000E   0x291A             CMP      R1,#+26
   \   00000010   0xD302             BCC      ??isalnum_0
   \   00000012   0x3861             SUBS     R0,R0,#+97
   \   00000014   0x281A             CMP      R0,#+26
   \   00000016   0xD201             BCS      ??isalnum_1
     30                  return TRUE;
   \                     ??isalnum_0:
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE000             B        ??isalnum_2
     31              else
     32                  return FALSE;
   \                     ??isalnum_1:
   \   0000001C   0x2000             MOVS     R0,#+0
   \                     ??isalnum_2:
   \   0000001E   0xBD00             POP      {PC}             ;; return
     33          }
     34          
     35          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     36          int
     37          isdigit (int ch)
     38          {
   \                     isdigit:
   \   00000000   0xB500             PUSH     {LR}
     39              /* ASCII only */
     40              if ((ch >= '0') && (ch <= '9'))
   \   00000002   0x3830             SUBS     R0,R0,#+48
   \   00000004   0x280A             CMP      R0,#+10
   \   00000006   0xD201             BCS      ??isdigit_0
     41                  return TRUE;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B        ??isdigit_1
     42              else
     43                  return FALSE;
   \                     ??isdigit_0:
   \   0000000C   0x2000             MOVS     R0,#+0
   \                     ??isdigit_1:
   \   0000000E   0xBD00             POP      {PC}             ;; return
     44          }
     45          
     46          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     47          int
     48          isupper (int ch)
     49          {
   \                     isupper:
   \   00000000   0xB500             PUSH     {LR}
     50              /* ASCII only */
     51              if ((ch >= 'A') && (ch <= 'Z'))
   \   00000002   0x3841             SUBS     R0,R0,#+65
   \   00000004   0x281A             CMP      R0,#+26
   \   00000006   0xD201             BCS      ??isupper_0
     52                  return TRUE;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B        ??isupper_1
     53              else
     54                  return FALSE;
   \                     ??isupper_0:
   \   0000000C   0x2000             MOVS     R0,#+0
   \                     ??isupper_1:
   \   0000000E   0xBD00             POP      {PC}             ;; return
     55          }
     56          
     57          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     58          int
     59          strcasecmp (const char *s1, const char *s2)
     60          {
   \                     strcasecmp:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0002             MOVS     R2,R0
     61              char    c1, c2;
     62              int     result = 0;
   \   00000004   0x2000             MOVS     R0,#+0
     63          
     64              while (result == 0)
   \                     ??strcasecmp_0:
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD11A             BNE      ??strcasecmp_1
     65              {
     66                  c1 = *s1++;
   \   0000000A   0x7813             LDRB     R3,[R2, #+0]
   \   0000000C   0x1C52             ADDS     R2,R2,#+1
     67                  c2 = *s2++;
   \   0000000E   0x780C             LDRB     R4,[R1, #+0]
   \   00000010   0x1C49             ADDS     R1,R1,#+1
     68                  if ((c1 >= 'a') && (c1 <= 'z'))
   \   00000012   0x0018             MOVS     R0,R3
   \   00000014   0x3861             SUBS     R0,R0,#+97
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x281A             CMP      R0,#+26
   \   0000001A   0xD200             BCS      ??strcasecmp_2
     69                      c1 = (char)(c1 - ' ');
   \   0000001C   0x3B20             SUBS     R3,R3,#+32
     70                  if ((c2 >= 'a') && (c2 <= 'z'))
   \                     ??strcasecmp_2:
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x3861             SUBS     R0,R0,#+97
   \   00000022   0xB2C0             UXTB     R0,R0
   \   00000024   0x281A             CMP      R0,#+26
   \   00000026   0xD200             BCS      ??strcasecmp_3
     71                      c2 = (char)(c2 - ' ');
   \   00000028   0x3C20             SUBS     R4,R4,#+32
     72                  if ((result = (c1 - c2)) != 0)
   \                     ??strcasecmp_3:
   \   0000002A   0xB2DB             UXTB     R3,R3
   \   0000002C   0xB2E4             UXTB     R4,R4
   \   0000002E   0x1B18             SUBS     R0,R3,R4
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD105             BNE      ??strcasecmp_1
     73                      break;
     74                  if ((c1 == 0) || (c2 == 0))
   \                     ??strcasecmp_4:
   \   00000034   0xB2DB             UXTB     R3,R3
   \   00000036   0x2B00             CMP      R3,#+0
   \   00000038   0xD002             BEQ      ??strcasecmp_5
   \   0000003A   0xB2E4             UXTB     R4,R4
   \   0000003C   0x2C00             CMP      R4,#+0
   \   0000003E   0xD1E2             BNE      ??strcasecmp_0
     75                      break;
     76              }
     77              return result;
   \                     ??strcasecmp_5:
   \                     ??strcasecmp_1:
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
     78          }
     79          
     80          
     81          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     82          int
     83          strncasecmp (const char *s1, const char *s2, int n)
     84          {
   \                     strncasecmp:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0003             MOVS     R3,R0
     85              char    c1, c2;
     86              int     k = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     87              int     result = 0;
   \   00000006   0x2000             MOVS     R0,#+0
     88          
     89              while ( k++ < n )
   \                     ??strncasecmp_0:
   \   00000008   0x0025             MOVS     R5,R4
   \   0000000A   0x002C             MOVS     R4,R5
   \   0000000C   0x1C64             ADDS     R4,R4,#+1
   \   0000000E   0x4295             CMP      R5,R2
   \   00000010   0xDA1A             BGE      ??strncasecmp_1
     90              {
     91                  c1 = *s1++;
   \   00000012   0x781D             LDRB     R5,[R3, #+0]
   \   00000014   0x1C5B             ADDS     R3,R3,#+1
     92                  c2 = *s2++;
   \   00000016   0x780E             LDRB     R6,[R1, #+0]
   \   00000018   0x1C49             ADDS     R1,R1,#+1
     93                  if ((c1 >= 'a') && (c1 <= 'z'))
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0x3861             SUBS     R0,R0,#+97
   \   0000001E   0xB2C0             UXTB     R0,R0
   \   00000020   0x281A             CMP      R0,#+26
   \   00000022   0xD200             BCS      ??strncasecmp_2
     94                      c1 = (char)(c1 - ' ');
   \   00000024   0x3D20             SUBS     R5,R5,#+32
     95                  if ((c2 >= 'a') && (c2 <= 'z'))
   \                     ??strncasecmp_2:
   \   00000026   0x0030             MOVS     R0,R6
   \   00000028   0x3861             SUBS     R0,R0,#+97
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0x281A             CMP      R0,#+26
   \   0000002E   0xD200             BCS      ??strncasecmp_3
     96                      c2 = (char)(c2 - ' ');
   \   00000030   0x3E20             SUBS     R6,R6,#+32
     97                  if ((result = (c1 - c2)) != 0)
   \                     ??strncasecmp_3:
   \   00000032   0xB2ED             UXTB     R5,R5
   \   00000034   0xB2F6             UXTB     R6,R6
   \   00000036   0x1BA8             SUBS     R0,R5,R6
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD105             BNE      ??strncasecmp_1
     98                      break;
     99                  if ((c1 == 0) || (c2 == 0))
   \                     ??strncasecmp_4:
   \   0000003C   0xB2ED             UXTB     R5,R5
   \   0000003E   0x2D00             CMP      R5,#+0
   \   00000040   0xD002             BEQ      ??strncasecmp_5
   \   00000042   0xB2F6             UXTB     R6,R6
   \   00000044   0x2E00             CMP      R6,#+0
   \   00000046   0xD1DF             BNE      ??strncasecmp_0
    100                      break;
    101              }
    102              return result;
   \                     ??strncasecmp_5:
   \                     ??strncasecmp_1:
   \   00000048   0xBD70             POP      {R4-R6,PC}       ;; return
    103          }
    104          
    105          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    106          uint32
    107          strtoul (char *str, char **ptr, int base)
    108          {
   \                     strtoul:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0014             MOVS     R4,R2
    109              unsigned long rvalue;
    110              int c, err, neg;
    111              char *endp;
    112              char *startp;
    113          
    114              rvalue = 0;  err = 0;  neg = 0;
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9002             STR      R0,[SP, #+8]
    115          
    116              /* Check for invalid arguments */
    117              if ((str == NULL) || (base < 0) || (base == 1) || (base > 36))
   \   00000012   0x9804             LDR      R0,[SP, #+16]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD005             BEQ      ??strtoul_0
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD403             BMI      ??strtoul_0
   \   0000001C   0x2C01             CMP      R4,#+1
   \   0000001E   0xD001             BEQ      ??strtoul_0
   \   00000020   0x2C25             CMP      R4,#+37
   \   00000022   0xDB05             BLT      ??strtoul_1
    118              {
    119                  if (ptr != NULL)
   \                     ??strtoul_0:
   \   00000024   0x2F00             CMP      R7,#+0
   \   00000026   0xD001             BEQ      ??strtoul_2
    120                  {
    121                      *ptr = str;
   \   00000028   0x9804             LDR      R0,[SP, #+16]
   \   0000002A   0x6038             STR      R0,[R7, #+0]
    122                  }
    123                  return 0;
   \                     ??strtoul_2:
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xE05A             B        ??strtoul_3
    124              }
    125          
    126              /* Skip leading white spaces */
    127              for (startp = str; isspace(*startp); ++startp)
   \                     ??strtoul_1:
   \   00000030   0x9E04             LDR      R6,[SP, #+16]
   \   00000032   0xE000             B        ??strtoul_4
   \                     ??strtoul_5:
   \   00000034   0x1C76             ADDS     R6,R6,#+1
   \                     ??strtoul_4:
   \   00000036   0x7830             LDRB     R0,[R6, #+0]
   \   00000038   0x.... 0x....      BL       isspace
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD1F9             BNE      ??strtoul_5
    128                  ;
    129          
    130              /* Check for notations */
    131              switch (startp[0])
   \   00000040   0x7830             LDRB     R0,[R6, #+0]
   \   00000042   0x282D             CMP      R0,#+45
   \   00000044   0xD00E             BEQ      ??strtoul_6
   \   00000046   0x2830             CMP      R0,#+48
   \   00000048   0xD110             BNE      ??strtoul_7
    132              {
    133                  case '0':
    134                      if ((startp[1] == 'x') || (startp[1] == 'X'))
   \                     ??strtoul_8:
   \   0000004A   0x7870             LDRB     R0,[R6, #+1]
   \   0000004C   0x2878             CMP      R0,#+120
   \   0000004E   0xD002             BEQ      ??strtoul_9
   \   00000050   0x7870             LDRB     R0,[R6, #+1]
   \   00000052   0x2858             CMP      R0,#+88
   \   00000054   0xD105             BNE      ??strtoul_10
    135                      {
    136                          if ((base == 0) || (base == 16))
   \                     ??strtoul_9:
   \   00000056   0x2C00             CMP      R4,#+0
   \   00000058   0xD001             BEQ      ??strtoul_11
   \   0000005A   0x2C10             CMP      R4,#+16
   \   0000005C   0xD101             BNE      ??strtoul_10
    137                          {
    138                              base = 16;
   \                     ??strtoul_11:
   \   0000005E   0x2410             MOVS     R4,#+16
    139                              startp = &startp[2];
   \   00000060   0x1CB6             ADDS     R6,R6,#+2
    140                          }
    141                      }
    142                      break;
   \                     ??strtoul_10:
   \   00000062   0xE003             B        ??strtoul_12
    143                  case '-':
    144                      neg = 1;
   \                     ??strtoul_6:
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x9002             STR      R0,[SP, #+8]
    145                      startp = &startp[1];
   \   00000068   0x1C76             ADDS     R6,R6,#+1
    146                      break;
   \   0000006A   0xE7FF             B        ??strtoul_12
    147                  default:
    148                      break;
    149              }
    150          
    151              if (base == 0)
   \                     ??strtoul_7:
   \                     ??strtoul_12:
   \   0000006C   0x2C00             CMP      R4,#+0
   \   0000006E   0xD100             BNE      ??strtoul_13
    152                  base = 10;
   \   00000070   0x240A             MOVS     R4,#+10
    153          
    154              /* Check for invalid chars in str */
    155              for ( endp = startp; (c = *endp) != '\0'; ++endp)
   \                     ??strtoul_13:
   \   00000072   0x9600             STR      R6,[SP, #+0]
   \   00000074   0xE004             B        ??strtoul_14
    156              {
    157                  /* Check for 0..9,Aa-Zz */
    158                  if (!isalnum(c))
    159                  {
    160                      err = 1;
    161                      break;
    162                  }
    163          
    164                  /* Convert char to num in 0..36 */
    165                  if (isdigit(c))
    166                  {
    167                      c = c - '0';
    168                  }
    169                  else
    170                  {
    171                      if (isupper(c))
    172                      {
    173                          c = c - 'A' + 10;
    174                      }
    175                      else
    176                      {
    177                          c = c - 'a' + 10;
    178                      }
    179                  }
    180          
    181                  /* check c against base */
    182                  if (c >= base)
    183                  {
    184                      err = 1;
    185                      break;
    186                  }
    187          
    188                  if (neg)
    189                  {
    190                      rvalue = (rvalue * base) - c;
    191                  }
    192                  else
    193                  {
    194                      rvalue = (rvalue * base) + c;
   \                     ??strtoul_15:
   \   00000076   0x4365             MULS     R5,R4,R5
   \   00000078   0x19AD             ADDS     R5,R5,R6
    195                  }
   \                     ??strtoul_16:
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0x9000             STR      R0,[SP, #+0]
   \                     ??strtoul_14:
   \   00000080   0x9800             LDR      R0,[SP, #+0]
   \   00000082   0x7806             LDRB     R6,[R0, #+0]
   \   00000084   0x2E00             CMP      R6,#+0
   \   00000086   0xD006             BEQ      ??strtoul_17
   \   00000088   0x0030             MOVS     R0,R6
   \   0000008A   0x.... 0x....      BL       isalnum
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD10E             BNE      ??strtoul_18
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x9001             STR      R0,[SP, #+4]
    196              }
    197          
    198              /* Upon exit, endp points to the character at which valid info */
    199              /* STOPS.  No chars including and beyond endp are used.        */
    200          
    201              if (ptr != NULL)
   \                     ??strtoul_17:
   \   00000096   0x2F00             CMP      R7,#+0
   \   00000098   0xD001             BEQ      ??strtoul_19
    202                  *ptr = endp;
   \   0000009A   0x9800             LDR      R0,[SP, #+0]
   \   0000009C   0x6038             STR      R0,[R7, #+0]
    203          
    204              if (err)
   \                     ??strtoul_19:
   \   0000009E   0x9801             LDR      R0,[SP, #+4]
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD01F             BEQ      ??strtoul_20
    205              {
    206                  if (ptr != NULL)
   \   000000A4   0x2F00             CMP      R7,#+0
   \   000000A6   0xD001             BEQ      ??strtoul_21
    207                      *ptr = str;
   \   000000A8   0x9804             LDR      R0,[SP, #+16]
   \   000000AA   0x6038             STR      R0,[R7, #+0]
    208                  
    209                  return 0;
   \                     ??strtoul_21:
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xE01A             B        ??strtoul_3
    210              }
   \                     ??strtoul_18:
   \   000000B0   0x0030             MOVS     R0,R6
   \   000000B2   0x.... 0x....      BL       isdigit
   \   000000B6   0x2800             CMP      R0,#+0
   \   000000B8   0xD001             BEQ      ??strtoul_22
   \   000000BA   0x3E30             SUBS     R6,R6,#+48
   \   000000BC   0xE007             B        ??strtoul_23
   \                     ??strtoul_22:
   \   000000BE   0x0030             MOVS     R0,R6
   \   000000C0   0x.... 0x....      BL       isupper
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD001             BEQ      ??strtoul_24
   \   000000C8   0x3E37             SUBS     R6,R6,#+55
   \   000000CA   0xE000             B        ??strtoul_23
   \                     ??strtoul_24:
   \   000000CC   0x3E57             SUBS     R6,R6,#+87
   \                     ??strtoul_23:
   \   000000CE   0x42A6             CMP      R6,R4
   \   000000D0   0xDB02             BLT      ??strtoul_25
   \   000000D2   0x2001             MOVS     R0,#+1
   \   000000D4   0x9001             STR      R0,[SP, #+4]
   \   000000D6   0xE7DE             B        ??strtoul_17
   \                     ??strtoul_25:
   \   000000D8   0x9802             LDR      R0,[SP, #+8]
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD0CB             BEQ      ??strtoul_15
   \   000000DE   0x4365             MULS     R5,R4,R5
   \   000000E0   0x1BAD             SUBS     R5,R5,R6
   \   000000E2   0xE7CA             B        ??strtoul_16
    211              else
    212              {
    213                  return rvalue;
   \                     ??strtoul_20:
   \   000000E4   0x0028             MOVS     R0,R5
   \                     ??strtoul_3:
   \   000000E6   0xB005             ADD      SP,SP,#+20
   \   000000E8   0xBDF0             POP      {R4-R7,PC}       ;; return
    214              }
    215          }
    216          
    217          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    218          int
    219          strlen (const char *str)
    220          {
   \                     strlen:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0001             MOVS     R1,R0
    221              char *s = (char *)str;
    222              int len = 0;
   \   00000004   0x2000             MOVS     R0,#+0
    223          
    224              if (s == NULL)
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD102             BNE      ??strlen_0
    225                  return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE006             B        ??strlen_1
    226          
    227              while (*s++ != '\0')
    228                  ++len;
   \                     ??strlen_2:
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??strlen_0:
   \   00000010   0x000A             MOVS     R2,R1
   \   00000012   0x0011             MOVS     R1,R2
   \   00000014   0x1C49             ADDS     R1,R1,#+1
   \   00000016   0x7812             LDRB     R2,[R2, #+0]
   \   00000018   0x2A00             CMP      R2,#+0
   \   0000001A   0xD1F8             BNE      ??strlen_2
    229          
    230              return len;
   \                     ??strlen_1:
   \   0000001C   0xBD00             POP      {PC}             ;; return
    231          }
    232          
    233          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    234          char *
    235          strcat (char *dest, const char *src)
    236          {
   \                     strcat:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    237              char *dp;
    238              char *sp = (char *)src;
   \   00000004   0x000D             MOVS     R5,R1
    239          
    240              if ((dest != NULL) && (src != NULL))
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD00F             BEQ      ??strcat_0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD00D             BEQ      ??strcat_0
    241              {
    242                  dp = &dest[strlen(dest)];
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0x1820             ADDS     R0,R4,R0
   \   00000016   0xE003             B        ??strcat_1
    243          
    244                  while (*sp != '\0')
    245                  {
    246                      *dp++ = *sp++;
   \                     ??strcat_2:
   \   00000018   0x7829             LDRB     R1,[R5, #+0]
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
    247                  }
   \                     ??strcat_1:
   \   00000020   0x7829             LDRB     R1,[R5, #+0]
   \   00000022   0x2900             CMP      R1,#+0
   \   00000024   0xD1F8             BNE      ??strcat_2
    248                  *dp = '\0';
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x7001             STRB     R1,[R0, #+0]
    249              }
    250              return dest;
   \                     ??strcat_0:
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    251          }
    252          
    253          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    254          char *
    255          strncat (char *dest, const char *src, int n)
    256          {
   \                     strncat:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    257              char *dp;
    258              char *sp = (char *)src;
   \   00000006   0x000E             MOVS     R6,R1
    259          
    260              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD015             BEQ      ??strncat_0
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD013             BEQ      ??strncat_0
   \   00000010   0x2D01             CMP      R5,#+1
   \   00000012   0xDB11             BLT      ??strncat_0
    261              {
    262                  dp = &dest[strlen(dest)];
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       strlen
   \   0000001A   0x1820             ADDS     R0,R4,R0
   \   0000001C   0xE003             B        ??strncat_1
    263          
    264                  while ((*sp != '\0') && (n-- > 0))
    265                  {
    266                      *dp++ = *sp++;
   \                     ??strncat_2:
   \   0000001E   0x7831             LDRB     R1,[R6, #+0]
   \   00000020   0x7001             STRB     R1,[R0, #+0]
   \   00000022   0x1C76             ADDS     R6,R6,#+1
   \   00000024   0x1C40             ADDS     R0,R0,#+1
    267                  }
   \                     ??strncat_1:
   \   00000026   0x7831             LDRB     R1,[R6, #+0]
   \   00000028   0x2900             CMP      R1,#+0
   \   0000002A   0xD003             BEQ      ??strncat_3
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x1E4D             SUBS     R5,R1,#+1
   \   00000030   0x2901             CMP      R1,#+1
   \   00000032   0xDAF4             BGE      ??strncat_2
    268                  *dp = '\0';
   \                     ??strncat_3:
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x7001             STRB     R1,[R0, #+0]
    269              }
    270              return dest;
   \                     ??strncat_0:
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
    271          }
    272          
    273          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    274          char *
    275          strcpy (char *dest, const char *src)
    276          {
   \                     strcpy:
   \   00000000   0xB500             PUSH     {LR}
    277              char *dp = (char *)dest;
   \   00000002   0x0002             MOVS     R2,R0
    278              char *sp = (char *)src;
   \   00000004   0x000B             MOVS     R3,R1
    279          
    280              if ((dest != NULL) && (src != NULL))
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD00B             BEQ      ??strcpy_0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD009             BEQ      ??strcpy_0
   \   0000000E   0xE003             B        ??strcpy_1
    281              {
    282                  while (*sp != '\0')
    283                  {
    284                      *dp++ = *sp++;
   \                     ??strcpy_2:
   \   00000010   0x7819             LDRB     R1,[R3, #+0]
   \   00000012   0x7011             STRB     R1,[R2, #+0]
   \   00000014   0x1C5B             ADDS     R3,R3,#+1
   \   00000016   0x1C52             ADDS     R2,R2,#+1
    285                  }
   \                     ??strcpy_1:
   \   00000018   0x7819             LDRB     R1,[R3, #+0]
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD1F8             BNE      ??strcpy_2
    286                  *dp = '\0';
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x7011             STRB     R1,[R2, #+0]
    287              }
    288              return dest;
   \                     ??strcpy_0:
   \   00000022   0xBD00             POP      {PC}             ;; return
    289          }
    290          
    291          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    292          char *
    293          strncpy (char *dest, const char *src, int n)
    294          {
   \                     strncpy:
   \   00000000   0xB510             PUSH     {R4,LR}
    295              char *dp = (char *)dest;
   \   00000002   0x0003             MOVS     R3,R0
    296              char *sp = (char *)src;
   \   00000004   0x000C             MOVS     R4,R1
    297          
    298              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD011             BEQ      ??strncpy_0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD00F             BEQ      ??strncpy_0
   \   0000000E   0x2A01             CMP      R2,#+1
   \   00000010   0xDB0D             BLT      ??strncpy_0
   \   00000012   0xE003             B        ??strncpy_1
    299              {
    300                  while ((*sp != '\0') && (n-- > 0))
    301                  {
    302                      *dp++ = *sp++;
   \                     ??strncpy_2:
   \   00000014   0x7821             LDRB     R1,[R4, #+0]
   \   00000016   0x7019             STRB     R1,[R3, #+0]
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \   0000001A   0x1C5B             ADDS     R3,R3,#+1
    303                  }
   \                     ??strncpy_1:
   \   0000001C   0x7821             LDRB     R1,[R4, #+0]
   \   0000001E   0x2900             CMP      R1,#+0
   \   00000020   0xD003             BEQ      ??strncpy_3
   \   00000022   0x0011             MOVS     R1,R2
   \   00000024   0x1E4A             SUBS     R2,R1,#+1
   \   00000026   0x2901             CMP      R1,#+1
   \   00000028   0xDAF4             BGE      ??strncpy_2
    304                  *dp = '\0';
   \                     ??strncpy_3:
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x7019             STRB     R1,[R3, #+0]
    305              }
    306              return dest;
   \                     ??strncpy_0:
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    307          }
    308          
    309          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    310          int
    311          strcmp (const char *s1, const char *s2)
    312          {
   \                     strcmp:
   \   00000000   0xB500             PUSH     {LR}
    313              /* No checks for NULL */
    314              char *s1p = (char *)s1;
    315              char *s2p = (char *)s2;
   \   00000002   0xE001             B        ??strcmp_0
    316          
    317              while (*s2p != '\0')
    318              {
    319                  if (*s1p != *s2p)
    320                      break;
    321          
    322                  ++s1p;
   \                     ??strcmp_1:
   \   00000004   0x1C40             ADDS     R0,R0,#+1
    323                  ++s2p;
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??strcmp_0:
   \   00000008   0x780A             LDRB     R2,[R1, #+0]
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD003             BEQ      ??strcmp_2
   \   0000000E   0x7802             LDRB     R2,[R0, #+0]
   \   00000010   0x780B             LDRB     R3,[R1, #+0]
   \   00000012   0x429A             CMP      R2,R3
   \   00000014   0xD0F6             BEQ      ??strcmp_1
    324              }
    325              return (*s1p - *s2p);
   \                     ??strcmp_2:
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x7809             LDRB     R1,[R1, #+0]
   \   0000001A   0x1A40             SUBS     R0,R0,R1
   \   0000001C   0xBD00             POP      {PC}             ;; return
    326          }
    327          
    328          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    329          int
    330          strncmp (const char *s1, const char *s2, int n)
    331          {
   \                     strncmp:
   \   00000000   0xB510             PUSH     {R4,LR}
    332              /* No checks for NULL */
    333              char *s1p = (char *)s1;
    334              char *s2p = (char *)s2;
    335          
    336              if (n <= 0)
   \   00000002   0x2A01             CMP      R2,#+1
   \   00000004   0xDA03             BGE      ??strncmp_0
    337                  return 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE00E             B        ??strncmp_1
    338          
    339              while (*s2p != '\0')
    340              {
    341                  if (*s1p != *s2p)
    342                      break;
    343          
    344                  if (--n == 0)
    345                      break;
    346          
    347                  ++s1p;
   \                     ??strncmp_2:
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
    348                  ++s2p;
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
   \                     ??strncmp_0:
   \   0000000E   0x780B             LDRB     R3,[R1, #+0]
   \   00000010   0x2B00             CMP      R3,#+0
   \   00000012   0xD006             BEQ      ??strncmp_3
   \   00000014   0x7803             LDRB     R3,[R0, #+0]
   \   00000016   0x780C             LDRB     R4,[R1, #+0]
   \   00000018   0x42A3             CMP      R3,R4
   \   0000001A   0xD102             BNE      ??strncmp_3
   \                     ??strncmp_4:
   \   0000001C   0x1E52             SUBS     R2,R2,#+1
   \   0000001E   0x2A00             CMP      R2,#+0
   \   00000020   0xD1F3             BNE      ??strncmp_2
    349              }
    350              return (*s1p - *s2p);
   \                     ??strncmp_3:
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x7809             LDRB     R1,[R1, #+0]
   \   00000026   0x1A40             SUBS     R0,R0,R1
   \                     ??strncmp_1:
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    351          }
    352          
    353          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    354          void *
    355          memcpy (void *dest, const void *src, unsigned n)
    356          {
   \                     memcpy:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    357              int longs, bytes;
    358              uint32 *dpl = (uint32 *)dest;
   \   00000002   0x0003             MOVS     R3,R0
    359              uint32 *spl = (uint32 *)src;
   \   00000004   0x000C             MOVS     R4,R1
    360              uint8  *dpb, *spb;
    361          
    362              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD019             BEQ      ??memcpy_0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD017             BEQ      ??memcpy_0
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD015             BEQ      ??memcpy_0
    363              {
    364                  bytes = (n & 0x3);
   \   00000012   0x0791             LSLS     R1,R2,#+30       ;; ZeroExtS R1,R2,#+30,#+30
   \   00000014   0x0F89             LSRS     R1,R1,#+30
    365                  longs = (n - bytes) >> 2;
   \   00000016   0x1A52             SUBS     R2,R2,R1
   \   00000018   0x0892             LSRS     R2,R2,#+2
   \   0000001A   0xE003             B        ??memcpy_1
    366              
    367                  while (longs--)
    368                      *dpl++ = *spl++;
   \                     ??memcpy_2:
   \   0000001C   0x6825             LDR      R5,[R4, #+0]
   \   0000001E   0x601D             STR      R5,[R3, #+0]
   \   00000020   0x1D24             ADDS     R4,R4,#+4
   \   00000022   0x1D1B             ADDS     R3,R3,#+4
   \                     ??memcpy_1:
   \   00000024   0x0015             MOVS     R5,R2
   \   00000026   0x1E6A             SUBS     R2,R5,#+1
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD1F7             BNE      ??memcpy_2
    369                  
    370                  dpb = (uint8 *)dpl;
    371                  spb = (uint8 *)spl;
   \   0000002C   0xE003             B        ??memcpy_3
    372                  
    373                  while (bytes--)
    374                      *dpb++ = *spb++;
   \                     ??memcpy_4:
   \   0000002E   0x7822             LDRB     R2,[R4, #+0]
   \   00000030   0x701A             STRB     R2,[R3, #+0]
   \   00000032   0x1C64             ADDS     R4,R4,#+1
   \   00000034   0x1C5B             ADDS     R3,R3,#+1
   \                     ??memcpy_3:
   \   00000036   0x000A             MOVS     R2,R1
   \   00000038   0x1E51             SUBS     R1,R2,#+1
   \   0000003A   0x2A00             CMP      R2,#+0
   \   0000003C   0xD1F7             BNE      ??memcpy_4
    375              }
    376              return dest;
   \                     ??memcpy_0:
   \   0000003E   0xBD30             POP      {R4,R5,PC}       ;; return
    377          }
    378          
    379          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    380          void *
    381          memset (void *s, int c, unsigned n)
    382          {
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
    383              /* Not optimized, but very portable */
    384              unsigned char *sp = (unsigned char *)s;
   \   00000002   0x0003             MOVS     R3,R0
    385          
    386              if ((s != NULL) && (n > 0))
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD009             BEQ      ??memset_0
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD103             BNE      ??memset_1
   \   0000000C   0xE006             B        ??memset_0
    387              {
    388                  while (n--)
    389                  {
    390                      *sp++ = (unsigned char)c;
   \                     ??memset_2:
   \   0000000E   0x000C             MOVS     R4,R1
   \   00000010   0x701C             STRB     R4,[R3, #+0]
   \   00000012   0x1C5B             ADDS     R3,R3,#+1
    391                  }
   \                     ??memset_1:
   \   00000014   0x0014             MOVS     R4,R2
   \   00000016   0x1E62             SUBS     R2,R4,#+1
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD1F8             BNE      ??memset_2
    392              }
    393              return s;
   \                     ??memset_0:
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    394          }
    395          
    396          /****************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        4  isalnum
        4  isdigit
        4  isspace
        4  isupper
       12  memcpy
        8  memset
        8  strcasecmp
       16  strcat
             16 -> strlen
        4  strcmp
        4  strcpy
        4  strlen
       16  strncasecmp
       16  strncat
             16 -> strlen
        8  strncmp
        8  strncpy
       40  strtoul
             40 -> isalnum
             40 -> isdigit
             40 -> isspace
             40 -> isupper


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  isalnum
      16  isdigit
      18  isspace
      16  isupper
      64  memcpy
      30  memset
      66  strcasecmp
      46  strcat
      30  strcmp
      36  strcpy
      30  strlen
      74  strncasecmp
      60  strncat
      42  strncmp
      48  strncpy
     234  strtoul

 
 842 bytes in section .text
 
 842 bytes of CODE memory

Errors: none
Warnings: none
