###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.3.54009/W32 for ARM     18/Feb/2013  16:57:31 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\drivers\rtc\rtc.c                           #
#    Command line =  "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\drivers\rtc\rtc.c" -D IAR -D FRDM -D EX2    #
#                    -lCN "D:\Profiles\B38350\My Documents\App                #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -lB "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -o "D:\Profiles\B38350\My Documents\App              #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \" --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0+ -e --fpu=None           #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    rojects\DualChannel_Experiment\" -I                      #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    ommon\" -I "D:\Profiles\B38350\My Documents\App          #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\" -I "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\headers\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\llwu\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\adc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\lptmr\" -I "D:\Profiles\B38350\My Documents\App   #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\mcg\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\pmc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rcm\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rtc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\smc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\wdog\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    latforms\" -I "D:\Profiles\B38350\My Documents\App       #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\rtc.lst                                                #
#    Object file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \rtc.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B38350\My Documents\App Notes\Kinetis\L Series\CMP pin sampling\Example Projects\src\drivers\rtc\rtc.c
      1          /*
      2           * File:        rtc.c
      3           * Purpose:     Provide common RTC routines
      4           *
      5           * Notes:       
      6           *              
      7           */
      8          
      9          
     10          #include "common.h"
     11          #include "rtc.h"
     12          #include "arm_cm0.h"
     13          
     14          /********************************************************************/
     15          /*
     16           * Initialize the RTC
     17           *
     18           *
     19           * Parameters:
     20           *  seconds         Start value of seconds register
     21           *  alarm           Time in seconds of first alarm. Set to 0xFFFFFFFF to effectively disable alarm
     22           *  c_interval      Interval at which to apply time compensation can range from 1 second (0x0) to 256 (0xFF)
     23           *  c_value         Compensation value ranges from -127 32kHz cycles to +128 32 kHz cycles
     24           *                  80h Time prescaler register overflows every 32896 clock cycles.
     25           *                  FFh Time prescaler register overflows every 32769 clock cycles.
     26           *                  00h Time prescaler register overflows every 32768 clock cycles.
     27           *                  01h Time prescaler register overflows every 32767 clock cycles.
     28           *                  7Fh Time prescaler register overflows every 32641 clock cycles.
     29           *  interrupt       TRUE or FALSE
     30           */
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void rtc_init(uint32 seconds, uint32 alarm, uint8 c_interval, uint8 c_value, uint8 interrupt) 
     33          {
   \                     rtc_init:
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001E             MOVS     R6,R3
     34            int i;  
     35            /*enable the clock to SRTC module register space*/
     36            SIM_SCGC6 |= SIM_SCGC6_RTC_MASK;
   \   00000008   0x....             LDR      R0,??DataTable4  ;; 0x4004803c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2180             MOVS     R1,#+128
   \   0000000E   0x0589             LSLS     R1,R1,#+22       ;; #+536870912
   \   00000010   0x4301             ORRS     R1,R1,R0
   \   00000012   0x....             LDR      R0,??DataTable4  ;; 0x4004803c
   \   00000014   0x6001             STR      R1,[R0, #+0]
     37           
     38            SIM_SOPT1 = SIM_SOPT1_OSC32KSEL(0);
   \   00000016   0x....             LDR      R0,??DataTable4_1  ;; 0x40047000
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6001             STR      R1,[R0, #+0]
   \   0000001C   0x9C06             LDR      R4,[SP, #+24]
     39          
     40            /*Only VBAT_POR has an effect on the SRTC, RESET to the part does not, so you must manually reset the SRTC to make sure everything is in a known state*/
     41            /*clear the software reset bit*/
     42            //  printf("Generating SoftWare reset to SRTC\n");
     43              disable_irq(interrupt);
   \   0000001E   0xB2E4             UXTB     R4,R4
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       disable_irq
     44              disable_irq(interrupt+1);
   \   00000026   0xB2E4             UXTB     R4,R4
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0x.... 0x....      BL       disable_irq
     45              RTC_CR  = RTC_CR_SWR_MASK;
   \   00000030   0x....             LDR      R0,??DataTable4_2  ;; 0x4003d010
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x6001             STR      R1,[R0, #+0]
     46              RTC_CR  &= ~RTC_CR_SWR_MASK;  
   \   00000036   0x....             LDR      R0,??DataTable4_2  ;; 0x4003d010
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x4388             BICS     R0,R0,R1
   \   0000003E   0x....             LDR      R1,??DataTable4_2  ;; 0x4003d010
   \   00000040   0x6008             STR      R0,[R1, #+0]
     47              if (RTC_SR & RTC_SR_TIF_MASK){
   \   00000042   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x07C0             LSLS     R0,R0,#+31
   \   00000048   0xD502             BPL      ??rtc_init_0
     48                  RTC_TSR = 0x00000000;   //  this action clears the TIF
   \   0000004A   0x....             LDR      R0,??DataTable4_4  ;; 0x4003d000
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x6001             STR      R1,[R0, #+0]
     49                 // printf("RTC Invalid flag was set - Write to TSR done to clears RTC_SR =  %#02X \n",  (RTC_SR) )  ;
     50              }
     51            /*Set time compensation parameters*/
     52            RTC_TCR = RTC_TCR_CIR(c_interval) | RTC_TCR_TCR(c_value);
   \                     ??rtc_init_0:
   \   00000050   0xB2ED             UXTB     R5,R5
   \   00000052   0x0228             LSLS     R0,R5,#+8
   \   00000054   0xB2F6             UXTB     R6,R6
   \   00000056   0x4306             ORRS     R6,R6,R0
   \   00000058   0x....             LDR      R0,??DataTable4_5  ;; 0x4003d00c
   \   0000005A   0x6006             STR      R6,[R0, #+0]
     53            
     54            /*Enable the counter*/
     55            if (seconds >0) {
   \   0000005C   0x2F00             CMP      R7,#+0
   \   0000005E   0xD016             BEQ      ??rtc_init_1
     56               /*Enable the interrupt*/
     57               if(interrupt >1){
   \   00000060   0xB2E4             UXTB     R4,R4
   \   00000062   0x2C02             CMP      R4,#+2
   \   00000064   0xD304             BCC      ??rtc_init_2
     58                  enable_irq(interrupt+1);
   \   00000066   0xB2E4             UXTB     R4,R4
   \   00000068   0x0020             MOVS     R0,R4
   \   0000006A   0x1C40             ADDS     R0,R0,#+1
   \   0000006C   0x.... 0x....      BL       enable_irq
     59               }
     60             
     61              RTC_IER |= RTC_IER_TSIE_MASK;
   \                     ??rtc_init_2:
   \   00000070   0x....             LDR      R0,??DataTable4_6  ;; 0x4003d01c
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x2110             MOVS     R1,#+16
   \   00000076   0x4301             ORRS     R1,R1,R0
   \   00000078   0x....             LDR      R0,??DataTable4_6  ;; 0x4003d01c
   \   0000007A   0x6001             STR      R1,[R0, #+0]
     62              RTC_SR |= RTC_SR_TCE_MASK;
   \   0000007C   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x2110             MOVS     R1,#+16
   \   00000082   0x4301             ORRS     R1,R1,R0
   \   00000084   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   00000086   0x6001             STR      R1,[R0, #+0]
     63              /*Configure the timer seconds and alarm registers*/
     64              RTC_TSR = seconds;
   \   00000088   0x....             LDR      R0,??DataTable4_4  ;; 0x4003d000
   \   0000008A   0x6007             STR      R7,[R0, #+0]
   \   0000008C   0xE005             B        ??rtc_init_3
     65          
     66            } else {
     67              RTC_IER &= ~RTC_IER_TSIE_MASK;
   \                     ??rtc_init_1:
   \   0000008E   0x....             LDR      R0,??DataTable4_6  ;; 0x4003d01c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x2110             MOVS     R1,#+16
   \   00000094   0x4388             BICS     R0,R0,R1
   \   00000096   0x....             LDR      R1,??DataTable4_6  ;; 0x4003d01c
   \   00000098   0x6008             STR      R0,[R1, #+0]
     68            }
     69            if (alarm >0) {
   \                     ??rtc_init_3:
   \   0000009A   0x9800             LDR      R0,[SP, #+0]
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD016             BEQ      ??rtc_init_4
     70              RTC_IER |= RTC_IER_TAIE_MASK;
   \   000000A0   0x....             LDR      R0,??DataTable4_6  ;; 0x4003d01c
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0x2104             MOVS     R1,#+4
   \   000000A6   0x4301             ORRS     R1,R1,R0
   \   000000A8   0x....             LDR      R0,??DataTable4_6  ;; 0x4003d01c
   \   000000AA   0x6001             STR      R1,[R0, #+0]
     71              RTC_SR |= RTC_SR_TCE_MASK;
   \   000000AC   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0x2110             MOVS     R1,#+16
   \   000000B2   0x4301             ORRS     R1,R1,R0
   \   000000B4   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   000000B6   0x6001             STR      R1,[R0, #+0]
     72              /*Configure the timer seconds and alarm registers*/
     73              RTC_TAR = alarm;
   \   000000B8   0x....             LDR      R0,??DataTable4_7  ;; 0x4003d008
   \   000000BA   0x9900             LDR      R1,[SP, #+0]
   \   000000BC   0x6001             STR      R1,[R0, #+0]
     74               /*Enable the interrupt*/
     75               if(interrupt >1){
   \   000000BE   0xB2E4             UXTB     R4,R4
   \   000000C0   0x2C02             CMP      R4,#+2
   \   000000C2   0xD30A             BCC      ??rtc_init_5
     76                  enable_irq(interrupt);
   \   000000C4   0xB2E4             UXTB     R4,R4
   \   000000C6   0x0020             MOVS     R0,R4
   \   000000C8   0x.... 0x....      BL       enable_irq
   \   000000CC   0xE005             B        ??rtc_init_5
     77               }
     78             
     79            } else {
     80              RTC_IER &= ~RTC_IER_TAIE_MASK;
   \                     ??rtc_init_4:
   \   000000CE   0x....             LDR      R0,??DataTable4_6  ;; 0x4003d01c
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x2104             MOVS     R1,#+4
   \   000000D4   0x4388             BICS     R0,R0,R1
   \   000000D6   0x....             LDR      R1,??DataTable4_6  ;; 0x4003d01c
   \   000000D8   0x6008             STR      R0,[R1, #+0]
     81            }
     82            
     83            /*Enable the oscillator*/
     84            RTC_CR |= RTC_CR_OSCE_MASK|RTC_CR_SC16P_MASK;
   \                     ??rtc_init_5:
   \   000000DA   0x....             LDR      R0,??DataTable4_2  ;; 0x4003d010
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0x21A0             MOVS     R1,#+160
   \   000000E0   0x00C9             LSLS     R1,R1,#+3        ;; #+1280
   \   000000E2   0x4301             ORRS     R1,R1,R0
   \   000000E4   0x....             LDR      R0,??DataTable4_2  ;; 0x4003d010
   \   000000E6   0x6001             STR      R1,[R0, #+0]
     85          
     86            /*Wait to all the 32 kHz to stabilize, refer to the crystal startup time in the crystal datasheet*/
     87            for(i=0;i<0x600000;i++);
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0xE000             B        ??rtc_init_6
   \                     ??rtc_init_7:
   \   000000EC   0x1C40             ADDS     R0,R0,#+1
   \                     ??rtc_init_6:
   \   000000EE   0x21C0             MOVS     R1,#+192
   \   000000F0   0x03C9             LSLS     R1,R1,#+15       ;; #+6291456
   \   000000F2   0x4288             CMP      R0,R1
   \   000000F4   0xDBFA             BLT      ??rtc_init_7
     88            RTC_SR |= RTC_SR_TCE_MASK;
   \   000000F6   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0x2110             MOVS     R1,#+16
   \   000000FC   0x4301             ORRS     R1,R1,R0
   \   000000FE   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   00000100   0x6001             STR      R1,[R0, #+0]
     89            //rtc_reg_report();
     90          }
   \   00000102   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     91          

   \                                 In section .text, align 2, keep-with-next
     92          void rtc_reg_report (void) {
     93          #ifdef DEBUG_PRINT
     94             printf("RTC_TSR    = 0x%02X,    ",    (RTC_TSR)) ;
     95            printf("RTC_TPR    = 0x%02X\n",       (RTC_TPR)) ;
     96            printf("RTC_TAR    = 0x%02X,    ",    (RTC_TAR)) ;
     97            printf("RTC_TCR    = 0x%02X\n",       (RTC_TCR)) ;
     98            printf("RTC_CR     = 0x%02X,    ",    (RTC_CR)) ;
     99            printf("RTC_SR     = 0x%02X\n",       (RTC_SR)) ;
    100            printf("RTC_LR     = 0x%02X,    ",    (RTC_LR)) ;
    101            printf("RTC_IER    = 0x%02X\n",       (RTC_IER)) ;
    102          #endif
    103          }
   \                     rtc_reg_report:
   \   00000000   0x4770             BX       LR               ;; return
    104          

   \                                 In section .bss, align 1
    105          static uint8_t m_bAlarmFlag = 0;
   \                     m_bAlarmFlag:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
    106          void rtc_isr(void) 
    107          {
   \                     rtc_isr:
   \   00000000   0xB500             PUSH     {LR}
    108             if((RTC_SR & RTC_SR_TIF_MASK)== 0x01)
   \   00000002   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD508             BPL      ??rtc_isr_0
    109               {
    110                 //printf("SRTC time invalid interrupt entered...\r\n");
    111             	   RTC_SR &= 0x07;  //clear TCE, or RTC_TSR can  not be written
   \   0000000A   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000010   0x0F40             LSRS     R0,R0,#+29
   \   00000012   0x....             LDR      R1,??DataTable4_3  ;; 0x4003d014
   \   00000014   0x6008             STR      R0,[R1, #+0]
    112             	   RTC_TSR = 0x00000000;  //clear TIF 
   \   00000016   0x....             LDR      R0,??DataTable4_4  ;; 0x4003d000
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    113                     //RTC_IER &= ~RTC_IER_TIIE_MASK;
    114          
    115               }	
    116             if((RTC_SR & RTC_SR_TOF_MASK) == 0x02)
   \                     ??rtc_isr_0:
   \   0000001C   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x0780             LSLS     R0,R0,#+30
   \   00000022   0xD508             BPL      ??rtc_isr_1
    117             {
    118             	   //printf("SRTC time overflow interrupt entered...\r\n");
    119             	   RTC_SR &= 0x07;  //clear TCE, or RTC_TSR can  not be written
   \   00000024   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   0000002A   0x0F40             LSRS     R0,R0,#+29
   \   0000002C   0x....             LDR      R1,??DataTable4_3  ;; 0x4003d014
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    120             	   RTC_TSR = 0x00000000;  //clear TOF
   \   00000030   0x....             LDR      R0,??DataTable4_4  ;; 0x4003d000
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x6001             STR      R1,[R0, #+0]
    121             }	 	
    122             if((RTC_SR & RTC_SR_TAF_MASK) == 0x04)
   \                     ??rtc_isr_1:
   \   00000036   0x....             LDR      R0,??DataTable4_3  ;; 0x4003d014
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x0740             LSLS     R0,R0,#+29
   \   0000003C   0xD507             BPL      ??rtc_isr_2
    123             {
    124                m_bAlarmFlag = 1;
   \   0000003E   0x....             LDR      R0,??DataTable4_8
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x7001             STRB     R1,[R0, #+0]
    125             	  // printf("SRTC alarm interrupt entered...\r");
    126                // printf("Time Seconds Register value is: %i\n", RTC_TSR);
    127             	   RTC_TAR += 3;// Write new alarm value, to generate an alarm every second add 1
   \   00000044   0x....             LDR      R0,??DataTable4_7  ;; 0x4003d008
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x1CC0             ADDS     R0,R0,#+3
   \   0000004A   0x....             LDR      R1,??DataTable4_7  ;; 0x4003d008
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    128             }	
    129              return;
   \                     ??rtc_isr_2:
   \   0000004E   0xBD00             POP      {PC}             ;; return
    130          }
    131          

   \                                 In section .text, align 2, keep-with-next
    132          void rtc_second_isr( void )
    133          {
   \                     rtc_second_isr:
   \   00000000   0xB580             PUSH     {R7,LR}
    134              out_char(0x08);
   \   00000002   0x2008             MOVS     R0,#+8
   \   00000004   0x.... 0x....      BL       out_char
    135              printf("Current Time:");
   \   00000008   0x....             LDR      R0,??DataTable4_9
   \   0000000A   0x.... 0x....      BL       printf
    136          	printf("  %d", RTC_TSR);
   \   0000000E   0x....             LDR      R0,??DataTable4_4  ;; 0x4003d000
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x....             LDR      R0,??DataTable4_10
   \   00000014   0x.... 0x....      BL       printf
    137              if( m_bAlarmFlag )
   \   00000018   0x....             LDR      R0,??DataTable4_8
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD005             BEQ      ??rtc_second_isr_0
    138              {
    139                printf(" *alarm!* ");
   \   00000020   0x....             LDR      R0,??DataTable4_11
   \   00000022   0x.... 0x....      BL       printf
    140                m_bAlarmFlag = 0;
   \   00000026   0x....             LDR      R0,??DataTable4_8
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x7001             STRB     R1,[R0, #+0]
    141              }
    142              else
    143              {
    144          #ifdef DEBUG_PRINT
    145                printf("          ");
    146          #endif
    147              }
    148          #ifdef DEBUG_PRINT
    149              printf("\r");
    150          #endif
    151          }
   \                     ??rtc_second_isr_0:
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
    152          

   \                                 In section .text, align 2, keep-with-next
    153          void rtc_reset( void )
    154          {
   \                     rtc_reset:
   \   00000000   0xB580             PUSH     {R7,LR}
    155              SIM_SCGC6 |= SIM_SCGC6_RTC_MASK;
   \   00000002   0x....             LDR      R0,??DataTable4  ;; 0x4004803c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2180             MOVS     R1,#+128
   \   00000008   0x0589             LSLS     R1,R1,#+22       ;; #+536870912
   \   0000000A   0x4301             ORRS     R1,R1,R0
   \   0000000C   0x....             LDR      R0,??DataTable4  ;; 0x4004803c
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    156          	disable_irq(20);
   \   00000010   0x2014             MOVS     R0,#+20
   \   00000012   0x.... 0x....      BL       disable_irq
    157          	disable_irq(21);
   \   00000016   0x2015             MOVS     R0,#+21
   \   00000018   0x.... 0x....      BL       disable_irq
    158          	RTC_CR  = RTC_CR_SWR_MASK;
   \   0000001C   0x....             LDR      R0,??DataTable4_2  ;; 0x4003d010
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x6001             STR      R1,[R0, #+0]
    159              RTC_CR  &= ~RTC_CR_SWR_MASK;  
   \   00000022   0x....             LDR      R0,??DataTable4_2  ;; 0x4003d010
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x4388             BICS     R0,R0,R1
   \   0000002A   0x....             LDR      R1,??DataTable4_2  ;; 0x4003d010
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    160          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
    161          	
    162          

   \                                 In section .text, align 2, keep-with-next
    163          uint32_t rtc_updated_timer( void )
    164          {
    165            
    166              return RTC_TSR;
   \                     rtc_updated_timer:
   \   00000000   0x....             LDR      R0,??DataTable4_4  ;; 0x4003d000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    167          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40047000         DC32     0x40047000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4003D010         DC32     0x4003d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x4003D014         DC32     0x4003d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x4003D000         DC32     0x4003d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x4003D00C         DC32     0x4003d00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x4003D01C         DC32     0x4003d01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x4003D008         DC32     0x4003d008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     m_bAlarmFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     `?<Constant "Current Time:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     `?<Constant "  %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     `?<Constant " *alarm!* ">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "Current Time:">`:
   \   00000000   0x43 0x75          DC8 "Current Time:"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x3A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  %d">`:
   \   00000000   0x20 0x20          DC8 "  %d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant " *alarm!* ">`:
   \   00000000   0x20 0x2A          DC8 " *alarm!* "
   \              0x61 0x6C    
   \              0x61 0x72    
   \              0x6D 0x21    
   \              0x2A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  rtc_init
             24 -> disable_irq
             24 -> enable_irq
        4  rtc_isr
        0  rtc_reg_report
        8  rtc_reset
              8 -> disable_irq
        8  rtc_second_isr
              8 -> out_char
              8 -> printf
        0  rtc_updated_timer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "  %d">
      12  ?<Constant " *alarm!* ">
      16  ?<Constant "Current Time:">
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       1  m_bAlarmFlag
     260  rtc_init
      80  rtc_isr
       2  rtc_reg_report
      48  rtc_reset
      46  rtc_second_isr
       6  rtc_updated_timer

 
   1 byte  in section .bss
  36 bytes in section .rodata
 490 bytes in section .text
 
 490 bytes of CODE  memory
  36 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: none
