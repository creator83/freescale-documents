###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.3.54009/W32 for ARM     18/Feb/2013  16:57:31 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\common\startup.c                            #
#    Command line =  "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\common\startup.c" -D IAR -D FRDM -D EX2     #
#                    -lCN "D:\Profiles\B38350\My Documents\App                #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -lB "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -o "D:\Profiles\B38350\My Documents\App              #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \" --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0+ -e --fpu=None           #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    rojects\DualChannel_Experiment\" -I                      #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    ommon\" -I "D:\Profiles\B38350\My Documents\App          #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\" -I "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\headers\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\llwu\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\adc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\lptmr\" -I "D:\Profiles\B38350\My Documents\App   #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\mcg\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\pmc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rcm\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rtc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\smc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\wdog\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    latforms\" -I "D:\Profiles\B38350\My Documents\App       #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\startup.lst                                            #
#    Object file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \startup.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B38350\My Documents\App Notes\Kinetis\L Series\CMP pin sampling\Example Projects\src\common\startup.c
      1          /*
      2           * File:    startup.c
      3           * Purpose: Generic Kinetis startup code
      4           *
      5           * Notes:   
      6           */
      7          
      8          #include "common.h"
      9          
     10          #pragma section = ".data"
     11          #pragma section = ".data_init"
     12          #pragma section = ".bss"
     13          #pragma section = "CodeRelocate"
     14          #pragma section = "CodeRelocateRam" 
     15          
     16          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
     17          void
     18          common_startup(void)
     19          {
   \                     common_startup:
   \   00000000   0xB510             PUSH     {R4,LR}
     20          //    extern char __DATA_ROM[];
     21          //    extern char __DATA_RAM[];
     22          //    extern char __DATA_END[];
     23            
     24              /* Declare a counter we'll use in all of the copy loops */
     25              uint32 n;
     26           
     27           
     28              /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */  
     29              extern uint32 __VECTOR_TABLE[];
     30              extern uint32 __VECTOR_RAM[];
     31          
     32              /* Copy the vector table to RAM */
     33              if (__VECTOR_RAM != __VECTOR_TABLE)
   \   00000002   0x481E             LDR      R0,??common_startup_0
   \   00000004   0x491E             LDR      R1,??common_startup_0+0x4
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD00E             BEQ      ??common_startup_1
     34              {
     35                  for (n = 0; n < 0x410/4; n++)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE008             B        ??common_startup_2
     36                      __VECTOR_RAM[n] = __VECTOR_TABLE[n];
   \                     ??common_startup_3:
   \   0000000E   0x2104             MOVS     R1,#+4
   \   00000010   0x4341             MULS     R1,R0,R1
   \   00000012   0x4A1A             LDR      R2,??common_startup_0
   \   00000014   0x2304             MOVS     R3,#+4
   \   00000016   0x4343             MULS     R3,R0,R3
   \   00000018   0x4C19             LDR      R4,??common_startup_0+0x4
   \   0000001A   0x58E3             LDR      R3,[R4, R3]
   \   0000001C   0x5053             STR      R3,[R2, R1]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \                     ??common_startup_2:
   \   00000020   0x2182             MOVS     R1,#+130
   \   00000022   0x0049             LSLS     R1,R1,#+1        ;; #+260
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD3F2             BCC      ??common_startup_3
     37              }
     38              /* Point the VTOR to the new copy of the vector table */
     39              write_vtor((uint32)__VECTOR_RAM);    
   \                     ??common_startup_1:
   \   00000028   0x4814             LDR      R0,??common_startup_0
   \   0000002A   0x.... 0x....      BL       write_vtor
     40          
     41              /* Get the addresses for the .data section (initialized data section) */
     42              uint8* data_ram = __section_begin(".data");
   \   0000002E   0x4915             LDR      R1,??common_startup_0+0x8
     43              uint8* data_rom = __section_begin(".data_init");
   \   00000030   0x4A15             LDR      R2,??common_startup_0+0xC
     44              uint8* data_rom_end = __section_end(".data_init");
   \   00000032   0x4816             LDR      R0,??common_startup_0+0x10
     45              
     46              /* Copy initialized data from ROM to RAM */
     47              n = data_rom_end - data_rom;
   \   00000034   0x1A80             SUBS     R0,R0,R2
   \   00000036   0xE003             B        ??common_startup_4
     48              while (n--)
     49                *data_ram++ = *data_rom++;
   \                     ??common_startup_5:
   \   00000038   0x7813             LDRB     R3,[R2, #+0]
   \   0000003A   0x700B             STRB     R3,[R1, #+0]
   \   0000003C   0x1C52             ADDS     R2,R2,#+1
   \   0000003E   0x1C49             ADDS     R1,R1,#+1
   \                     ??common_startup_4:
   \   00000040   0x0003             MOVS     R3,R0
   \   00000042   0x1E58             SUBS     R0,R3,#+1
   \   00000044   0x2B00             CMP      R3,#+0
   \   00000046   0xD1F7             BNE      ??common_startup_5
     50           
     51           
     52              /* Get the addresses for the .bss section (zero-initialized data) */
     53              uint8* bss_start = __section_begin(".bss");
   \   00000048   0x4911             LDR      R1,??common_startup_0+0x14
     54              uint8* bss_end = __section_end(".bss");
   \   0000004A   0x4812             LDR      R0,??common_startup_0+0x18
     55              
     56              /* Clear the zero-initialized data section */
     57              n = bss_end - bss_start;
   \   0000004C   0x1A40             SUBS     R0,R0,R1
   \   0000004E   0xE002             B        ??common_startup_6
     58              while(n--)
     59                *bss_start++ = 0;    
   \                     ??common_startup_7:
   \   00000050   0x2200             MOVS     R2,#+0
   \   00000052   0x700A             STRB     R2,[R1, #+0]
   \   00000054   0x1C49             ADDS     R1,R1,#+1
   \                     ??common_startup_6:
   \   00000056   0x0002             MOVS     R2,R0
   \   00000058   0x1E50             SUBS     R0,R2,#+1
   \   0000005A   0x2A00             CMP      R2,#+0
   \   0000005C   0xD1F8             BNE      ??common_startup_7
     60              
     61              /* Get addresses for any code sections that need to be copied from ROM to RAM.
     62               * The IAR tools have a predefined keyword that can be used to mark individual
     63               * functions for execution from RAM. Add "__ramfunc" before the return type in
     64               * the function prototype for any routines you need to execute from RAM instead 
     65               * of ROM. ex: __ramfunc void foo(void);
     66               */
     67              uint8* code_relocate_ram = __section_begin("CodeRelocateRam");
   \   0000005E   0x490E             LDR      R1,??common_startup_0+0x1C
     68              uint8* code_relocate = __section_begin("CodeRelocate");
   \   00000060   0x4A0E             LDR      R2,??common_startup_0+0x20
     69              uint8* code_relocate_end = __section_end("CodeRelocate");
   \   00000062   0x480F             LDR      R0,??common_startup_0+0x24
     70              
     71              /* Copy functions from ROM to RAM */
     72              n = code_relocate_end - code_relocate;
   \   00000064   0x1A80             SUBS     R0,R0,R2
   \   00000066   0xE003             B        ??common_startup_8
     73              while (n--)
     74                *code_relocate_ram++ = *code_relocate++;
   \                     ??common_startup_9:
   \   00000068   0x7813             LDRB     R3,[R2, #+0]
   \   0000006A   0x700B             STRB     R3,[R1, #+0]
   \   0000006C   0x1C52             ADDS     R2,R2,#+1
   \   0000006E   0x1C49             ADDS     R1,R1,#+1
   \                     ??common_startup_8:
   \   00000070   0x0003             MOVS     R3,R0
   \   00000072   0x1E58             SUBS     R0,R3,#+1
   \   00000074   0x2B00             CMP      R3,#+0
   \   00000076   0xD1F7             BNE      ??common_startup_9
     75          
     76          }
   \   00000078   0xBD10             POP      {R4,PC}          ;; return
   \   0000007A   0xBF00             Nop      
   \                     ??common_startup_0:
   \   0000007C   0x........         DC32     __VECTOR_RAM
   \   00000080   0x........         DC32     __VECTOR_TABLE
   \   00000084   0x........         DC32     SFB(`.data`)
   \   00000088   0x........         DC32     SFB(`.data_init`)
   \   0000008C   0x........         DC32     SFE(`.data_init`)
   \   00000090   0x........         DC32     SFB(`.bss`)
   \   00000094   0x........         DC32     SFE(`.bss`)
   \   00000098   0x........         DC32     SFB(CodeRelocateRam)
   \   0000009C   0x........         DC32     SFB(CodeRelocate)
   \   000000A0   0x........         DC32     SFE(CodeRelocate)
     77          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  common_startup
             8 -> write_vtor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     164  common_startup

 
 164 bytes in section .text
 
 164 bytes of CODE memory

Errors: none
Warnings: none
