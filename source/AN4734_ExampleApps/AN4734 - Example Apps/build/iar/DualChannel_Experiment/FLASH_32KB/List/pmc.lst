###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.3.54009/W32 for ARM     18/Feb/2013  16:57:30 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\drivers\pmc\pmc.c                           #
#    Command line =  "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\drivers\pmc\pmc.c" -D IAR -D FRDM -D EX2    #
#                    -lCN "D:\Profiles\B38350\My Documents\App                #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -lB "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -o "D:\Profiles\B38350\My Documents\App              #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \" --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0+ -e --fpu=None           #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    rojects\DualChannel_Experiment\" -I                      #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    ommon\" -I "D:\Profiles\B38350\My Documents\App          #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\" -I "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\headers\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\llwu\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\adc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\lptmr\" -I "D:\Profiles\B38350\My Documents\App   #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\mcg\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\pmc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rcm\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rtc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\smc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\wdog\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    latforms\" -I "D:\Profiles\B38350\My Documents\App       #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\pmc.lst                                                #
#    Object file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \pmc.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B38350\My Documents\App Notes\Kinetis\L Series\CMP pin sampling\Example Projects\src\drivers\pmc\pmc.c
      1          /*
      2           * File:        pmc.c
      3           * Purpose:     Provides routines for entering low power modes.
      4           *
      5           * Notes:	Since the wakeup mechanism for low power modes
      6           *              will be application specific, these routines
      7           *              do not include code to setup interrupts to exit
      8           *              from the low power modes. The desired means of
      9           *              low power mode exit should be configured before
     10           *              calling any of these functions.
     11           *
     12           *              These routines do not include protection to
     13           *              prevent illegal state transitions in the mode
     14           *              controller, and all routines that write to the
     15           *              PMPROT register write a value to allow all
     16           *              possible low power modes (it is write once, so
     17           *              if only the currently requested mode is enabled
     18           *              a different mode couldn't be enabled later on).
     19           *              
     20           */
     21          
     22          #include "common.h"
     23          #include "pmc.h"
     24          #include "mcg.h"
     25          

   \                                 In section .bss, align 4
     26          int i;
   \                     i:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
     27          void LVD_Initalize(unsigned char lvd_select, 
     28                             unsigned char lvd_reset_enable,
     29                             unsigned char lvd_int_enable, 
     30                             unsigned char lvw_select,
     31                             unsigned char lvw_int_enable){
   \                     LVD_Initalize:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x9C01             LDR      R4,[SP, #+4]
     32              PMC_LVDSC1 =  PMC_LVDSC1_LVDACK_MASK | 
     33                           (lvd_reset_enable) |   //enable LVD Reset ?
     34          	          lvd_int_enable |      //LVD Interrupt ?
     35          	          PMC_LVDSC1_LVDV(lvd_select)   ;        //select high or low LVD
   \   00000004   0x430A             ORRS     R2,R2,R1
   \   00000006   0x0780             LSLS     R0,R0,#+30       ;; ZeroExtS R0,R0,#+30,#+30
   \   00000008   0x0F80             LSRS     R0,R0,#+30
   \   0000000A   0x4310             ORRS     R0,R0,R2
   \   0000000C   0x2140             MOVS     R1,#+64
   \   0000000E   0x4301             ORRS     R1,R1,R0
   \   00000010   0x....             LDR      R0,??DataTable2  ;; 0x4007d000
   \   00000012   0x7001             STRB     R1,[R0, #+0]
     36              PMC_LVDSC2  = PMC_LVDSC2_LVWACK_MASK | 
     37                           (lvw_int_enable) |    //LVW interrupt?
     38                            PMC_LVDSC2_LVWV(lvw_select);  // select LVW level 1,2,3 or 4
   \   00000014   0x0798             LSLS     R0,R3,#+30       ;; ZeroExtS R0,R3,#+30,#+30
   \   00000016   0x0F80             LSRS     R0,R0,#+30
   \   00000018   0x4320             ORRS     R0,R0,R4
   \   0000001A   0x2140             MOVS     R1,#+64
   \   0000001C   0x4301             ORRS     R1,R1,R0
   \   0000001E   0x....             LDR      R0,??DataTable2_1  ;; 0x4007d001
   \   00000020   0x7001             STRB     R1,[R0, #+0]
     39          }
   \   00000022   0xBC10             POP      {R4}
   \   00000024   0x4770             BX       LR               ;; return
     40          //******************************************************************************

   \                                 In section .text, align 2, keep-with-next
     41          void LVD_Init(void)
     42          {
     43          /* setup LVD
     44          Low-Voltage Detect Voltage Select
     45          Selects the LVD trip point voltage (VLVD).
     46          00 Low trip point selected (VLVD = VLVDL)
     47          01 High trip point selected (VLVD = VLVDH)
     48          10 Reserved
     49          11 Reserved
     50            */
     51          //	PMC_LVDSC1 &= ~PMC_LVDSC1_LVDRE_MASK ;   //Disable LVD Reset
     52          	PMC_LVDSC1 =  PMC_LVDSC1_LVDRE_MASK |   //enable LVD Reset
     53          	             //  PMC_LVDSC1_LVDIE_MASK |
     54          	               PMC_LVDSC1_LVDV(1);   //Enable LVD Reset High level
   \                     LVD_Init:
   \   00000000   0x....             LDR      R0,??DataTable2  ;; 0x4007d000
   \   00000002   0x2111             MOVS     R1,#+17
   \   00000004   0x7001             STRB     R1,[R0, #+0]
     55          
     56          //PMC_LVDSC1 |= PMC_LVDSC1_LVDV_MASK & 0x01;  
     57          // PMC_LVDSC1 &= PMC_LVDSC1_LVDV_MASK & 0b00;  //Low Trip point 1.54 V
     58           
     59          //PMC_LVDSC2  = PMC_LVDSC2_LVWACK_MASK | 
     60          //              PMC_LVDSC2_LVWV(0)|
     61          //              PMC_LVDSC2_LVWIE_MASK;    
     62          //PMC_LVDSC2  = 0x40; //0b01000000 low trip point LVWV
     63          //PMC_LVDSC2  = PMC_LVDSC2_LVWACK_MASK | 
     64          //              PMC_LVDSC2_LVWV(1)|
     65          //              PMC_LVDSC2_LVWIE_MASK;    
     66          //PMC_LVDSC2  = 0x41; //0b01000001 mid1 trip point LVWV
     67          //PMC_LVDSC2  = PMC_LVDSC2_LVWACK_MASK | 
     68          //              PMC_LVDSC2_LVWV(2)|
     69          //              PMC_LVDSC2_LVWIE_MASK;    
     70          //PMC_LVDSC2  = 0x42; //0b01000010 mid2 trip point LVWV
     71          PMC_LVDSC2  = PMC_LVDSC2_LVWACK_MASK | 
     72                        PMC_LVDSC2_LVWV(3) ;
   \   00000006   0x....             LDR      R0,??DataTable2_1  ;; 0x4007d001
   \   00000008   0x2143             MOVS     R1,#+67
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
     73                        //PMC_LVDSC2_LVWIE_MASK ;    //enable warning interrupt
     74          //PMC_LVDSC2  = 0x43; //0b01000011 high trip point LVWV   
     75          
     76          // ack to clear initial flags
     77          PMC_LVDSC1 |= PMC_LVDSC1_LVDACK_MASK; 
   \   0000000C   0x....             LDR      R0,??DataTable2  ;; 0x4007d000
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2140             MOVS     R1,#+64
   \   00000012   0x4301             ORRS     R1,R1,R0
   \   00000014   0x....             LDR      R0,??DataTable2  ;; 0x4007d000
   \   00000016   0x7001             STRB     R1,[R0, #+0]
     78          PMC_LVDSC2 |= PMC_LVDSC2_LVWACK_MASK;
   \   00000018   0x....             LDR      R0,??DataTable2_1  ;; 0x4007d001
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2140             MOVS     R1,#+64
   \   0000001E   0x4301             ORRS     R1,R1,R0
   \   00000020   0x....             LDR      R0,??DataTable2_1  ;; 0x4007d001
   \   00000022   0x7001             STRB     R1,[R0, #+0]
     79          
     80          /* 
     81          LVWV if LVD high range selected
     82          2.621
     83          2.72
     84          2.82
     85          2.92
     86          LVDV if LVD low range selected
     87          1.74
     88          1.84
     89          1.94
     90          
     91          
     92          */
     93          }
   \   00000024   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     94          void pmc_lvd_isr(void)
     95          {
   \                     pmc_lvd_isr:
   \   00000000   0xB580             PUSH     {R7,LR}
     96           
     97            if (PMC_LVDSC1 &PMC_LVDSC1_LVDF_MASK){
   \   00000002   0x....             LDR      R0,??DataTable2  ;; 0x4007d000
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x0600             LSLS     R0,R0,#+24
   \   00000008   0xD502             BPL      ??pmc_lvd_isr_0
     98             printf("[LVD_isr]LV DETECT interrupt occurred");
   \   0000000A   0x....             LDR      R0,??DataTable2_2
   \   0000000C   0x.... 0x....      BL       printf
     99            }
    100            if (PMC_LVDSC2 &PMC_LVDSC2_LVWF_MASK){
   \                     ??pmc_lvd_isr_0:
   \   00000010   0x....             LDR      R0,??DataTable2_1  ;; 0x4007d001
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x0600             LSLS     R0,R0,#+24
   \   00000016   0xD502             BPL      ??pmc_lvd_isr_1
    101             printf("[LVD_isr]LV WARNING interrupt occurred");
   \   00000018   0x....             LDR      R0,??DataTable2_3
   \   0000001A   0x.... 0x....      BL       printf
    102            }
    103           
    104           // ack to clear initial flags
    105           PMC_LVDSC1 |= PMC_LVDSC1_LVDACK_MASK; 
   \                     ??pmc_lvd_isr_1:
   \   0000001E   0x....             LDR      R0,??DataTable2  ;; 0x4007d000
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2140             MOVS     R1,#+64
   \   00000024   0x4301             ORRS     R1,R1,R0
   \   00000026   0x....             LDR      R0,??DataTable2  ;; 0x4007d000
   \   00000028   0x7001             STRB     R1,[R0, #+0]
    106           PMC_LVDSC2 |= PMC_LVDSC2_LVWACK_MASK;
   \   0000002A   0x....             LDR      R0,??DataTable2_1  ;; 0x4007d001
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x2140             MOVS     R1,#+64
   \   00000030   0x4301             ORRS     R1,R1,R0
   \   00000032   0x....             LDR      R0,??DataTable2_1  ;; 0x4007d001
   \   00000034   0x7001             STRB     R1,[R0, #+0]
    107          
    108          }
   \   00000036   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4007D000         DC32     0x4007d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4007D001         DC32     0x4007d001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     `?<Constant "[LVD_isr]LV DETECT in...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     `?<Constant "[LVD_isr]LV WARNING i...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "[LVD_isr]LV DETECT in...">`:
   \   00000000   0x5B 0x4C          DC8 "[LVD_isr]LV DETECT interrupt occurred"
   \              0x56 0x44    
   \              0x5F 0x69    
   \              0x73 0x72    
   \              0x5D 0x4C    
   \              0x56 0x20    
   \              0x44 0x45    
   \              0x54 0x45    
   \              0x43 0x54    
   \              0x20 0x69    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x70 0x74    
   \              0x20 0x6F    
   \              0x63 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x64 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "[LVD_isr]LV WARNING i...">`:
   \   00000000   0x5B 0x4C          DC8 "[LVD_isr]LV WARNING interrupt occurred"
   \              0x56 0x44    
   \              0x5F 0x69    
   \              0x73 0x72    
   \              0x5D 0x4C    
   \              0x56 0x20    
   \              0x57 0x41    
   \              0x52 0x4E    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x69 0x6E    
   \              0x74 0x65    
   \              0x72 0x72    
   \              0x75 0x70    
   \              0x74 0x20    
   \              0x6F 0x63    
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x64    
   \              0x00         
   \   00000027   0x00               DC8 0
    109          
    110          
    111          
    112          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  LVD_Init
        4  LVD_Initalize
        8  pmc_lvd_isr
             8 -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  ?<Constant "[LVD_isr]LV DETECT in...">
      40  ?<Constant "[LVD_isr]LV WARNING i...">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
      38  LVD_Init
      38  LVD_Initalize
       4  i
      56  pmc_lvd_isr

 
   4 bytes in section .bss
  80 bytes in section .rodata
 148 bytes in section .text
 
 148 bytes of CODE  memory
  80 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
