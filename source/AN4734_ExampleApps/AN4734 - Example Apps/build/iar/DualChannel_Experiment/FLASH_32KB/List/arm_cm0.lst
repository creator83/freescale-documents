###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.3.54009/W32 for ARM     18/Feb/2013  16:57:29 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\cpu\arm_cm0.c                               #
#    Command line =  "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\cpu\arm_cm0.c" -D IAR -D FRDM -D EX2 -lCN   #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -lB "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -o "D:\Profiles\B38350\My Documents\App              #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \" --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0+ -e --fpu=None           #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    rojects\DualChannel_Experiment\" -I                      #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    ommon\" -I "D:\Profiles\B38350\My Documents\App          #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\" -I "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\headers\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\llwu\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\adc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\lptmr\" -I "D:\Profiles\B38350\My Documents\App   #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\mcg\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\pmc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rcm\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rtc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\smc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\wdog\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    latforms\" -I "D:\Profiles\B38350\My Documents\App       #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\arm_cm0.lst                                            #
#    Object file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \arm_cm0.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B38350\My Documents\App Notes\Kinetis\L Series\CMP pin sampling\Example Projects\src\cpu\arm_cm0.c
      1          /*
      2           * File:		arm_cm4.c
      3           * Purpose:		Generic high-level routines for ARM Cortex M4 processors
      4           *
      5           * Notes:
      6           */
      7          
      8          #include "common.h"
      9          
     10          /***********************************************************************/
     11          /*
     12           * Configures the ARM system control register for STOP (deep sleep) mode
     13           * and then executes the WFI instruction to enter the mode.
     14           *
     15           * Parameters:
     16           * none
     17           *
     18           * Note: Might want to change this later to allow for passing in a parameter
     19           *       to optionally set the sleep on exit bit.
     20           */
     21          

   \                                 In section .text, align 4, keep-with-next
     22          void stop (void)
     23          {
     24          	/* Set the SLEEPDEEP bit to enable deep sleep mode (STOP) */
     25          	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;	
   \                     stop:
   \   00000000   0x....             LDR      R0,??DataTable5  ;; 0xe000ed10
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2104             MOVS     R1,#+4
   \   00000006   0x4301             ORRS     R1,R1,R0
   \   00000008   0x....             LDR      R0,??DataTable5  ;; 0xe000ed10
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     26          
     27          	/* WFI instruction will start entry into STOP mode */
     28          #ifndef KEIL
     29          	asm("WFI");
   \   0000000C   0xBF30             WFI
     30          #else
     31          	__wfi();
     32          #endif
     33                  /*if((SMC_PMCTRL & SMC_PMCTRL_STOPA_MASK) == SMC_PMCTRL_STOPA_MASK)
     34                  {
     35                      PORTA_PCR15 = PORT_PCR_MUX(0x1);
     36                      
     37                      FGPIOA_PDDR = 0xFFFF;
     38                      FGPIOA_PSOR = 0xFFFF;
     39                  }*/
     40          }
   \   0000000E   0x4770             BX       LR               ;; return
     41          /***********************************************************************/
     42          /*
     43           * Configures the ARM system control register for WAIT (sleep) mode
     44           * and then executes the WFI instruction to enter the mode.
     45           *
     46           * Parameters:
     47           * none
     48           *
     49           * Note: Might want to change this later to allow for passing in a parameter
     50           *       to optionally set the sleep on exit bit.
     51           */
     52          

   \                                 In section .text, align 4, keep-with-next
     53          void wait (void)
     54          {
     55          	/* Clear the SLEEPDEEP bit to make sure we go into WAIT (sleep) mode instead
     56          	 * of deep sleep.
     57          	 */
     58          	SCB_SCR &= ~SCB_SCR_SLEEPDEEP_MASK;	
   \                     wait:
   \   00000000   0x....             LDR      R0,??DataTable5  ;; 0xe000ed10
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2104             MOVS     R1,#+4
   \   00000006   0x4388             BICS     R0,R0,R1
   \   00000008   0x....             LDR      R1,??DataTable5  ;; 0xe000ed10
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     59          
     60          	/* WFI instruction will start entry into WAIT mode */
     61          #ifndef KEIL
     62          	asm("WFI");
   \   0000000C   0xBF30             WFI
     63          #else
     64              __wfi();
     65          #endif
     66          }
   \   0000000E   0x4770             BX       LR               ;; return
     67          /***********************************************************************/
     68          /*
     69           * Change the value of the vector table offset register to the specified value.
     70           *
     71           * Parameters:
     72           * vtor     new value to write to the VTOR
     73           */
     74          

   \                                 In section .text, align 2, keep-with-next
     75          void write_vtor (int vtor)
     76          {
     77                  /* Write the VTOR with the new value */
     78                  SCB_VTOR = vtor;	
   \                     write_vtor:
   \   00000000   0x....             LDR      R1,??DataTable5_1  ;; 0xe000ed08
   \   00000002   0x6008             STR      R0,[R1, #+0]
     79          }
   \   00000004   0x4770             BX       LR               ;; return
     80          /***********************************************************************/
     81          /*
     82           * Initialize the NVIC to enable the specified IRQ.
     83           * 
     84           * NOTE: The function only initializes the NVIC to enable a single IRQ. 
     85           * Interrupts will also need to be enabled in the ARM core. This can be 
     86           * done using the EnableInterrupts macro.
     87           *
     88           * Parameters:
     89           * irq    irq number to be enabled (the irq number NOT the vector number)
     90           */
     91          

   \                                 In section .text, align 2, keep-with-next
     92          void enable_irq (int irq)
     93          {   
   \                     enable_irq:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     94              /* Make sure that the IRQ is an allowable number. Up to 48 is 
     95               * used.
     96               */
     97              if (irq > 48)
   \   00000004   0x2C31             CMP      R4,#+49
   \   00000006   0xDB03             BLT      ??enable_irq_0
     98                  printf("\nERR! Invalid IRQ value passed to enable irq function!\n");
   \   00000008   0x....             LDR      R0,??DataTable5_2
   \   0000000A   0x.... 0x....      BL       printf
   \   0000000E   0xE015             B        ??enable_irq_1
     99              else
    100              {
    101                /* Determine which of the NVICISERs corresponds to the irq */
    102                NVIC_ICPR |= 1 << (irq%32);
   \                     ??enable_irq_0:
   \   00000010   0x....             LDR      R0,??DataTable5_3  ;; 0xe000e280
   \   00000012   0x6805             LDR      R5,[R0, #+0]
   \   00000014   0x2601             MOVS     R6,#+1
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x2120             MOVS     R1,#+32
   \   0000001A   0x.... 0x....      BL       __aeabi_idivmod
   \   0000001E   0x408E             LSLS     R6,R6,R1
   \   00000020   0x432E             ORRS     R6,R6,R5
   \   00000022   0x....             LDR      R0,??DataTable5_3  ;; 0xe000e280
   \   00000024   0x6006             STR      R6,[R0, #+0]
    103                NVIC_ISER |= 1 << (irq%32);
   \   00000026   0x....             LDR      R0,??DataTable5_4  ;; 0xe000e100
   \   00000028   0x6805             LDR      R5,[R0, #+0]
   \   0000002A   0x2601             MOVS     R6,#+1
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x2120             MOVS     R1,#+32
   \   00000030   0x.... 0x....      BL       __aeabi_idivmod
   \   00000034   0x408E             LSLS     R6,R6,R1
   \   00000036   0x432E             ORRS     R6,R6,R5
   \   00000038   0x....             LDR      R0,??DataTable5_4  ;; 0xe000e100
   \   0000003A   0x6006             STR      R6,[R0, #+0]
    104              }
    105          }
   \                     ??enable_irq_1:
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    106          /***********************************************************************/
    107          /*
    108           * Initialize the NVIC to disable the specified IRQ.
    109           * 
    110           * NOTE: The function only initializes the NVIC to disable a single IRQ. 
    111           * If you want to disable all interrupts, then use the DisableInterrupts
    112           * macro instead. 
    113           *
    114           * Parameters:
    115           * irq    irq number to be disabled (the irq number NOT the vector number)
    116           */
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void disable_irq (int irq)
    119          {
   \                     disable_irq:
   \   00000000   0xB510             PUSH     {R4,LR}
    120              
    121              /* Make sure that the IRQ is an allowable number. Right now up to 48 is 
    122               * used.
    123               */
    124              if (irq > 48)
   \   00000002   0x2831             CMP      R0,#+49
   \   00000004   0xDB03             BLT      ??disable_irq_0
    125                  printf("\nERR! Invalid IRQ value passed to disable irq function!\n");
   \   00000006   0x....             LDR      R0,??DataTable5_5
   \   00000008   0x.... 0x....      BL       printf
   \   0000000C   0xE006             B        ??disable_irq_1
    126              else
    127                /* Determine which of the NVICICERs corresponds to the irq */
    128                NVIC_ICER = 1 << (irq%32);
   \                     ??disable_irq_0:
   \   0000000E   0x2401             MOVS     R4,#+1
   \   00000010   0x2120             MOVS     R1,#+32
   \   00000012   0x.... 0x....      BL       __aeabi_idivmod
   \   00000016   0x408C             LSLS     R4,R4,R1
   \   00000018   0x....             LDR      R0,??DataTable5_6  ;; 0xe000e180
   \   0000001A   0x6004             STR      R4,[R0, #+0]
    129          }
   \                     ??disable_irq_1:
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    130          /***********************************************************************/
    131          /*
    132           * Initialize the NVIC to set specified IRQ priority.
    133           * 
    134           * NOTE: The function only initializes the NVIC to set a single IRQ priority. 
    135           * Interrupts will also need to be enabled in the ARM core. This can be 
    136           * done using the EnableInterrupts macro.
    137           *
    138           * Parameters:
    139           * irq    irq number to be enabled (the irq number NOT the vector number)
    140           * prio   irq priority. 0-3 levels. 0 max priority
    141           */
    142          

   \                                 In section .text, align 2, keep-with-next
    143          void set_irq_priority (int irq, int prio)
    144          {   
   \                     set_irq_priority:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    145              uint32 temp1, temp2;
    146              /* Make sure that the IRQ is an allowable number. Right now up to 48 is 
    147               * used.
    148               */
    149              if (irq > 32)
   \   00000006   0x2D21             CMP      R5,#+33
   \   00000008   0xDB02             BLT      ??set_irq_priority_0
    150                  printf("\nERR! Invalid IRQ value passed to priority irq function!\n");
   \   0000000A   0x....             LDR      R0,??DataTable5_7
   \   0000000C   0x.... 0x....      BL       printf
    151          
    152              if (prio > 3)
   \                     ??set_irq_priority_0:
   \   00000010   0x2C04             CMP      R4,#+4
   \   00000012   0xDB03             BLT      ??set_irq_priority_1
    153              {
    154                  printf("\nERR! Invalid priority value passed to priority irq function!\n");
   \   00000014   0x....             LDR      R0,??DataTable5_8
   \   00000016   0x.... 0x....      BL       printf
   \   0000001A   0xE026             B        ??set_irq_priority_2
    155              }
    156              else if (irq >15)
   \                     ??set_irq_priority_1:
   \   0000001C   0x2D10             CMP      R5,#+16
   \   0000001E   0xDB11             BLT      ??set_irq_priority_3
    157              {
    158                  temp1 = NVIC_IPR1; 
   \   00000020   0x....             LDR      R0,??DataTable5_9  ;; 0xe000e404
   \   00000022   0x6806             LDR      R6,[R0, #+0]
    159                  temp2 = 8 * (irq % 4) + 6;
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0x2104             MOVS     R1,#+4
   \   00000028   0x.... 0x....      BL       __aeabi_idivmod
   \   0000002C   0x2008             MOVS     R0,#+8
   \   0000002E   0x4341             MULS     R1,R0,R1
   \   00000030   0x1D89             ADDS     R1,R1,#+6
    160                  temp1 &= ~(3 << temp2);
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x4088             LSLS     R0,R0,R1
   \   00000036   0x4386             BICS     R6,R6,R0
    161                  temp1 |= (prio << temp2);
   \   00000038   0x408C             LSLS     R4,R4,R1
   \   0000003A   0x4334             ORRS     R4,R4,R6
   \   0000003C   0x0026             MOVS     R6,R4
    162                  NVIC_IPR1 = temp1;
   \   0000003E   0x....             LDR      R0,??DataTable5_9  ;; 0xe000e404
   \   00000040   0x6006             STR      R6,[R0, #+0]
   \   00000042   0xE012             B        ??set_irq_priority_2
    163              }
    164              else if (irq <= 15)
   \                     ??set_irq_priority_3:
   \   00000044   0x2D10             CMP      R5,#+16
   \   00000046   0xDA10             BGE      ??set_irq_priority_2
    165              {
    166                  temp1 = NVIC_IPR0; 
   \   00000048   0x....             LDR      R0,??DataTable5_10  ;; 0xe000e400
   \   0000004A   0x6806             LDR      R6,[R0, #+0]
    167                  temp2 = 8 * (irq % 4) + 6;
   \   0000004C   0x0028             MOVS     R0,R5
   \   0000004E   0x2104             MOVS     R1,#+4
   \   00000050   0x.... 0x....      BL       __aeabi_idivmod
   \   00000054   0x2008             MOVS     R0,#+8
   \   00000056   0x4341             MULS     R1,R0,R1
   \   00000058   0x1D89             ADDS     R1,R1,#+6
    168                  temp1 &= ~(3 << temp2);
   \   0000005A   0x2003             MOVS     R0,#+3
   \   0000005C   0x4088             LSLS     R0,R0,R1
   \   0000005E   0x4386             BICS     R6,R6,R0
    169                  temp1 |= (prio << temp2);
   \   00000060   0x408C             LSLS     R4,R4,R1
   \   00000062   0x4334             ORRS     R4,R4,R6
   \   00000064   0x0026             MOVS     R6,R4
    170                  NVIC_IPR0 = temp1;
   \   00000066   0x....             LDR      R0,??DataTable5_10  ;; 0xe000e400
   \   00000068   0x6006             STR      R6,[R0, #+0]
    171              }
    172              else
    173              {}
    174              /* Determine which of the NVICIPx corresponds to the irq */
    175              //prio_reg = (uint8 *)(((uint32)&NVIC_IP) + irq);
    176              /* Assign priority to IRQ */
    177              //*prio_reg = ( (prio&0x3) << (8 - ARM_INTERRUPT_LEVEL_BITS) );             
    178          }
   \                     ??set_irq_priority_2:
   \   0000006A   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid IRQ val...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid IRQ val...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid IRQ val...">_2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid priorit...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0xE000E404         DC32     0xe000e404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid IRQ val...">`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 65H, 6EH, 61H, 62H, 6CH, 65H
   \              0x65 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \   00000028   0x20 0x69          DC8 20H, 69H, 72H, 71H, 20H, 66H, 75H, 6EH
   \              0x72 0x71    
   \              0x20 0x66    
   \              0x75 0x6E    
   \   00000030   0x63 0x74          DC8 63H, 74H, 69H, 6FH, 6EH, 21H, 0AH, 0
   \              0x69 0x6F    
   \              0x6E 0x21    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid IRQ val...">_1`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 64H, 69H, 73H, 61H, 62H, 6CH
   \              0x64 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \   00000028   0x65 0x20          DC8 65H, 20H, 69H, 72H, 71H, 20H, 66H, 75H
   \              0x69 0x72    
   \              0x71 0x20    
   \              0x66 0x75    
   \   00000030   0x6E 0x63          DC8 6EH, 63H, 74H, 69H, 6FH, 6EH, 21H, 0AH
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x21 0x0A    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid IRQ val...">_2`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 70H, 72H, 69H, 6FH, 72H, 69H
   \              0x70 0x72    
   \              0x69 0x6F    
   \              0x72 0x69    
   \   00000028   0x74 0x79          DC8 74H, 79H, 20H, 69H, 72H, 71H, 20H, 66H
   \              0x20 0x69    
   \              0x72 0x71    
   \              0x20 0x66    
   \   00000030   0x75 0x6E          DC8 75H, 6EH, 63H, 74H, 69H, 6FH, 6EH, 21H
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x21    
   \   00000038   0x0A 0x00          DC8 0AH, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid priorit...">`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 70H, 72H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x70 0x72    
   \   00000010   0x69 0x6F          DC8 69H, 6FH, 72H, 69H, 74H, 79H, 20H, 76H
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x20 0x76    
   \   00000018   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 20H, 70H, 61H, 73H
   \              0x75 0x65    
   \              0x20 0x70    
   \              0x61 0x73    
   \   00000020   0x73 0x65          DC8 73H, 65H, 64H, 20H, 74H, 6FH, 20H, 70H
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x70    
   \   00000028   0x72 0x69          DC8 72H, 69H, 6FH, 72H, 69H, 74H, 79H, 20H
   \              0x6F 0x72    
   \              0x69 0x74    
   \              0x79 0x20    
   \   00000030   0x69 0x72          DC8 69H, 72H, 71H, 20H, 66H, 75H, 6EH, 63H
   \              0x71 0x20    
   \              0x66 0x75    
   \              0x6E 0x63    
   \   00000038   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0
    179          /***********************************************************************/
    180          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  disable_irq
              8 -> __aeabi_idivmod
              8 -> printf
       16  enable_irq
             16 -> __aeabi_idivmod
             16 -> printf
       16  set_irq_priority
             16 -> __aeabi_idivmod
             16 -> printf
        0  stop
        0  wait
        0  write_vtor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Constant "\nERR! Invalid IRQ val...">
      60  ?<Constant "\nERR! Invalid IRQ val...">_1
      60  ?<Constant "\nERR! Invalid IRQ val...">_2
      64  ?<Constant "\nERR! Invalid priorit...">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      30  disable_irq
      62  enable_irq
     108  set_irq_priority
      16  stop
      16  wait
       6  write_vtor

 
 240 bytes in section .rodata
 282 bytes in section .text
 
 282 bytes of CODE  memory
 240 bytes of CONST memory

Errors: none
Warnings: none
