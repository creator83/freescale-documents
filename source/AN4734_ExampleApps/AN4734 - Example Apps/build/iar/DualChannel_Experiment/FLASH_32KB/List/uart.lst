###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.3.54009/W32 for ARM     18/Feb/2013  16:57:32 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\drivers\uart\uart.c                         #
#    Command line =  "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\drivers\uart\uart.c" -D IAR -D FRDM -D EX2  #
#                    -lCN "D:\Profiles\B38350\My Documents\App                #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -lB "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -o "D:\Profiles\B38350\My Documents\App              #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \" --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0+ -e --fpu=None           #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    rojects\DualChannel_Experiment\" -I                      #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    ommon\" -I "D:\Profiles\B38350\My Documents\App          #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\" -I "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\headers\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\llwu\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\adc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\lptmr\" -I "D:\Profiles\B38350\My Documents\App   #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\mcg\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\pmc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rcm\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rtc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\smc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\wdog\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    latforms\" -I "D:\Profiles\B38350\My Documents\App       #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\uart.lst                                               #
#    Object file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \uart.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B38350\My Documents\App Notes\Kinetis\L Series\CMP pin sampling\Example Projects\src\drivers\uart\uart.c
      1          /*
      2           * File:        uart.c
      3           * Purpose:     Provide common uart routines for serial IO
      4           *
      5           * Notes:       
      6           *              
      7           */
      8          
      9          #include "common.h"
     10          #include "uart.h"
     11          
     12          /***************************************************************************
     13           * Begin UART0 functions
     14           **************************************************************************/
     15          /********************************************************************/
     16          /*
     17           * Initialize the uart for 8N1 operation, interrupts disabled, and
     18           * no hardware flow-control
     19           *
     20           * NOTE: Since the uarts are pinned out in multiple locations on most
     21           *       Kinetis devices, this driver does not enable uart pin functions.
     22           *       The desired pins should be enabled before calling this init function.
     23           *
     24           * Parameters:
     25           *  uartch      uart channel to initialize
     26           *  sysclk      uart module Clock in kHz(used to calculate baud)
     27           *  baud        uart baud rate
     28           */

   \                                 In section .text, align 2, keep-with-next
     29          void uart0_init (UART0_MemMapPtr uartch, int uart0clk, int baud)
     30          {
   \                     uart0_init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0x0011             MOVS     R1,R2
     31              register uint16 sbr;
     32              uint8 temp;
     33              
     34              SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   \   00000008   0x....             LDR      R2,??DataTable0  ;; 0x40048034
   \   0000000A   0x6812             LDR      R2,[R2, #+0]
   \   0000000C   0x2380             MOVS     R3,#+128
   \   0000000E   0x00DB             LSLS     R3,R3,#+3        ;; #+1024
   \   00000010   0x4313             ORRS     R3,R3,R2
   \   00000012   0x....             LDR      R2,??DataTable0  ;; 0x40048034
   \   00000014   0x6013             STR      R3,[R2, #+0]
     35              
     36              /* Make sure that the transmitter and receiver are disabled while we 
     37               * change settings.
     38               */
     39              UART0_C2_REG(uartch) &= ~(UART0_C2_TE_MASK
     40          				| UART0_C2_RE_MASK );
   \   00000016   0x78E2             LDRB     R2,[R4, #+3]
   \   00000018   0x23F3             MOVS     R3,#+243
   \   0000001A   0x4013             ANDS     R3,R3,R2
   \   0000001C   0x70E3             STRB     R3,[R4, #+3]
     41          
     42                /* Configure the uart for 8-bit mode, no parity */
     43              UART0_C1_REG(uartch) = 0;	/* We need all default settings, so entire register is cleared */
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x70A2             STRB     R2,[R4, #+2]
     44              
     45                /* Calculate baud settings */
     46              temp = UART0_C4;
   \   00000022   0x....             LDR      R2,??DataTable0_1  ;; 0x4006a00a
   \   00000024   0x7812             LDRB     R2,[R2, #+0]
     47              temp = (temp & UART0_C4_OSR_MASK) + 1;
   \   00000026   0x06D2             LSLS     R2,R2,#+27       ;; ZeroExtS R2,R2,#+27,#+27
   \   00000028   0x0ED2             LSRS     R2,R2,#+27
   \   0000002A   0x1C52             ADDS     R2,R2,#+1
     48              sbr = (uint16)((uart0clk)/(baud * (temp)));
   \   0000002C   0xB2D2             UXTB     R2,R2
   \   0000002E   0x4351             MULS     R1,R2,R1
   \   00000030   0x.... 0x....      BL       __aeabi_idiv
     49              
     50                  
     51              /* Save off the current value of the uartx_BDH except for the SBR field */
     52              temp = UART0_BDH_REG(uartch) & ~(UART0_BDH_SBR(0x1F));
   \   00000034   0x7821             LDRB     R1,[R4, #+0]
   \   00000036   0x22E0             MOVS     R2,#+224
   \   00000038   0x400A             ANDS     R2,R2,R1
     53             
     54              UART0_BDH_REG(uartch) = temp |  UART0_BDH_SBR(((sbr & 0x1F00) >> 8));
   \   0000003A   0x0001             MOVS     R1,R0
   \   0000003C   0xB289             UXTH     R1,R1
   \   0000003E   0x0A09             LSRS     R1,R1,#+8
   \   00000040   0x06C9             LSLS     R1,R1,#+27       ;; ZeroExtS R1,R1,#+27,#+27
   \   00000042   0x0EC9             LSRS     R1,R1,#+27
   \   00000044   0x4311             ORRS     R1,R1,R2
   \   00000046   0x7021             STRB     R1,[R4, #+0]
     55              UART0_BDL_REG(uartch) = (uint8)(sbr & UART0_BDL_SBR_MASK);
   \   00000048   0x7060             STRB     R0,[R4, #+1]
     56          
     57              /* Enable receiver and transmitter */
     58              UART0_C2_REG(uartch) |= (UART0_C2_TE_MASK
     59                        		  | UART0_C2_RE_MASK );
   \   0000004A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000004C   0x210C             MOVS     R1,#+12
   \   0000004E   0x4301             ORRS     R1,R1,R0
   \   00000050   0x70E1             STRB     R1,[R4, #+3]
     60              
     61          }
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
     62          /********************************************************************/
     63          /*
     64           * Wait for a character to be received on the specified uart
     65           *
     66           * Parameters:
     67           *  channel      uart channel to read from
     68           *
     69           * Return Values:
     70           *  the received character
     71           */

   \                                 In section .text, align 2, keep-with-next
     72          char uart0_getchar (UART0_MemMapPtr channel)
     73          {
   \                     uart0_getchar:
   \   00000000   0xB500             PUSH     {LR}
     74                /* Wait until character has been received */
     75                while (!(UART0_S1_REG(channel) & UART0_S1_RDRF_MASK));
   \                     ??uart0_getchar_0:
   \   00000002   0x7901             LDRB     R1,[R0, #+4]
   \   00000004   0x0689             LSLS     R1,R1,#+26
   \   00000006   0xD5FC             BPL      ??uart0_getchar_0
     76              
     77                /* Return the 8-bit data from the receiver */
     78                return UART0_D_REG(channel);
   \   00000008   0x79C0             LDRB     R0,[R0, #+7]
   \   0000000A   0xBD00             POP      {PC}             ;; return
     79          }
     80          /********************************************************************/
     81          /*
     82           * Wait for space in the uart Tx FIFO and then send a character
     83           *
     84           * Parameters:
     85           *  channel      uart channel to send to
     86           *  ch			 character to send
     87           */ 

   \                                 In section .text, align 2, keep-with-next
     88          void uart0_putchar (UART0_MemMapPtr channel, char ch)
     89          {
   \                     uart0_putchar:
   \   00000000   0xB500             PUSH     {LR}
     90                /* Wait until space is available in the FIFO */
     91                while(!(UART0_S1_REG(channel) & UART0_S1_TDRE_MASK));
   \                     ??uart0_putchar_0:
   \   00000002   0x7902             LDRB     R2,[R0, #+4]
   \   00000004   0x0612             LSLS     R2,R2,#+24
   \   00000006   0xD5FC             BPL      ??uart0_putchar_0
     92              
     93                /* Send the character */
     94                UART0_D_REG(channel) = (uint8)ch;
   \   00000008   0x71C1             STRB     R1,[R0, #+7]
     95              
     96           }
   \   0000000A   0xBD00             POP      {PC}             ;; return
     97          /********************************************************************/
     98          /*
     99           * Check to see if a character has been received
    100           *
    101           * Parameters:
    102           *  channel      uart channel to check for a character
    103           *
    104           * Return values:
    105           *  0       No character received
    106           *  1       Character has been received
    107           */

   \                                 In section .text, align 2, keep-with-next
    108          int uart0_getchar_present (UART0_MemMapPtr channel)
    109          {
    110              return (UART0_S1_REG(channel) & UART0_S1_RDRF_MASK);
   \                     uart0_getchar_present:
   \   00000000   0x7900             LDRB     R0,[R0, #+4]
   \   00000002   0x2120             MOVS     R1,#+32
   \   00000004   0x4008             ANDS     R0,R0,R1
   \   00000006   0x4770             BX       LR               ;; return
    111          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x4006A00A         DC32     0x4006a00a
    112          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        4  uart0_getchar
        0  uart0_getchar_present
        8  uart0_init
             8 -> __aeabi_idiv
        4  uart0_putchar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
      12  uart0_getchar
       8  uart0_getchar_present
      84  uart0_init
      12  uart0_putchar

 
 124 bytes in section .text
 
 124 bytes of CODE memory

Errors: none
Warnings: none
