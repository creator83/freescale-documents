###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.3.54009/W32 for ARM     18/Feb/2013  16:57:30 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\drivers\rcm\rcm.c                           #
#    Command line =  "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\drivers\rcm\rcm.c" -D IAR -D FRDM -D EX2    #
#                    -lCN "D:\Profiles\B38350\My Documents\App                #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -lB "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -o "D:\Profiles\B38350\My Documents\App              #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \" --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0+ -e --fpu=None           #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    rojects\DualChannel_Experiment\" -I                      #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    ommon\" -I "D:\Profiles\B38350\My Documents\App          #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\" -I "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\headers\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\llwu\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\adc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\lptmr\" -I "D:\Profiles\B38350\My Documents\App   #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\mcg\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\pmc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rcm\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rtc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\smc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\wdog\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    latforms\" -I "D:\Profiles\B38350\My Documents\App       #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\rcm.lst                                                #
#    Object file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \rcm.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B38350\My Documents\App Notes\Kinetis\L Series\CMP pin sampling\Example Projects\src\drivers\rcm\rcm.c
      1          /*
      2           * File:        rcm.c
      3           * Purpose:     Provides routines for the reset controller module
      4           *              
      5           */
      6          
      7          #include "common.h"
      8          #include "rcm.h"
      9          
     10          /* OutSRS routine - checks the value in the SRS registers and sends
     11           * messages to the terminal announcing the status at the start of the 
     12           * code.
     13           */

   \                                 In section .text, align 4, keep-with-next
     14          void outSRS(void){                         //[outSRS]
   \                     outSRS:
   \   00000000   0xB580             PUSH     {R7,LR}
     15          
     16            
     17          	if (RCM_SRS1 & RCM_SRS1_SACKERR_MASK)
   \   00000002   0x4859             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x0680             LSLS     R0,R0,#+26
   \   00000008   0xD502             BPL      ??outSRS_1
     18          		printf("Stop Mode Acknowledge Error Reset\n");
   \   0000000A   0x4858             LDR      R0,??outSRS_0+0x4
   \   0000000C   0x.... 0x....      BL       printf
     19          	if (RCM_SRS1 & RCM_SRS1_MDM_AP_MASK)
   \                     ??outSRS_1:
   \   00000010   0x4855             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x0700             LSLS     R0,R0,#+28
   \   00000016   0xD502             BPL      ??outSRS_2
     20          		printf("MDM-AP Reset\n");
   \   00000018   0x4855             LDR      R0,??outSRS_0+0x8
   \   0000001A   0x.... 0x....      BL       printf
     21          	if (RCM_SRS1 & RCM_SRS1_SW_MASK)
   \                     ??outSRS_2:
   \   0000001E   0x4852             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x0740             LSLS     R0,R0,#+29
   \   00000024   0xD502             BPL      ??outSRS_3
     22          		printf("Software Reset\n");
   \   00000026   0x4853             LDR      R0,??outSRS_0+0xC
   \   00000028   0x.... 0x....      BL       printf
     23          	if (RCM_SRS1 & RCM_SRS1_LOCKUP_MASK)
   \                     ??outSRS_3:
   \   0000002C   0x484E             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x0780             LSLS     R0,R0,#+30
   \   00000032   0xD502             BPL      ??outSRS_4
     24          		printf("Core Lockup Event Reset\n");
   \   00000034   0x4850             LDR      R0,??outSRS_0+0x10
   \   00000036   0x.... 0x....      BL       printf
     25          	
     26          	if (RCM_SRS0 & RCM_SRS0_POR_MASK)
   \                     ??outSRS_4:
   \   0000003A   0x4850             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x0600             LSLS     R0,R0,#+24
   \   00000040   0xD502             BPL      ??outSRS_5
     27          		printf("Power-on Reset\n");
   \   00000042   0x484F             LDR      R0,??outSRS_0+0x18
   \   00000044   0x.... 0x....      BL       printf
     28          	if (RCM_SRS0 & RCM_SRS0_PIN_MASK)
   \                     ??outSRS_5:
   \   00000048   0x484C             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x0640             LSLS     R0,R0,#+25
   \   0000004E   0xD502             BPL      ??outSRS_6
     29          		printf("External Pin Reset\n");
   \   00000050   0x484C             LDR      R0,??outSRS_0+0x1C
   \   00000052   0x.... 0x....      BL       printf
     30          	if (RCM_SRS0 & RCM_SRS0_WDOG_MASK)
   \                     ??outSRS_6:
   \   00000056   0x4849             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x0680             LSLS     R0,R0,#+26
   \   0000005C   0xD502             BPL      ??outSRS_7
     31          		printf("Watchdog(COP) Reset\n");
   \   0000005E   0x484A             LDR      R0,??outSRS_0+0x20
   \   00000060   0x.... 0x....      BL       printf
     32          	if (RCM_SRS0 & RCM_SRS0_LOC_MASK)
   \                     ??outSRS_7:
   \   00000064   0x4845             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x0740             LSLS     R0,R0,#+29
   \   0000006A   0xD502             BPL      ??outSRS_8
     33          		printf("Loss of Clock Reset\n");
   \   0000006C   0x4847             LDR      R0,??outSRS_0+0x24
   \   0000006E   0x.... 0x....      BL       printf
     34          	if (RCM_SRS0 & RCM_SRS0_LVD_MASK)
   \                     ??outSRS_8:
   \   00000072   0x4842             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   00000074   0x7800             LDRB     R0,[R0, #+0]
   \   00000076   0x0780             LSLS     R0,R0,#+30
   \   00000078   0xD502             BPL      ??outSRS_9
     35          		printf("Low-voltage Detect Reset\n");
   \   0000007A   0x4845             LDR      R0,??outSRS_0+0x28
   \   0000007C   0x.... 0x....      BL       printf
     36          	if (RCM_SRS0 & RCM_SRS0_WAKEUP_MASK)
   \                     ??outSRS_9:
   \   00000080   0x483E             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   00000082   0x7800             LDRB     R0,[R0, #+0]
   \   00000084   0x07C0             LSLS     R0,R0,#+31
   \   00000086   0xD557             BPL      ??outSRS_10
     37                  {
     38                    printf("[outSRS]Wakeup bit set from low power mode exit\n");
   \   00000088   0x4842             LDR      R0,??outSRS_0+0x2C
   \   0000008A   0x.... 0x....      BL       printf
     39                    printf("[outSRS]SMC_PMPROT   = %#02X \r\n", (SMC_PMPROT))  ;
   \   0000008E   0x4842             LDR      R0,??outSRS_0+0x30  ;; 0x4007e000
   \   00000090   0x7801             LDRB     R1,[R0, #+0]
   \   00000092   0xB2C9             UXTB     R1,R1
   \   00000094   0x4841             LDR      R0,??outSRS_0+0x34
   \   00000096   0x.... 0x....      BL       printf
     40                    printf("[outSRS]SMC_PMCTRL   = %#02X \r\n", (SMC_PMCTRL))  ;
   \   0000009A   0x4841             LDR      R0,??outSRS_0+0x38  ;; 0x4007e001
   \   0000009C   0x7801             LDRB     R1,[R0, #+0]
   \   0000009E   0xB2C9             UXTB     R1,R1
   \   000000A0   0x4840             LDR      R0,??outSRS_0+0x3C
   \   000000A2   0x.... 0x....      BL       printf
     41                    printf("[outSRS]SMC_STOPCTRL   = %#02X \r\n", (SMC_STOPCTRL))  ;
   \   000000A6   0x4840             LDR      R0,??outSRS_0+0x40  ;; 0x4007e002
   \   000000A8   0x7801             LDRB     R1,[R0, #+0]
   \   000000AA   0xB2C9             UXTB     R1,R1
   \   000000AC   0x483F             LDR      R0,??outSRS_0+0x44
   \   000000AE   0x.... 0x....      BL       printf
     42                    printf("[outSRS]SMC_PMSTAT   = %#02X \r\n", (SMC_PMSTAT))  ;
   \   000000B2   0x483F             LDR      R0,??outSRS_0+0x48  ;; 0x4007e003
   \   000000B4   0x7801             LDRB     R1,[R0, #+0]
   \   000000B6   0xB2C9             UXTB     R1,R1
   \   000000B8   0x483E             LDR      R0,??outSRS_0+0x4C
   \   000000BA   0x.... 0x....      BL       printf
     43          
     44                    if ((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 3)
   \   000000BE   0x4838             LDR      R0,??outSRS_0+0x38  ;; 0x4007e001
   \   000000C0   0x7800             LDRB     R0,[R0, #+0]
   \   000000C2   0xB2C0             UXTB     R0,R0
   \   000000C4   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   000000C6   0x0F40             LSRS     R0,R0,#+29
   \   000000C8   0x2803             CMP      R0,#+3
   \   000000CA   0xD102             BNE      ??outSRS_11
     45                      printf("[outSRS] LLS exit \n") ;
   \   000000CC   0x483A             LDR      R0,??outSRS_0+0x50
   \   000000CE   0x.... 0x....      BL       printf
     46                    if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 1))
   \                     ??outSRS_11:
   \   000000D2   0x4833             LDR      R0,??outSRS_0+0x38  ;; 0x4007e001
   \   000000D4   0x7800             LDRB     R0,[R0, #+0]
   \   000000D6   0xB2C0             UXTB     R0,R0
   \   000000D8   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   000000DA   0x0F40             LSRS     R0,R0,#+29
   \   000000DC   0x2804             CMP      R0,#+4
   \   000000DE   0xD109             BNE      ??outSRS_12
   \   000000E0   0x4831             LDR      R0,??outSRS_0+0x40  ;; 0x4007e002
   \   000000E2   0x7800             LDRB     R0,[R0, #+0]
   \   000000E4   0xB2C0             UXTB     R0,R0
   \   000000E6   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   000000E8   0x0F40             LSRS     R0,R0,#+29
   \   000000EA   0x2801             CMP      R0,#+1
   \   000000EC   0xD102             BNE      ??outSRS_12
     47                      printf("[outSRS] VLLS1 exit \n") ;
   \   000000EE   0x4833             LDR      R0,??outSRS_0+0x54
   \   000000F0   0x.... 0x....      BL       printf
     48                    if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 2))
   \                     ??outSRS_12:
   \   000000F4   0x482A             LDR      R0,??outSRS_0+0x38  ;; 0x4007e001
   \   000000F6   0x7800             LDRB     R0,[R0, #+0]
   \   000000F8   0xB2C0             UXTB     R0,R0
   \   000000FA   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   000000FC   0x0F40             LSRS     R0,R0,#+29
   \   000000FE   0x2804             CMP      R0,#+4
   \   00000100   0xD109             BNE      ??outSRS_13
   \   00000102   0x4829             LDR      R0,??outSRS_0+0x40  ;; 0x4007e002
   \   00000104   0x7800             LDRB     R0,[R0, #+0]
   \   00000106   0xB2C0             UXTB     R0,R0
   \   00000108   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   0000010A   0x0F40             LSRS     R0,R0,#+29
   \   0000010C   0x2802             CMP      R0,#+2
   \   0000010E   0xD102             BNE      ??outSRS_13
     49                      printf("[outSRS] VLLS2 exit \n") ;
   \   00000110   0x482B             LDR      R0,??outSRS_0+0x58
   \   00000112   0x.... 0x....      BL       printf
     50                    if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 3))
   \                     ??outSRS_13:
   \   00000116   0x4822             LDR      R0,??outSRS_0+0x38  ;; 0x4007e001
   \   00000118   0x7800             LDRB     R0,[R0, #+0]
   \   0000011A   0xB2C0             UXTB     R0,R0
   \   0000011C   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   0000011E   0x0F40             LSRS     R0,R0,#+29
   \   00000120   0x2804             CMP      R0,#+4
   \   00000122   0xD109             BNE      ??outSRS_10
   \   00000124   0x4820             LDR      R0,??outSRS_0+0x40  ;; 0x4007e002
   \   00000126   0x7800             LDRB     R0,[R0, #+0]
   \   00000128   0xB2C0             UXTB     R0,R0
   \   0000012A   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   0000012C   0x0F40             LSRS     R0,R0,#+29
   \   0000012E   0x2803             CMP      R0,#+3
   \   00000130   0xD102             BNE      ??outSRS_10
     51                      printf("[outSRS] VLLS3 exit \n") ; 
   \   00000132   0x4824             LDR      R0,??outSRS_0+0x5C
   \   00000134   0x.... 0x....      BL       printf
     52          	}
     53          
     54                  if ((RCM_SRS0 == 0) && (RCM_SRS1 == 0)) 
   \                     ??outSRS_10:
   \   00000138   0x4810             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   0000013A   0x7800             LDRB     R0,[R0, #+0]
   \   0000013C   0xB2C0             UXTB     R0,R0
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xD110             BNE      ??outSRS_14
   \   00000142   0x4809             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   00000144   0x7800             LDRB     R0,[R0, #+0]
   \   00000146   0xB2C0             UXTB     R0,R0
   \   00000148   0x2800             CMP      R0,#+0
   \   0000014A   0xD10B             BNE      ??outSRS_14
     55                  {
     56          	       printf("[outSRS]RCM_SRS0 is ZERO   = %#02X \r\n", (RCM_SRS0))  ;
   \   0000014C   0x480B             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   0000014E   0x7801             LDRB     R1,[R0, #+0]
   \   00000150   0xB2C9             UXTB     R1,R1
   \   00000152   0x481D             LDR      R0,??outSRS_0+0x60
   \   00000154   0x.... 0x....      BL       printf
     57          	       printf("[outSRS]RCM_SRS1 is ZERO   = %#02X \r\n", (RCM_SRS1))  ;	 
   \   00000158   0x4803             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   0000015A   0x7801             LDRB     R1,[R0, #+0]
   \   0000015C   0xB2C9             UXTB     R1,R1
   \   0000015E   0x481B             LDR      R0,??outSRS_0+0x64
   \   00000160   0x.... 0x....      BL       printf
     58                  }
     59            }
   \                     ??outSRS_14:
   \   00000164   0xBD01             POP      {R0,PC}          ;; return
   \   00000166   0xBF00             Nop      
   \                     ??outSRS_0:
   \   00000168   0x4007F001         DC32     0x4007f001
   \   0000016C   0x........         DC32     `?<Constant "Stop Mode Acknowledge...">`
   \   00000170   0x........         DC32     `?<Constant "MDM-AP Reset\\n">`
   \   00000174   0x........         DC32     `?<Constant "Software Reset\\n">`
   \   00000178   0x........         DC32     `?<Constant "Core Lockup Event Reset\\n">`
   \   0000017C   0x4007F000         DC32     0x4007f000
   \   00000180   0x........         DC32     `?<Constant "Power-on Reset\\n">`
   \   00000184   0x........         DC32     `?<Constant "External Pin Reset\\n">`
   \   00000188   0x........         DC32     `?<Constant "Watchdog(COP) Reset\\n">`
   \   0000018C   0x........         DC32     `?<Constant "Loss of Clock Reset\\n">`
   \   00000190   0x........         DC32     `?<Constant "Low-voltage Detect Re...">`
   \   00000194   0x........         DC32     `?<Constant "[outSRS]Wakeup bit se...">`
   \   00000198   0x4007E000         DC32     0x4007e000
   \   0000019C   0x........         DC32     `?<Constant "[outSRS]SMC_PMPROT   ...">`
   \   000001A0   0x4007E001         DC32     0x4007e001
   \   000001A4   0x........         DC32     `?<Constant "[outSRS]SMC_PMCTRL   ...">`
   \   000001A8   0x4007E002         DC32     0x4007e002
   \   000001AC   0x........         DC32     `?<Constant "[outSRS]SMC_STOPCTRL ...">`
   \   000001B0   0x4007E003         DC32     0x4007e003
   \   000001B4   0x........         DC32     `?<Constant "[outSRS]SMC_PMSTAT   ...">`
   \   000001B8   0x........         DC32     `?<Constant "[outSRS] LLS exit \\n">`
   \   000001BC   0x........         DC32     `?<Constant "[outSRS] VLLS1 exit \\n">`
   \   000001C0   0x........         DC32     `?<Constant "[outSRS] VLLS2 exit \\n">`
   \   000001C4   0x........         DC32     `?<Constant "[outSRS] VLLS3 exit \\n">`
   \   000001C8   0x........         DC32     `?<Constant "[outSRS]RCM_SRS0 is Z...">`
   \   000001CC   0x........         DC32     `?<Constant "[outSRS]RCM_SRS1 is Z...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "Stop Mode Acknowledge...">`:
   \   00000000   0x53 0x74          DC8 "Stop Mode Acknowledge Error Reset\012"
   \              0x6F 0x70    
   \              0x20 0x4D    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x41 0x63    
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6C 0x65    
   \              0x64 0x67    
   \              0x65 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MDM-AP Reset\\n">`:
   \   00000000   0x4D 0x44          DC8 "MDM-AP Reset\012"
   \              0x4D 0x2D    
   \              0x41 0x50    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Software Reset\\n">`:
   \   00000000   0x53 0x6F          DC8 "Software Reset\012"
   \              0x66 0x74    
   \              0x77 0x61    
   \              0x72 0x65    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Core Lockup Event Reset\\n">`:
   \   00000000   0x43 0x6F          DC8 "Core Lockup Event Reset\012"
   \              0x72 0x65    
   \              0x20 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x75    
   \              0x70 0x20    
   \              0x45 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Power-on Reset\\n">`:
   \   00000000   0x50 0x6F          DC8 "Power-on Reset\012"
   \              0x77 0x65    
   \              0x72 0x2D    
   \              0x6F 0x6E    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "External Pin Reset\\n">`:
   \   00000000   0x45 0x78          DC8 "External Pin Reset\012"
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x50    
   \              0x69 0x6E    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Watchdog(COP) Reset\\n">`:
   \   00000000   0x57 0x61          DC8 "Watchdog(COP) Reset\012"
   \              0x74 0x63    
   \              0x68 0x64    
   \              0x6F 0x67    
   \              0x28 0x43    
   \              0x4F 0x50    
   \              0x29 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Loss of Clock Reset\\n">`:
   \   00000000   0x4C 0x6F          DC8 "Loss of Clock Reset\012"
   \              0x73 0x73    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x43 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "Low-voltage Detect Re...">`:
   \   00000000   0x4C 0x6F          DC8 "Low-voltage Detect Reset\012"
   \              0x77 0x2D    
   \              0x76 0x6F    
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x44 0x65    
   \              0x74 0x65    
   \              0x63 0x74    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "[outSRS]Wakeup bit se...">`:
   \   00000000   0x5B 0x6F          DC8 "[outSRS]Wakeup bit set from low power mode exit\012"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x57 0x61    
   \              0x6B 0x65    
   \              0x75 0x70    
   \              0x20 0x62    
   \              0x69 0x74    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x20 0x66    
   \              0x72 0x6F    
   \              0x6D 0x20    
   \              0x6C 0x6F    
   \              0x77 0x20    
   \              0x70 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "[outSRS]SMC_PMPROT   ...">`:
   \   00000000   0x5B 0x6F          DC8 "[outSRS]SMC_PMPROT   = %#02X \015\012"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x53 0x4D    
   \              0x43 0x5F    
   \              0x50 0x4D    
   \              0x50 0x52    
   \              0x4F 0x54    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x23 0x30    
   \              0x32 0x58    
   \              0x20 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "[outSRS]SMC_PMCTRL   ...">`:
   \   00000000   0x5B 0x6F          DC8 "[outSRS]SMC_PMCTRL   = %#02X \015\012"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x53 0x4D    
   \              0x43 0x5F    
   \              0x50 0x4D    
   \              0x43 0x54    
   \              0x52 0x4C    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x23 0x30    
   \              0x32 0x58    
   \              0x20 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "[outSRS]SMC_STOPCTRL ...">`:
   \   00000000   0x5B 0x6F          DC8 "[outSRS]SMC_STOPCTRL   = %#02X \015\012"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x53 0x4D    
   \              0x43 0x5F    
   \              0x53 0x54    
   \              0x4F 0x50    
   \              0x43 0x54    
   \              0x52 0x4C    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x23 0x30    
   \              0x32 0x58    
   \              0x20 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "[outSRS]SMC_PMSTAT   ...">`:
   \   00000000   0x5B 0x6F          DC8 "[outSRS]SMC_PMSTAT   = %#02X \015\012"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x53 0x4D    
   \              0x43 0x5F    
   \              0x50 0x4D    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x23 0x30    
   \              0x32 0x58    
   \              0x20 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "[outSRS] LLS exit \\n">`:
   \   00000000   0x5B 0x6F          DC8 "[outSRS] LLS exit \012"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x20 0x4C    
   \              0x4C 0x53    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "[outSRS] VLLS1 exit \\n">`:
   \   00000000   0x5B 0x6F          DC8 "[outSRS] VLLS1 exit \012"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x20 0x56    
   \              0x4C 0x4C    
   \              0x53 0x31    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "[outSRS] VLLS2 exit \\n">`:
   \   00000000   0x5B 0x6F          DC8 "[outSRS] VLLS2 exit \012"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x20 0x56    
   \              0x4C 0x4C    
   \              0x53 0x32    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "[outSRS] VLLS3 exit \\n">`:
   \   00000000   0x5B 0x6F          DC8 "[outSRS] VLLS3 exit \012"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x20 0x56    
   \              0x4C 0x4C    
   \              0x53 0x33    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x74 0x20    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "[outSRS]RCM_SRS0 is Z...">`:
   \   00000000   0x5B 0x6F          DC8 "[outSRS]RCM_SRS0 is ZERO   = %#02X \015\012"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x52 0x43    
   \              0x4D 0x5F    
   \              0x53 0x52    
   \              0x53 0x30    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x5A 0x45    
   \              0x52 0x4F    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x23 0x30    
   \              0x32 0x58    
   \              0x20 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "[outSRS]RCM_SRS1 is Z...">`:
   \   00000000   0x5B 0x6F          DC8 "[outSRS]RCM_SRS1 is ZERO   = %#02X \015\012"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x52 0x43    
   \              0x4D 0x5F    
   \              0x53 0x52    
   \              0x53 0x31    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x5A 0x45    
   \              0x52 0x4F    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x23 0x30    
   \              0x32 0x58    
   \              0x20 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0
     60          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  outSRS
             8 -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "Core Lockup Event Reset\n">
      20  ?<Constant "External Pin Reset\n">
      24  ?<Constant "Loss of Clock Reset\n">
      28  ?<Constant "Low-voltage Detect Re...">
      16  ?<Constant "MDM-AP Reset\n">
      16  ?<Constant "Power-on Reset\n">
      16  ?<Constant "Software Reset\n">
      36  ?<Constant "Stop Mode Acknowledge...">
      24  ?<Constant "Watchdog(COP) Reset\n">
      20  ?<Constant "[outSRS] LLS exit \n">
      24  ?<Constant "[outSRS] VLLS1 exit \n">
      24  ?<Constant "[outSRS] VLLS2 exit \n">
      24  ?<Constant "[outSRS] VLLS3 exit \n">
      40  ?<Constant "[outSRS]RCM_SRS0 is Z...">
      40  ?<Constant "[outSRS]RCM_SRS1 is Z...">
      32  ?<Constant "[outSRS]SMC_PMCTRL   ...">
      32  ?<Constant "[outSRS]SMC_PMPROT   ...">
      32  ?<Constant "[outSRS]SMC_PMSTAT   ...">
      36  ?<Constant "[outSRS]SMC_STOPCTRL ...">
      52  ?<Constant "[outSRS]Wakeup bit se...">
     464  outSRS

 
 564 bytes in section .rodata
 464 bytes in section .text
 
 464 bytes of CODE  memory
 564 bytes of CONST memory

Errors: none
Warnings: none
