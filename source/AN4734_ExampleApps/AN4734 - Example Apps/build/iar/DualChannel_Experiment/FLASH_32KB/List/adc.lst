###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.3.54009/W32 for ARM     18/Feb/2013  16:57:29 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\drivers\adc\adc.c                           #
#    Command line =  "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\drivers\adc\adc.c" -D IAR -D FRDM -D EX2    #
#                    -lCN "D:\Profiles\B38350\My Documents\App                #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -lB "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -o "D:\Profiles\B38350\My Documents\App              #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \" --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0+ -e --fpu=None           #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    rojects\DualChannel_Experiment\" -I                      #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    ommon\" -I "D:\Profiles\B38350\My Documents\App          #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\" -I "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\headers\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\llwu\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\adc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\lptmr\" -I "D:\Profiles\B38350\My Documents\App   #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\mcg\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\pmc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rcm\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rtc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\smc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\wdog\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    latforms\" -I "D:\Profiles\B38350\My Documents\App       #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\adc.lst                                                #
#    Object file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \adc.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B38350\My Documents\App Notes\Kinetis\L Series\CMP pin sampling\Example Projects\src\drivers\adc\adc.c
      1          /*
      2           * File:        adc.c
      3           * Purpose:     Provide common adc routines
      4           *
      5           * Notes:       
      6           *              
      7           */
      8          
      9          #include "common.h"
     10          #include "adc.h"
     11          
     12          /****************************************************************
     13                            initial the ADC module
     14          *****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     15          void InitADC( void )
     16          {
     17              SIM_SCGC6 |= SIM_SCGC6_ADC0_MASK;  // enable ADC0 clock
   \                     InitADC:
   \   00000000   0x....             LDR      R0,??DataTable1  ;; 0x4004803c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2180             MOVS     R1,#+128
   \   00000006   0x0509             LSLS     R1,R1,#+20       ;; #+134217728
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable1  ;; 0x4004803c
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     18          
     19              ADC0_CFG1 = ADC_CFG1_ADIV(1)|
     20            		ADC_CFG1_MODE(1)|
     21            		ADC_CFG1_ADICLK(3);
   \   0000000E   0x....             LDR      R0,??DataTable1_1  ;; 0x4003b008
   \   00000010   0x2127             MOVS     R1,#+39
   \   00000012   0x6001             STR      R1,[R0, #+0]
     22            	
     23          }
   \   00000014   0x4770             BX       LR               ;; return
     24          
     25          /**********************************************************************
     26          *                  ADC Calibration routine
     27          **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     28          unsigned int ADCAutoCalibration(ADC_MemMapPtr adcmap)
     29          {
   \                     ADCAutoCalibration:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     30            unsigned short cal_var;
     31              
     32            ADC_SC2_REG(adcmap) &=  ~ADC_SC2_ADTRG_MASK ; // Enable Software Conversion Trigger for Calibration Process    - ADC0_SC2 = ADC0_SC2 | ADC_SC2_ADTRGW(0);   
   \   00000004   0x6A20             LDR      R0,[R4, #+32]
   \   00000006   0x2140             MOVS     R1,#+64
   \   00000008   0x4388             BICS     R0,R0,R1
   \   0000000A   0x6220             STR      R0,[R4, #+32]
     33            ADC_SC3_REG(adcmap) &= ( ~ADC_SC3_ADCO_MASK & ~ADC_SC3_AVGS_MASK ); // set single conversion, clear avgs bitfield for next writing
   \   0000000C   0x6A60             LDR      R0,[R4, #+36]
   \   0000000E   0x210B             MOVS     R1,#+11
   \   00000010   0x4388             BICS     R0,R0,R1
   \   00000012   0x6260             STR      R0,[R4, #+36]
     34            ADC_SC3_REG(adcmap) |= ( ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(AVGS_32) );  // Turn averaging ON and set at max value ( 32 )
   \   00000014   0x6A60             LDR      R0,[R4, #+36]
   \   00000016   0x2107             MOVS     R1,#+7
   \   00000018   0x4301             ORRS     R1,R1,R0
   \   0000001A   0x6261             STR      R1,[R4, #+36]
     35            
     36            
     37            ADC_SC3_REG(adcmap) |= ADC_SC3_CAL_MASK ;      // Start CAL
   \   0000001C   0x6A60             LDR      R0,[R4, #+36]
   \   0000001E   0x2180             MOVS     R1,#+128
   \   00000020   0x4301             ORRS     R1,R1,R0
   \   00000022   0x6261             STR      R1,[R4, #+36]
     38            while ( (ADC_SC1_REG(adcmap,A) & ADC_SC1_COCO_MASK ) == COCO_NOT ); // Wait calibration end
   \                     ??ADCAutoCalibration_0:
   \   00000024   0x6820             LDR      R0,[R4, #+0]
   \   00000026   0x0600             LSLS     R0,R0,#+24
   \   00000028   0xD5FC             BPL      ??ADCAutoCalibration_0
     39            	
     40            if ((ADC_SC3_REG(adcmap)& ADC_SC3_CALF_MASK) == CALF_FAIL )
   \   0000002A   0x6A60             LDR      R0,[R4, #+36]
   \   0000002C   0x0640             LSLS     R0,R0,#+25
   \   0000002E   0xD501             BPL      ??ADCAutoCalibration_1
     41            {  
     42             return(0);    // Check for Calibration fail error and return 
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE028             B        ??ADCAutoCalibration_2
     43            }
     44            // Calculate plus-side calibration
     45            cal_var = 0x00;
   \                     ??ADCAutoCalibration_1:
   \   00000034   0x2100             MOVS     R1,#+0
     46            
     47            cal_var =  ADC_CLP0_REG(adcmap); 
   \   00000036   0x6CE0             LDR      R0,[R4, #+76]
   \   00000038   0x0001             MOVS     R1,R0
     48            cal_var += ADC_CLP1_REG(adcmap);
   \   0000003A   0x6CA0             LDR      R0,[R4, #+72]
   \   0000003C   0x1809             ADDS     R1,R1,R0
     49            cal_var += ADC_CLP2_REG(adcmap);
   \   0000003E   0x6C60             LDR      R0,[R4, #+68]
   \   00000040   0x1809             ADDS     R1,R1,R0
     50            cal_var += ADC_CLP3_REG(adcmap);
   \   00000042   0x6C20             LDR      R0,[R4, #+64]
   \   00000044   0x1809             ADDS     R1,R1,R0
     51            cal_var += ADC_CLP4_REG(adcmap);
   \   00000046   0x6BE0             LDR      R0,[R4, #+60]
   \   00000048   0x1809             ADDS     R1,R1,R0
     52            cal_var += ADC_CLPS_REG(adcmap);
   \   0000004A   0x6BA0             LDR      R0,[R4, #+56]
   \   0000004C   0x1809             ADDS     R1,R1,R0
     53          
     54            cal_var = cal_var/2;
   \   0000004E   0xB289             UXTH     R1,R1
   \   00000050   0x0008             MOVS     R0,R1
   \   00000052   0x2102             MOVS     R1,#+2
   \   00000054   0x.... 0x....      BL       __aeabi_idiv
   \   00000058   0x0001             MOVS     R1,R0
     55            cal_var |= 0x8000; // Set MSB
   \   0000005A   0x0008             MOVS     R0,R1
   \   0000005C   0x2180             MOVS     R1,#+128
   \   0000005E   0x0209             LSLS     R1,R1,#+8        ;; #+32768
   \   00000060   0x4301             ORRS     R1,R1,R0
     56          
     57            ADC_PG_REG(adcmap) = ADC_PG_PG(cal_var);
   \   00000062   0xB289             UXTH     R1,R1
   \   00000064   0x62E1             STR      R1,[R4, #+44]
     58           
     59          
     60            // Calculate minus-side calibration
     61            cal_var = 0x00;
   \   00000066   0x2100             MOVS     R1,#+0
     62          
     63            cal_var = cal_var/2;
   \   00000068   0xB289             UXTH     R1,R1
   \   0000006A   0x0008             MOVS     R0,R1
   \   0000006C   0x2102             MOVS     R1,#+2
   \   0000006E   0x.... 0x....      BL       __aeabi_idiv
   \   00000072   0x0001             MOVS     R1,R0
     64          
     65            cal_var |= 0x8000; // Set MSB
   \   00000074   0x0008             MOVS     R0,R1
   \   00000076   0x2180             MOVS     R1,#+128
   \   00000078   0x0209             LSLS     R1,R1,#+8        ;; #+32768
   \   0000007A   0x4301             ORRS     R1,R1,R0
     66          
     67            //ADC_MG_REG(adcmap) = ADC_MG_MG(cal_var); 
     68            
     69            ADC_SC3_REG(adcmap) &= ~ADC_SC3_CAL_MASK ; /* Clear CAL bit */
   \   0000007C   0x6A60             LDR      R0,[R4, #+36]
   \   0000007E   0x2280             MOVS     R2,#+128
   \   00000080   0x4390             BICS     R0,R0,R2
   \   00000082   0x6260             STR      R0,[R4, #+36]
     70            
     71            return 1;
   \   00000084   0x2001             MOVS     R0,#+1
   \                     ??ADCAutoCalibration_2:
   \   00000086   0xBD10             POP      {R4,PC}          ;; return
     72          }
     73          
     74                    
     75          /****************************************************************
     76                                software trigger channel x
     77          *****************************************************************/

   \                                 In section .textrw, align 2, keep-with-next
     78          unsigned char TriggerADC(unsigned char Channel)
     79          {
   \                     TriggerADC:
   \   00000000   0xB500             PUSH     {LR}
     80            
     81            if(Channel == 0x1B)                                          // Bandgap is selected as input
   \   00000002   0xB2C0             UXTB     R0,R0
   \   00000004   0x281B             CMP      R0,#+27
   \   00000006   0xD105             BNE      ??TriggerADC_0
     82                PMC_REGSC |= PMC_REGSC_BGBE_MASK;                        // Bandgap buffer enabled
   \   00000008   0x....             LDR      R1,??DataTable6  ;; 0x4007d002
   \   0000000A   0x7809             LDRB     R1,[R1, #+0]
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0x430A             ORRS     R2,R2,R1
   \   00000010   0x....             LDR      R1,??DataTable6  ;; 0x4007d002
   \   00000012   0x700A             STRB     R2,[R1, #+0]
     83             ADC0_SC1A = Channel;                   // update the channel value
   \                     ??TriggerADC_0:
   \   00000014   0x....             LDR      R1,??DataTable6_1  ;; 0x4003b000
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x6008             STR      R0,[R1, #+0]
     84             return 1;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xBD00             POP      {PC}             ;; return
     85          }
     86          
     87          /****************************************************************
     88                                ADC Read
     89          *****************************************************************/

   \                                 In section .textrw, align 2, keep-with-next
     90          unsigned int ReadADCPoll(void)
     91          {
   \                     ReadADCPoll:
   \   00000000   0xB500             PUSH     {LR}
     92              while((ADC0_SC1A & ADC_SC1_COCO_MASK) == 0);
   \                     ??ReadADCPoll_0:
   \   00000002   0x....             LDR      R0,??DataTable6_1  ;; 0x4003b000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0600             LSLS     R0,R0,#+24
   \   00000008   0xD5FB             BPL      ??ReadADCPoll_0
     93              //ADC0_SC1A &= ~ ADC0_SC1A_COCO_MASK;
     94              return ADC0_RA;
   \   0000000A   0x....             LDR      R0,??DataTable6_2  ;; 0x4003b010
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xBD00             POP      {PC}             ;; return
     95          }
     96          

   \                                 In section .text, align 2, keep-with-next
     97          void ADC_ISR(void)
     98          {
   \                     ADC_ISR:
   \   00000000   0xB580             PUSH     {R7,LR}
     99            printf("\n ADC sample data: %x.\n", ADC0_RA);
   \   00000002   0x....             LDR      R0,??DataTable1_2  ;; 0x4003b010
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x....             LDR      R0,??DataTable1_3
   \   00000008   0x.... 0x....      BL       printf
    100          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .textrw, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x4007D002         DC32     0x4007d002

   \                                 In section .textrw, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .textrw, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x4003B010         DC32     0x4003b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x4003B008         DC32     0x4003b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x4003B010         DC32     0x4003b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     `?<Constant "\\n ADC sample data: %x.\\n">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n ADC sample data: %x.\\n">`:
   \   00000000   0x0A 0x20          DC8 "\012 ADC sample data: %x.\012"
   \              0x41 0x44    
   \              0x43 0x20    
   \              0x73 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x3A    
   \              0x20 0x25    
   \              0x78 0x2E    
   \              0x0A 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  ADCAutoCalibration
             8 -> __aeabi_idiv
        8  ADC_ISR
             8 -> printf
        0  InitADC
        4  ReadADCPoll
        4  TriggerADC


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "\n ADC sample data: %x.\n">
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
     136  ADCAutoCalibration
      14  ADC_ISR
      22  InitADC
      16  ReadADCPoll
      30  TriggerADC

 
  24 bytes in section .rodata
 188 bytes in section .text
  58 bytes in section .textrw
 
 246 bytes of CODE  memory
  24 bytes of CONST memory

Errors: none
Warnings: none
