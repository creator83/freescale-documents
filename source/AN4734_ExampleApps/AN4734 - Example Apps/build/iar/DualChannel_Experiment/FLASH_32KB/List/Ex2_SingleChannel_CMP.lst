###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.3.54009/W32 for ARM     18/Feb/2013  16:57:28 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\projects\DualChannel_Experiment\Ex2_SingleC #
#                    hannel_CMP.c                                             #
#    Command line =  "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\projects\DualChannel_Experiment\Ex2_SingleC #
#                    hannel_CMP.c" -D IAR -D FRDM -D EX2 -lCN                 #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -lB "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -o "D:\Profiles\B38350\My Documents\App              #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \" --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0+ -e --fpu=None           #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    rojects\DualChannel_Experiment\" -I                      #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    ommon\" -I "D:\Profiles\B38350\My Documents\App          #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\" -I "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\headers\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\llwu\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\adc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\lptmr\" -I "D:\Profiles\B38350\My Documents\App   #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\mcg\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\pmc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rcm\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rtc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\smc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\wdog\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    latforms\" -I "D:\Profiles\B38350\My Documents\App       #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\Ex2_SingleChannel_CMP.lst                              #
#    Object file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \Ex2_SingleChannel_CMP.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B38350\My Documents\App Notes\Kinetis\L Series\CMP pin sampling\Example Projects\src\projects\DualChannel_Experiment\Ex2_SingleChannel_CMP.c
      1          /*
      2           * File:		KL04_ref_design_demo.c
      3           * Purpose:		Main process
      4           *
      5           */
      6          
      7          #include "common.h"
      8          #include "Ex2_SingleChannel_CMP.h"
      9          #include "smc.h"
     10          
     11          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     12          int main (void)
     13          {
   \                     main:
   \   00000000   0xB580             PUSH     {R7,LR}
     14            //uint32 temp32;
     15            //uint16 i;
     16            //uint8 temp8;
     17            int tempint;
     18                  
     19            // Configure the part to allow VLLS3 and VLPR modes.  
     20            SMC_PMPROT = (SMC_PMPROT_AVLP_MASK
     21                          | SMC_PMPROT_ALLS_MASK
     22                          | SMC_PMPROT_AVLLS_MASK);
   \   00000002   0x....             LDR      R0,??DataTable2  ;; 0x4007e000
   \   00000004   0x212A             MOVS     R1,#+42
   \   00000006   0x7001             STRB     R1,[R0, #+0]
     23            
     24            // Move to FBI mode using the 4MHz internal clock (FIRC)
     25            tempint = fei_fbi(4000000, 1);
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x....             LDR      R0,??DataTable2_1  ;; 0x3d0900
   \   0000000C   0x.... 0x....      BL       fei_fbi
     26          
     27            // If the clock frequency is not 2MHz, stop the program as there was an error. 
     28            if(tempint != 2000000)
   \   00000010   0x....             LDR      R1,??DataTable2_2  ;; 0x1e8480
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD000             BEQ      ??main_0
     29                while(1);
   \                     ??main_1:
   \   00000016   0xE7FE             B        ??main_1
     30                      
     31            // Turn off the clock monitors
     32            MCG_C6 &= ~MCG_C6_CME0_MASK;
   \                     ??main_0:
   \   00000018   0x....             LDR      R0,??DataTable2_3  ;; 0x40064005
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x21DF             MOVS     R1,#+223
   \   0000001E   0x4001             ANDS     R1,R1,R0
   \   00000020   0x....             LDR      R0,??DataTable2_3  ;; 0x40064005
   \   00000022   0x7001             STRB     R1,[R0, #+0]
     33            // Move to BLPx mode
     34            MCG_C2 |= MCG_C2_LP_MASK;
   \   00000024   0x....             LDR      R0,??DataTable2_4  ;; 0x40064001
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2102             MOVS     R1,#+2
   \   0000002A   0x4301             ORRS     R1,R1,R0
   \   0000002C   0x....             LDR      R0,??DataTable2_4  ;; 0x40064001
   \   0000002E   0x7001             STRB     R1,[R0, #+0]
     35                        
     36            
     37                      
     38            // Enable clock gates
     39            // Enable the CMP clock gating
     40            SIM_SCGC4 |= SIM_SCGC4_CMP_MASK;
   \   00000030   0x....             LDR      R0,??DataTable2_5  ;; 0x40048034
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x2180             MOVS     R1,#+128
   \   00000036   0x0309             LSLS     R1,R1,#+12       ;; #+524288
   \   00000038   0x4301             ORRS     R1,R1,R0
   \   0000003A   0x....             LDR      R0,??DataTable2_5  ;; 0x40048034
   \   0000003C   0x6001             STR      R1,[R0, #+0]
     41              
     42            // Enable the clock gate to the LPTMR
     43            SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   \   0000003E   0x....             LDR      R0,??DataTable3  ;; 0x40048038
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x4301             ORRS     R1,R1,R0
   \   00000046   0x....             LDR      R0,??DataTable3  ;; 0x40048038
   \   00000048   0x6001             STR      R1,[R0, #+0]
     44            
     45            // initialize the I/O
     46            IO_config();
   \   0000004A   0x.... 0x....      BL       IO_config
     47            
     48            // Initialize the CMP first
     49            initialize_CMP();
   \   0000004E   0x.... 0x....      BL       initialize_CMP
     50            
     51            // Initialize the LPTMR
     52            initialize_LPTMR();
   \   00000052   0x.... 0x....      BL       initialize_LPTMR
     53            
     54            // Jump to RAM Loop
     55            Run_RAM_Loop();
   \   00000056   0x.... 0x....      BL       Run_RAM_Loop
     56            
     57          }
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xBD02             POP      {R1,PC}          ;; return
     58          /********************************************************************/
     59          
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void initialize_LPTMR(void)
     62          {
     63              // Disable the LPTMR first.  For this app, the default control values are acceptable. 
     64              LPTMR0_CSR = 0x00;
   \                     initialize_LPTMR:
   \   00000000   0x....             LDR      R0,??DataTable3_1  ;; 0x40040000
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
     65              
     66              // Set the PSR to a known state
     67              LPTMR0_PSR = 0x00;
   \   00000006   0x....             LDR      R0,??DataTable2_6  ;; 0x40040004
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     68              
     69              // Setup the PSR to use the prescaler, and select the appropriate clock. 
     70              LPTMR0_PSR |= (LPTMR_PSR_PCS(1) | LPTMR_PSR_PBYP_MASK);  // If using the LPO.  
   \   0000000C   0x....             LDR      R0,??DataTable2_6  ;; 0x40040004
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2105             MOVS     R1,#+5
   \   00000012   0x4301             ORRS     R1,R1,R0
   \   00000014   0x....             LDR      R0,??DataTable2_6  ;; 0x40040004
   \   00000016   0x6001             STR      R1,[R0, #+0]
     71              
     72              // Set the Compare register for a 9 ms interval. 
     73              LPTMR0_CMR = LPTMR_CMR_COMPARE(9);
   \   00000018   0x....             LDR      R0,??DataTable2_7  ;; 0x40040008
   \   0000001A   0x2109             MOVS     R1,#+9
   \   0000001C   0x6001             STR      R1,[R0, #+0]
     74              
     75              // Write to the TCF bit to clear the TCF just in case.  
     76              LPTMR0_CSR = LPTMR_CSR_TCF_MASK;
   \   0000001E   0x....             LDR      R0,??DataTable3_1  ;; 0x40040000
   \   00000020   0x2180             MOVS     R1,#+128
   \   00000022   0x6001             STR      R1,[R0, #+0]
     77          }
   \   00000024   0x4770             BX       LR               ;; return
     78          

   \                                 In section .text, align 2, keep-with-next
     79          void initialize_CMP(void)
     80          {
   \                     initialize_CMP:
   \   00000000   0xB580             PUSH     {R7,LR}
     81              // Set CMP0_CR1 to a known state
     82              CMP0_CR1 = 0x00;
   \   00000002   0x....             LDR      R0,??DataTable3_2  ;; 0x40073001
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7001             STRB     R1,[R0, #+0]
     83              
     84              // Set CMP Filter Count and Hysteresis control to 0.  
     85              //  Filter should be disabled to allow for low lag time.   
     86              CMP0_CR0 = 0x00;
   \   00000008   0x....             LDR      R0,??DataTable2_8  ;; 0x40073000
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
     87              
     88              // Now configure CMP0_CR1 (but do not enable it!)
     89              CMP0_CR1 |= (CMP_CR1_TRIGM_MASK);   // Enable the CMP Trigger mode
   \   0000000E   0x....             LDR      R0,??DataTable3_2  ;; 0x40073001
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2120             MOVS     R1,#+32
   \   00000014   0x4301             ORRS     R1,R1,R0
   \   00000016   0x....             LDR      R0,??DataTable3_2  ;; 0x40073001
   \   00000018   0x7001             STRB     R1,[R0, #+0]
     90              
     91              // Configure the rising-edge interrupt enable bit. 
     92              CMP0_SCR |= CMP_SCR_IER_MASK;  // Look for a rising edge first!
   \   0000001A   0x....             LDR      R0,??DataTable2_9  ;; 0x40073003
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2110             MOVS     R1,#+16
   \   00000020   0x4301             ORRS     R1,R1,R0
   \   00000022   0x....             LDR      R0,??DataTable2_9  ;; 0x40073003
   \   00000024   0x7001             STRB     R1,[R0, #+0]
     93              
     94              // Configure the 6-bit DAC
     95              //  We want to use the Vin1in supply and to set the output voltage to 1/2 Vin
     96              //  DACout = (Vin/64) * (VOSEL[5:0] + 1), therefore 31 will produce DACout = 1/2 * Vin
     97              CMP0_DACCR = (CMP_DACCR_DACEN_MASK
     98                            | CMP_DACCR_VOSEL(31));
   \   00000026   0x....             LDR      R0,??DataTable2_10  ;; 0x40073004
   \   00000028   0x219F             MOVS     R1,#+159
   \   0000002A   0x7001             STRB     R1,[R0, #+0]
     99              
    100              // Select the appropriate Mux control
    101              //  
    102              //  We want to know when V0 > 50% Vcc, therefore, set the inverted input to
    103              //  be the DAC output.  Select the non-inverted input to be V0. 
    104              
    105              CMP0_MUXCR = (CMP_MUXCR_PSEL(CMP_CHANNEL_V0) | CMP_MUXCR_MSEL(CMP_DACIN_6B));
   \   0000002C   0x....             LDR      R0,??DataTable2_11  ;; 0x40073005
   \   0000002E   0x210F             MOVS     R1,#+15
   \   00000030   0x7001             STRB     R1,[R0, #+0]
    106              
    107              // Configure the LLWU to wakeup from the CMP 
    108              LLWU_ME = LLWU_ME_WUME1_MASK ;     // Enable the CMP as an LLWU Wakeup source
   \   00000032   0x....             LDR      R0,??DataTable2_12  ;; 0x4007c002
   \   00000034   0x2102             MOVS     R1,#+2
   \   00000036   0x7001             STRB     R1,[R0, #+0]
    109              
    110              // Enable LLWU IRQ
    111              enable_irq(7);
   \   00000038   0x2007             MOVS     R0,#+7
   \   0000003A   0x.... 0x....      BL       enable_irq
    112              
    113              // Enable the CMP
    114              CMP0_CR1 |= CMP_CR1_EN_MASK;
   \   0000003E   0x....             LDR      R0,??DataTable3_2  ;; 0x40073001
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x4301             ORRS     R1,R1,R0
   \   00000046   0x....             LDR      R0,??DataTable3_2  ;; 0x40073001
   \   00000048   0x7001             STRB     R1,[R0, #+0]
    115          }
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
    116          

   \                                 In section .text, align 2, keep-with-next
    117          void IO_config(void)
    118          {       
    119              // setup outputs PTA12 - PTB6
    120              
    121              // Configure PTA12 as an output and initialize this output high.  
    122              GPIOA_PDDR |= 0x1000;
   \                     IO_config:
   \   00000000   0x....             LDR      R0,??DataTable3_3  ;; 0x400ff014
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2180             MOVS     R1,#+128
   \   00000006   0x0149             LSLS     R1,R1,#+5        ;; #+4096
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable3_3  ;; 0x400ff014
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    123              GPIOA_PSOR |= 0x1000;
   \   0000000E   0x....             LDR      R0,??DataTable3_4  ;; 0x400ff004
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x2180             MOVS     R1,#+128
   \   00000014   0x0149             LSLS     R1,R1,#+5        ;; #+4096
   \   00000016   0x4301             ORRS     R1,R1,R0
   \   00000018   0x....             LDR      R0,??DataTable3_4  ;; 0x400ff004
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    124              
    125              
    126              // Configure PTB6 as an output and initialize this output low.  
    127              FGPIOB_PDDR |= 0x40;
   \   0000001C   0x....             LDR      R0,??DataTable3_5  ;; 0xf80ff054
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x2140             MOVS     R1,#+64
   \   00000022   0x4301             ORRS     R1,R1,R0
   \   00000024   0x....             LDR      R0,??DataTable3_5  ;; 0xf80ff054
   \   00000026   0x6001             STR      R1,[R0, #+0]
    128              FGPIOB_PCOR |= 0x40;
   \   00000028   0x....             LDR      R0,??DataTable3_6  ;; 0xf80ff048
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x2140             MOVS     R1,#+64
   \   0000002E   0x4301             ORRS     R1,R1,R0
   \   00000030   0x....             LDR      R0,??DataTable3_6  ;; 0xf80ff048
   \   00000032   0x6001             STR      R1,[R0, #+0]
    129              
    130              
    131               // Setup inputs (PTB5 & PTB1)
    132              PORTB_PCR5 = PORT_PCR_MUX(0);
   \   00000034   0x....             LDR      R0,??DataTable3_7  ;; 0x4004a014
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x6001             STR      R1,[R0, #+0]
    133              PORTB_PCR1 = PORT_PCR_MUX(0);
   \   0000003A   0x....             LDR      R0,??DataTable3_8  ;; 0x4004a004
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x6001             STR      R1,[R0, #+0]
    134              
    135              
    136            // Disable all unused pins and configure GPIO outputs (leave Debug pins alone)
    137              
    138            //PORTA_PCR0  = (PORT_PCR_MUX(0x0)); // SWD CLK signal
    139            //PORTA_PCR1  = (PORT_PCR_MUX(0x0)); // Reset pin
    140            //PORTA_PCR2  = (PORT_PCR_MUX(0x0)); // SWD DIO signal
    141            //PORTA_PCR3  = (PORT_PCR_MUX(0x0)); // EXTAL pin
    142            //PORTA_PCR4  = (PORT_PCR_MUX(0x0)); // XTAL pin
    143            PORTA_PCR5  = (PORT_PCR_MUX(0x0));
   \   00000040   0x....             LDR      R0,??DataTable3_9  ;; 0x40049014
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x6001             STR      R1,[R0, #+0]
    144            PORTA_PCR6  = (PORT_PCR_MUX(0x0));
   \   00000046   0x....             LDR      R0,??DataTable3_10  ;; 0x40049018
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x6001             STR      R1,[R0, #+0]
    145            PORTA_PCR7  = (PORT_PCR_MUX(0x0));
   \   0000004C   0x....             LDR      R0,??DataTable3_11  ;; 0x4004901c
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x6001             STR      R1,[R0, #+0]
    146            PORTA_PCR8  = (PORT_PCR_MUX(0x0));
   \   00000052   0x....             LDR      R0,??DataTable3_12  ;; 0x40049020
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x6001             STR      R1,[R0, #+0]
    147            PORTA_PCR9  = (PORT_PCR_MUX(0x0));
   \   00000058   0x....             LDR      R0,??DataTable3_13  ;; 0x40049024
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x6001             STR      R1,[R0, #+0]
    148            PORTA_PCR10 = (PORT_PCR_MUX(0x0));
   \   0000005E   0x....             LDR      R0,??DataTable3_14  ;; 0x40049028
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x6001             STR      R1,[R0, #+0]
    149            PORTA_PCR11 = (PORT_PCR_MUX(0x0));
   \   00000064   0x....             LDR      R0,??DataTable3_15  ;; 0x4004902c
   \   00000066   0x2100             MOVS     R1,#+0
   \   00000068   0x6001             STR      R1,[R0, #+0]
    150            PORTA_PCR12 = (PORT_PCR_MUX(0x1));  // PTA12 is OUT0
   \   0000006A   0x....             LDR      R0,??DataTable3_16  ;; 0x40049030
   \   0000006C   0x2180             MOVS     R1,#+128
   \   0000006E   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000070   0x6001             STR      R1,[R0, #+0]
    151            PORTA_PCR13 = (PORT_PCR_MUX(0x0));
   \   00000072   0x....             LDR      R0,??DataTable3_17  ;; 0x40049034
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0x6001             STR      R1,[R0, #+0]
    152            PORTA_PCR14 = (PORT_PCR_MUX(0x0));
   \   00000078   0x....             LDR      R0,??DataTable3_18  ;; 0x40049038
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x6001             STR      R1,[R0, #+0]
    153            PORTA_PCR15 = (PORT_PCR_MUX(0x1));
   \   0000007E   0x....             LDR      R0,??DataTable3_19  ;; 0x4004903c
   \   00000080   0x2180             MOVS     R1,#+128
   \   00000082   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000084   0x6001             STR      R1,[R0, #+0]
    154            PORTA_PCR16 = (PORT_PCR_MUX(0x0));
   \   00000086   0x....             LDR      R0,??DataTable3_20  ;; 0x40049040
   \   00000088   0x2100             MOVS     R1,#+0
   \   0000008A   0x6001             STR      R1,[R0, #+0]
    155            PORTA_PCR17 = (PORT_PCR_MUX(0x0));
   \   0000008C   0x....             LDR      R0,??DataTable3_21  ;; 0x40049044
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x6001             STR      R1,[R0, #+0]
    156            PORTA_PCR18 = (PORT_PCR_MUX(0x0));
   \   00000092   0x....             LDR      R0,??DataTable3_22  ;; 0x40049048
   \   00000094   0x2100             MOVS     R1,#+0
   \   00000096   0x6001             STR      R1,[R0, #+0]
    157            PORTA_PCR19 = (PORT_PCR_MUX(0x0));
   \   00000098   0x....             LDR      R0,??DataTable3_23  ;; 0x4004904c
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x6001             STR      R1,[R0, #+0]
    158            PORTA_PCR20 = (PORT_PCR_MUX(0x0));
   \   0000009E   0x....             LDR      R0,??DataTable3_24  ;; 0x40049050
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0x6001             STR      R1,[R0, #+0]
    159            PORTA_PCR21 = (PORT_PCR_MUX(0x0));
   \   000000A4   0x....             LDR      R0,??DataTable3_25  ;; 0x40049054
   \   000000A6   0x2100             MOVS     R1,#+0
   \   000000A8   0x6001             STR      R1,[R0, #+0]
    160            PORTA_PCR22 = (PORT_PCR_MUX(0x0));
   \   000000AA   0x....             LDR      R0,??DataTable3_26  ;; 0x40049058
   \   000000AC   0x2100             MOVS     R1,#+0
   \   000000AE   0x6001             STR      R1,[R0, #+0]
    161            PORTA_PCR23 = (PORT_PCR_MUX(0x0));
   \   000000B0   0x....             LDR      R0,??DataTable3_27  ;; 0x4004905c
   \   000000B2   0x2100             MOVS     R1,#+0
   \   000000B4   0x6001             STR      R1,[R0, #+0]
    162            PORTA_PCR24 = (PORT_PCR_MUX(0x0));
   \   000000B6   0x....             LDR      R0,??DataTable3_28  ;; 0x40049060
   \   000000B8   0x2100             MOVS     R1,#+0
   \   000000BA   0x6001             STR      R1,[R0, #+0]
    163            PORTA_PCR25 = (PORT_PCR_MUX(0x0));
   \   000000BC   0x....             LDR      R0,??DataTable3_29  ;; 0x40049064
   \   000000BE   0x2100             MOVS     R1,#+0
   \   000000C0   0x6001             STR      R1,[R0, #+0]
    164            PORTA_PCR26 = (PORT_PCR_MUX(0x0));
   \   000000C2   0x....             LDR      R0,??DataTable3_30  ;; 0x40049068
   \   000000C4   0x2100             MOVS     R1,#+0
   \   000000C6   0x6001             STR      R1,[R0, #+0]
    165            PORTA_PCR27 = (PORT_PCR_MUX(0x0));
   \   000000C8   0x....             LDR      R0,??DataTable3_31  ;; 0x4004906c
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0x6001             STR      R1,[R0, #+0]
    166            PORTA_PCR28 = (PORT_PCR_MUX(0x0));
   \   000000CE   0x....             LDR      R0,??DataTable3_32  ;; 0x40049070
   \   000000D0   0x2100             MOVS     R1,#+0
   \   000000D2   0x6001             STR      R1,[R0, #+0]
    167            PORTA_PCR29 = (PORT_PCR_MUX(0x0));
   \   000000D4   0x....             LDR      R0,??DataTable3_33  ;; 0x40049074
   \   000000D6   0x2100             MOVS     R1,#+0
   \   000000D8   0x6001             STR      R1,[R0, #+0]
    168            PORTA_PCR30 = (PORT_PCR_MUX(0x0));
   \   000000DA   0x....             LDR      R0,??DataTable3_34  ;; 0x40049078
   \   000000DC   0x2100             MOVS     R1,#+0
   \   000000DE   0x6001             STR      R1,[R0, #+0]
    169            PORTA_PCR31 = (PORT_PCR_MUX(0x0));
   \   000000E0   0x....             LDR      R0,??DataTable3_35  ;; 0x4004907c
   \   000000E2   0x2100             MOVS     R1,#+0
   \   000000E4   0x6001             STR      R1,[R0, #+0]
    170            
    171            PORTB_PCR0  = (PORT_PCR_MUX(0x0));
   \   000000E6   0x....             LDR      R0,??DataTable3_36  ;; 0x4004a000
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0x6001             STR      R1,[R0, #+0]
    172            PORTB_PCR1  = (PORT_PCR_MUX(0x0));
   \   000000EC   0x....             LDR      R0,??DataTable3_8  ;; 0x4004a004
   \   000000EE   0x2100             MOVS     R1,#+0
   \   000000F0   0x6001             STR      R1,[R0, #+0]
    173            PORTB_PCR2  = (PORT_PCR_MUX(0x0)); 
   \   000000F2   0x....             LDR      R0,??DataTable3_37  ;; 0x4004a008
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x6001             STR      R1,[R0, #+0]
    174            PORTB_PCR3  = (PORT_PCR_MUX(0x0));
   \   000000F8   0x....             LDR      R0,??DataTable3_38  ;; 0x4004a00c
   \   000000FA   0x2100             MOVS     R1,#+0
   \   000000FC   0x6001             STR      R1,[R0, #+0]
    175            PORTB_PCR4  = (PORT_PCR_MUX(0x0));
   \   000000FE   0x....             LDR      R0,??DataTable3_39  ;; 0x4004a010
   \   00000100   0x2100             MOVS     R1,#+0
   \   00000102   0x6001             STR      R1,[R0, #+0]
    176            PORTB_PCR5  = (PORT_PCR_MUX(0x0));
   \   00000104   0x....             LDR      R0,??DataTable3_7  ;; 0x4004a014
   \   00000106   0x2100             MOVS     R1,#+0
   \   00000108   0x6001             STR      R1,[R0, #+0]
    177            PORTB_PCR6  = (PORT_PCR_MUX(0x1));  // PTB6 is OUT1
   \   0000010A   0x....             LDR      R0,??DataTable3_40  ;; 0x4004a018
   \   0000010C   0x2180             MOVS     R1,#+128
   \   0000010E   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000110   0x6001             STR      R1,[R0, #+0]
    178            PORTB_PCR7  = (PORT_PCR_MUX(0x0));
   \   00000112   0x....             LDR      R0,??DataTable3_41  ;; 0x4004a01c
   \   00000114   0x2100             MOVS     R1,#+0
   \   00000116   0x6001             STR      R1,[R0, #+0]
    179            PORTB_PCR8  = (PORT_PCR_MUX(0x0));
   \   00000118   0x....             LDR      R0,??DataTable3_42  ;; 0x4004a020
   \   0000011A   0x2100             MOVS     R1,#+0
   \   0000011C   0x6001             STR      R1,[R0, #+0]
    180            PORTB_PCR9  = (PORT_PCR_MUX(0x0));
   \   0000011E   0x....             LDR      R0,??DataTable3_43  ;; 0x4004a024
   \   00000120   0x2100             MOVS     R1,#+0
   \   00000122   0x6001             STR      R1,[R0, #+0]
    181            PORTB_PCR10 = (PORT_PCR_MUX(0x0));
   \   00000124   0x....             LDR      R0,??DataTable3_44  ;; 0x4004a028
   \   00000126   0x2100             MOVS     R1,#+0
   \   00000128   0x6001             STR      R1,[R0, #+0]
    182            PORTB_PCR11 = (PORT_PCR_MUX(0x0));
   \   0000012A   0x....             LDR      R0,??DataTable3_45  ;; 0x4004a02c
   \   0000012C   0x2100             MOVS     R1,#+0
   \   0000012E   0x6001             STR      R1,[R0, #+0]
    183            PORTB_PCR12 = (PORT_PCR_MUX(0x0));
   \   00000130   0x....             LDR      R0,??DataTable3_46  ;; 0x4004a030
   \   00000132   0x2100             MOVS     R1,#+0
   \   00000134   0x6001             STR      R1,[R0, #+0]
    184            PORTB_PCR13 = (PORT_PCR_MUX(0x0));
   \   00000136   0x....             LDR      R0,??DataTable3_47  ;; 0x4004a034
   \   00000138   0x2100             MOVS     R1,#+0
   \   0000013A   0x6001             STR      R1,[R0, #+0]
    185            PORTB_PCR14 = (PORT_PCR_MUX(0x0));
   \   0000013C   0x....             LDR      R0,??DataTable3_48  ;; 0x4004a038
   \   0000013E   0x2100             MOVS     R1,#+0
   \   00000140   0x6001             STR      R1,[R0, #+0]
    186            PORTB_PCR15 = (PORT_PCR_MUX(0x0));
   \   00000142   0x....             LDR      R0,??DataTable3_49  ;; 0x4004a03c
   \   00000144   0x2100             MOVS     R1,#+0
   \   00000146   0x6001             STR      R1,[R0, #+0]
    187            PORTB_PCR16 = (PORT_PCR_MUX(0x0));
   \   00000148   0x....             LDR      R0,??DataTable3_50  ;; 0x4004a040
   \   0000014A   0x2100             MOVS     R1,#+0
   \   0000014C   0x6001             STR      R1,[R0, #+0]
    188            PORTB_PCR17 = (PORT_PCR_MUX(0x0));
   \   0000014E   0x....             LDR      R0,??DataTable3_51  ;; 0x4004a044
   \   00000150   0x2100             MOVS     R1,#+0
   \   00000152   0x6001             STR      R1,[R0, #+0]
    189            PORTB_PCR18 = (PORT_PCR_MUX(0x0));
   \   00000154   0x....             LDR      R0,??DataTable3_52  ;; 0x4004a048
   \   00000156   0x2100             MOVS     R1,#+0
   \   00000158   0x6001             STR      R1,[R0, #+0]
    190            PORTB_PCR19 = (PORT_PCR_MUX(0x0));
   \   0000015A   0x....             LDR      R0,??DataTable3_53  ;; 0x4004a04c
   \   0000015C   0x2100             MOVS     R1,#+0
   \   0000015E   0x6001             STR      R1,[R0, #+0]
    191            PORTB_PCR20 = (PORT_PCR_MUX(0x0));
   \   00000160   0x....             LDR      R0,??DataTable3_54  ;; 0x4004a050
   \   00000162   0x2100             MOVS     R1,#+0
   \   00000164   0x6001             STR      R1,[R0, #+0]
    192            PORTB_PCR21 = (PORT_PCR_MUX(0x0));
   \   00000166   0x....             LDR      R0,??DataTable3_55  ;; 0x4004a054
   \   00000168   0x2100             MOVS     R1,#+0
   \   0000016A   0x6001             STR      R1,[R0, #+0]
    193            PORTB_PCR22 = (PORT_PCR_MUX(0x0));
   \   0000016C   0x....             LDR      R0,??DataTable3_56  ;; 0x4004a058
   \   0000016E   0x2100             MOVS     R1,#+0
   \   00000170   0x6001             STR      R1,[R0, #+0]
    194            PORTB_PCR23 = (PORT_PCR_MUX(0x0));
   \   00000172   0x....             LDR      R0,??DataTable3_57  ;; 0x4004a05c
   \   00000174   0x2100             MOVS     R1,#+0
   \   00000176   0x6001             STR      R1,[R0, #+0]
    195            PORTB_PCR24 = (PORT_PCR_MUX(0x0));
   \   00000178   0x....             LDR      R0,??DataTable3_58  ;; 0x4004a060
   \   0000017A   0x2100             MOVS     R1,#+0
   \   0000017C   0x6001             STR      R1,[R0, #+0]
    196            PORTB_PCR25 = (PORT_PCR_MUX(0x0));
   \   0000017E   0x....             LDR      R0,??DataTable3_59  ;; 0x4004a064
   \   00000180   0x2100             MOVS     R1,#+0
   \   00000182   0x6001             STR      R1,[R0, #+0]
    197            PORTB_PCR26 = (PORT_PCR_MUX(0x0));
   \   00000184   0x....             LDR      R0,??DataTable3_60  ;; 0x4004a068
   \   00000186   0x2100             MOVS     R1,#+0
   \   00000188   0x6001             STR      R1,[R0, #+0]
    198            PORTB_PCR27 = (PORT_PCR_MUX(0x0));
   \   0000018A   0x....             LDR      R0,??DataTable3_61  ;; 0x4004a06c
   \   0000018C   0x2100             MOVS     R1,#+0
   \   0000018E   0x6001             STR      R1,[R0, #+0]
    199            PORTB_PCR28 = (PORT_PCR_MUX(0x0));
   \   00000190   0x....             LDR      R0,??DataTable3_62  ;; 0x4004a070
   \   00000192   0x2100             MOVS     R1,#+0
   \   00000194   0x6001             STR      R1,[R0, #+0]
    200            PORTB_PCR29 = (PORT_PCR_MUX(0x0));
   \   00000196   0x....             LDR      R0,??DataTable3_63  ;; 0x4004a074
   \   00000198   0x2100             MOVS     R1,#+0
   \   0000019A   0x6001             STR      R1,[R0, #+0]
    201            PORTB_PCR30 = (PORT_PCR_MUX(0x0));
   \   0000019C   0x....             LDR      R0,??DataTable3_64  ;; 0x4004a078
   \   0000019E   0x2100             MOVS     R1,#+0
   \   000001A0   0x6001             STR      R1,[R0, #+0]
    202            PORTB_PCR31 = (PORT_PCR_MUX(0x0));
   \   000001A2   0x....             LDR      R0,??DataTable3_65  ;; 0x4004a07c
   \   000001A4   0x2100             MOVS     R1,#+0
   \   000001A6   0x6001             STR      R1,[R0, #+0]
    203          }
   \   000001A8   0x4770             BX       LR               ;; return
    204          

   \                                 In section .textrw, align 4, keep-with-next
    205          void Run_RAM_Loop(void)
    206          {   
    207              // Turn off the Flash!!
    208              SIM_FCFG1 |= SIM_FCFG1_FLASHDIS_MASK;
   \                     Run_RAM_Loop:
   \   00000000   0x4810             LDR      R0,??Run_RAM_Loop_0  ;; 0x4004804c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x4301             ORRS     R1,R1,R0
   \   00000008   0x480E             LDR      R0,??Run_RAM_Loop_0  ;; 0x4004804c
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    209                      
    210              // Write the PMC control register to enter LLS
    211              SMC_PMCTRL |= (SMC_PMCTRL_STOPM(0x3));
   \   0000000C   0x480E             LDR      R0,??Run_RAM_Loop_0+0x4  ;; 0x4007e001
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2103             MOVS     R1,#+3
   \   00000012   0x4301             ORRS     R1,R1,R0
   \   00000014   0x480C             LDR      R0,??Run_RAM_Loop_0+0x4  ;; 0x4007e001
   \   00000016   0x7001             STRB     R1,[R0, #+0]
    212              
    213              // Set the SLEEPDEEP bit and the SLEEPONEXIT bit.  The SLEEP-ON-EXIT feature
    214              //  will ensure that the part is always in LLS except for when a comparison
    215              //  is being made and will save cycles by eliminating the need to stack
    216              //  and unstack registers between comparisons.  
    217              SCB_SCR = (SCB_SCR_SLEEPDEEP_MASK | SCB_SCR_SLEEPONEXIT_MASK);
   \   00000018   0x480C             LDR      R0,??Run_RAM_Loop_0+0x8  ;; 0xe000ed10
   \   0000001A   0x2106             MOVS     R1,#+6
   \   0000001C   0x6001             STR      R1,[R0, #+0]
    218                  
    219              // Finally, enable the LPTMR
    220              LPTMR0_CSR |= LPTMR_CSR_TEN_MASK;  // Use this setting if using the LPTMR interrupt method
   \   0000001E   0x480C             LDR      R0,??Run_RAM_Loop_0+0xC  ;; 0x40040000
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x4301             ORRS     R1,R1,R0
   \   00000026   0x480A             LDR      R0,??Run_RAM_Loop_0+0xC  ;; 0x40040000
   \   00000028   0x6001             STR      R1,[R0, #+0]
    221              
    222              CMP0_SCR |= (CMP_SCR_CFR_MASK | CMP_SCR_CFF_MASK);
   \   0000002A   0x480A             LDR      R0,??Run_RAM_Loop_0+0x10  ;; 0x40073003
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x2106             MOVS     R1,#+6
   \   00000030   0x4301             ORRS     R1,R1,R0
   \   00000032   0x4808             LDR      R0,??Run_RAM_Loop_0+0x10  ;; 0x40073003
   \   00000034   0x7001             STRB     R1,[R0, #+0]
    223              // Clear pending interrupts in the NVIC by writing a 1!
    224              NVIC_ICPR = 0xFFFFFFFF;
   \   00000036   0x4808             LDR      R0,??Run_RAM_Loop_0+0x14  ;; 0xe000e280
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000003C   0x6001             STR      R1,[R0, #+0]
    225                  
    226              // Execute the WFI instruction to enter LLS mode
    227              
    228          #ifndef KEIL
    229          	asm("WFI");
   \   0000003E   0xBF30             WFI
    230          #else
    231          	__wfi();
    232          #endif
    233                  
    234               // Inifinite while loop just in case the part returns to Main from the
    235               //  ISR.  However, this loop should never be entered.     
    236               while(1)
   \                     ??Run_RAM_Loop_1:
   \   00000040   0xE7FE             B        ??Run_RAM_Loop_1
   \   00000042   0xBF00             Nop      
   \                     ??Run_RAM_Loop_0:
   \   00000044   0x4004804C         DC32     0x4004804c
   \   00000048   0x4007E001         DC32     0x4007e001
   \   0000004C   0xE000ED10         DC32     0xe000ed10
   \   00000050   0x40040000         DC32     0x40040000
   \   00000054   0x40073003         DC32     0x40073003
   \   00000058   0xE000E280         DC32     0xe000e280
    237               {}
    238          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4007E000         DC32     0x4007e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x003D0900         DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x001E8480         DC32     0x1e8480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40064005         DC32     0x40064005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x40064001         DC32     0x40064001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40040004         DC32     0x40040004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x40040008         DC32     0x40040008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40073000         DC32     0x40073000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x40073003         DC32     0x40073003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x40073004         DC32     0x40073004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x40073005         DC32     0x40073005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x4007C002         DC32     0x4007c002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40040000         DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x40073001         DC32     0x40073001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x400FF014         DC32     0x400ff014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x400FF004         DC32     0x400ff004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0xF80FF054         DC32     0xf80ff054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0xF80FF048         DC32     0xf80ff048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x4004A014         DC32     0x4004a014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4004A004         DC32     0x4004a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x40049014         DC32     0x40049014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x40049018         DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x4004901C         DC32     0x4004901c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x40049020         DC32     0x40049020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x40049024         DC32     0x40049024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x40049028         DC32     0x40049028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x4004902C         DC32     0x4004902c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x40049030         DC32     0x40049030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x40049034         DC32     0x40049034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x40049038         DC32     0x40049038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x4004903C         DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x40049040         DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   0x40049044         DC32     0x40049044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \   00000000   0x40049048         DC32     0x40049048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \   00000000   0x4004904C         DC32     0x4004904c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_24:
   \   00000000   0x40049050         DC32     0x40049050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_25:
   \   00000000   0x40049054         DC32     0x40049054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_26:
   \   00000000   0x40049058         DC32     0x40049058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_27:
   \   00000000   0x4004905C         DC32     0x4004905c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_28:
   \   00000000   0x40049060         DC32     0x40049060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_29:
   \   00000000   0x40049064         DC32     0x40049064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_30:
   \   00000000   0x40049068         DC32     0x40049068

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_31:
   \   00000000   0x4004906C         DC32     0x4004906c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_32:
   \   00000000   0x40049070         DC32     0x40049070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_33:
   \   00000000   0x40049074         DC32     0x40049074

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_34:
   \   00000000   0x40049078         DC32     0x40049078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_35:
   \   00000000   0x4004907C         DC32     0x4004907c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_36:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_37:
   \   00000000   0x4004A008         DC32     0x4004a008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_38:
   \   00000000   0x4004A00C         DC32     0x4004a00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_39:
   \   00000000   0x4004A010         DC32     0x4004a010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_40:
   \   00000000   0x4004A018         DC32     0x4004a018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_41:
   \   00000000   0x4004A01C         DC32     0x4004a01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_42:
   \   00000000   0x4004A020         DC32     0x4004a020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_43:
   \   00000000   0x4004A024         DC32     0x4004a024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_44:
   \   00000000   0x4004A028         DC32     0x4004a028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_45:
   \   00000000   0x4004A02C         DC32     0x4004a02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_46:
   \   00000000   0x4004A030         DC32     0x4004a030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_47:
   \   00000000   0x4004A034         DC32     0x4004a034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_48:
   \   00000000   0x4004A038         DC32     0x4004a038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_49:
   \   00000000   0x4004A03C         DC32     0x4004a03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_50:
   \   00000000   0x4004A040         DC32     0x4004a040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_51:
   \   00000000   0x4004A044         DC32     0x4004a044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_52:
   \   00000000   0x4004A048         DC32     0x4004a048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_53:
   \   00000000   0x4004A04C         DC32     0x4004a04c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_54:
   \   00000000   0x4004A050         DC32     0x4004a050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_55:
   \   00000000   0x4004A054         DC32     0x4004a054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_56:
   \   00000000   0x4004A058         DC32     0x4004a058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_57:
   \   00000000   0x4004A05C         DC32     0x4004a05c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_58:
   \   00000000   0x4004A060         DC32     0x4004a060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_59:
   \   00000000   0x4004A064         DC32     0x4004a064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_60:
   \   00000000   0x4004A068         DC32     0x4004a068

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_61:
   \   00000000   0x4004A06C         DC32     0x4004a06c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_62:
   \   00000000   0x4004A070         DC32     0x4004a070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_63:
   \   00000000   0x4004A074         DC32     0x4004a074

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_64:
   \   00000000   0x4004A078         DC32     0x4004a078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_65:
   \   00000000   0x4004A07C         DC32     0x4004a07c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  IO_config
        0  Run_RAM_Loop
        8  initialize_CMP
             8 -> enable_irq
        0  initialize_LPTMR
        8  main
             8 -> IO_config
             8 -> Run_RAM_Loop
             8 -> fei_fbi
             8 -> initialize_CMP
             8 -> initialize_LPTMR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_26
       4  ??DataTable3_27
       4  ??DataTable3_28
       4  ??DataTable3_29
       4  ??DataTable3_3
       4  ??DataTable3_30
       4  ??DataTable3_31
       4  ??DataTable3_32
       4  ??DataTable3_33
       4  ??DataTable3_34
       4  ??DataTable3_35
       4  ??DataTable3_36
       4  ??DataTable3_37
       4  ??DataTable3_38
       4  ??DataTable3_39
       4  ??DataTable3_4
       4  ??DataTable3_40
       4  ??DataTable3_41
       4  ??DataTable3_42
       4  ??DataTable3_43
       4  ??DataTable3_44
       4  ??DataTable3_45
       4  ??DataTable3_46
       4  ??DataTable3_47
       4  ??DataTable3_48
       4  ??DataTable3_49
       4  ??DataTable3_5
       4  ??DataTable3_50
       4  ??DataTable3_51
       4  ??DataTable3_52
       4  ??DataTable3_53
       4  ??DataTable3_54
       4  ??DataTable3_55
       4  ??DataTable3_56
       4  ??DataTable3_57
       4  ??DataTable3_58
       4  ??DataTable3_59
       4  ??DataTable3_6
       4  ??DataTable3_60
       4  ??DataTable3_61
       4  ??DataTable3_62
       4  ??DataTable3_63
       4  ??DataTable3_64
       4  ??DataTable3_65
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
     426  IO_config
      92  Run_RAM_Loop
      76  initialize_CMP
      38  initialize_LPTMR
      94  main

 
 950 bytes in section .text
  92 bytes in section .textrw
 
 1 042 bytes of CODE memory

Errors: none
Warnings: none
