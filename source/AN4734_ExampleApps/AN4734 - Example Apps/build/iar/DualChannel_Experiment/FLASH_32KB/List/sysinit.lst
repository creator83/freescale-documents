###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.3.54009/W32 for ARM     18/Feb/2013  16:57:31 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\cpu\sysinit.c                               #
#    Command line =  "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\src\cpu\sysinit.c" -D IAR -D FRDM -D EX2 -lCN   #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -lB "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\" -o "D:\Profiles\B38350\My Documents\App              #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \" --no_cse --no_unroll --no_inline --no_code_motion     #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M0+ -e --fpu=None           #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.4\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    rojects\DualChannel_Experiment\" -I                      #
#                    "D:\Profiles\B38350\My Documents\App Notes\Kinetis\L     #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    ommon\" -I "D:\Profiles\B38350\My Documents\App          #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\" -I "D:\Profiles\B38350\My Documents\App             #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\c #
#                    pu\headers\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\llwu\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\adc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\lptmr\" -I "D:\Profiles\B38350\My Documents\App   #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\mcg\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\pmc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rcm\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\rtc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\smc\" -I "D:\Profiles\B38350\My Documents\App     #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\wdog\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\d #
#                    rivers\uart\" -I "D:\Profiles\B38350\My Documents\App    #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\..\..\src\p #
#                    latforms\" -I "D:\Profiles\B38350\My Documents\App       #
#                    Notes\Kinetis\L Series\CMP pin sampling\Example          #
#                    Projects\build\iar\DualChannel_Experiment\..\" -Ol       #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Lis #
#                    t\sysinit.lst                                            #
#    Object file  =  D:\Profiles\B38350\My Documents\App Notes\Kinetis\L      #
#                    Series\CMP pin sampling\Example                          #
#                    Projects\build\iar\DualChannel_Experiment\FLASH_32KB\Obj #
#                    \sysinit.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B38350\My Documents\App Notes\Kinetis\L Series\CMP pin sampling\Example Projects\src\cpu\sysinit.c
      1          /*
      2           * File:        sysinit.c
      3           * Purpose:     Kinetis Configuration
      4           *              Initializes processor to a default state
      5           *
      6           * Notes:
      7           *
      8           */
      9          
     10          #include "common.h"
     11          #include "sysinit.h"
     12          #include "uart.h"
     13          #include "rtc.h"
     14          
     15          /********************************************************************/
     16          
     17          /* Actual system clock frequency */

   \                                 In section .bss, align 4
     18          int mcg_clk_hz;
   \                     mcg_clk_hz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     19          int mcg_clk_khz;
   \                     mcg_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     20          int core_clk_khz;
   \                     core_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     21          int periph_clk_khz;
   \                     periph_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     22          int pll_clk_khz;
   \                     pll_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     23          int uart0_clk_khz;
   \                     uart0_clk_khz:
   \   00000000                      DS8 4
     24          
     25          
     26          
     27          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     28          void sysinit (void)
     29          {
   \                     sysinit:
   \   00000000   0xB500             PUSH     {LR}
     30                  /* Enable all of the port clocks. These have to be enabled to configure
     31                   * pin muxing options, so most code will need all of these on anyway.
     32                   */
     33                  SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
     34                                | SIM_SCGC5_PORTB_MASK
     35                                 );
   \   00000002   0x....             LDR      R0,??DataTable2  ;; 0x40048038
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x21C0             MOVS     R1,#+192
   \   00000008   0x00C9             LSLS     R1,R1,#+3        ;; #+1536
   \   0000000A   0x4301             ORRS     R1,R1,R0
   \   0000000C   0x....             LDR      R0,??DataTable2  ;; 0x40048038
   \   0000000E   0x6001             STR      R1,[R0, #+0]
     36                  
     37                  // releases hold with ACKISO:  Only has an effect if recovering from VLLS1, VLLS2, or VLLS3
     38                  // if ACKISO is set you must clear ackiso before calling pll_init 
     39                  //    or pll init hangs waiting for OSC to initialize
     40                  // if osc enabled in low power modes - enable it first before ack
     41                  // if I/O needs to be maintained without glitches enable outputs and modules first before ack.
     42                  if (PMC_REGSC &  PMC_REGSC_ACKISO_MASK)
   \   00000010   0x....             LDR      R0,??DataTable2_1  ;; 0x4007d002
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x0700             LSLS     R0,R0,#+28
   \   00000016   0xD505             BPL      ??sysinit_0
     43                  PMC_REGSC |= PMC_REGSC_ACKISO_MASK;
   \   00000018   0x....             LDR      R0,??DataTable2_1  ;; 0x4007d002
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2108             MOVS     R1,#+8
   \   0000001E   0x4301             ORRS     R1,R1,R0
   \   00000020   0x....             LDR      R0,??DataTable2_1  ;; 0x4007d002
   \   00000022   0x7001             STRB     R1,[R0, #+0]
     44          
     45          #if defined(NO_PLL_INIT)
     46                  mcg_clk_hz = 21000000; //FEI mode
   \                     ??sysinit_0:
   \   00000024   0x....             LDR      R0,??DataTable2_2
   \   00000026   0x....             LDR      R1,??DataTable2_3  ;; 0x1406f40
   \   00000028   0x6001             STR      R1,[R0, #+0]
     47                  
     48           //       SIM_SOPT2 &= !SIM_SOPT2_PLLFLLSEL_MASK; // clear PLLFLLSEL to select the FLL for this clock source
     49                  
     50                  uart0_clk_khz = (mcg_clk_hz / 1000); // the UART0 clock frequency will equal the FLL frequency
   \   0000002A   0x....             LDR      R0,??DataTable2_2
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x21FA             MOVS     R1,#+250
   \   00000030   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000032   0x.... 0x....      BL       __aeabi_idiv
   \   00000036   0x....             LDR      R1,??DataTable2_4
   \   00000038   0x6008             STR      R0,[R1, #+0]
     51                 
     52          #else 
     53                 /* Ramp up the system clock */
     54                 /* Set the system dividers */
     55                
     56                  SIM_CLKDIV1 = ( 0
     57                                  | SIM_CLKDIV1_OUTDIV1(0)
     58                                  | SIM_CLKDIV1_OUTDIV4(1) );
     59           
     60                // only for demo, reset rtc,user can remove it
     61                rtc_reset();
     62             
     63                mcg_clk_hz =  fei_fee(CLK0_FREQ_HZ,HIGH_GAIN,CLK0_TYPE);
     64                
     65                if (mcg_clk_hz < 0x100)
     66                   while(1);
     67          
     68                 uart0_clk_khz = mcg_clk_hz; // UART0 clock frequency will equal half the PLL frequency
     69          #endif      
     70          
     71          	/*
     72                   * Use the value obtained from the pll_init function to define variables
     73          	 * for the core clock in kHz and also the peripheral clock. These
     74          	 * variables can be used by other functions that need awareness of the
     75          	 * system frequency.
     76          	 */
     77                  mcg_clk_khz = mcg_clk_hz / 1000;
   \   0000003A   0x....             LDR      R0,??DataTable2_2
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x21FA             MOVS     R1,#+250
   \   00000040   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000042   0x.... 0x....      BL       __aeabi_idiv
   \   00000046   0x....             LDR      R1,??DataTable2_5
   \   00000048   0x6008             STR      R0,[R1, #+0]
     78            	    core_clk_khz = mcg_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> 28)+ 1);
   \   0000004A   0x....             LDR      R0,??DataTable2_5
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x....             LDR      R1,??DataTable2_6  ;; 0x40048044
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0x0F09             LSRS     R1,R1,#+28
   \   00000054   0x1C49             ADDS     R1,R1,#+1
   \   00000056   0x.... 0x....      BL       __aeabi_uidiv
   \   0000005A   0x....             LDR      R1,??DataTable2_7
   \   0000005C   0x6008             STR      R0,[R1, #+0]
     79                  periph_clk_khz = core_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV4_MASK) >> 16)+ 1);
   \   0000005E   0x....             LDR      R0,??DataTable2_7
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x....             LDR      R1,??DataTable2_6  ;; 0x40048044
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0x0C09             LSRS     R1,R1,#+16
   \   00000068   0x0749             LSLS     R1,R1,#+29       ;; ZeroExtS R1,R1,#+29,#+29
   \   0000006A   0x0F49             LSRS     R1,R1,#+29
   \   0000006C   0x1C49             ADDS     R1,R1,#+1
   \   0000006E   0x.... 0x....      BL       __aeabi_uidiv
   \   00000072   0x....             LDR      R1,??DataTable2_8
   \   00000074   0x6008             STR      R0,[R1, #+0]
     80                  
     81                  /* Enable pin interrupt for the abort button - PTA4 */
     82                  /* This pin could also be used as the NMI interrupt, but since the NMI
     83                   * is level sensitive each button press will cause multiple interrupts.
     84                   * Using the GPIO interrupt instead means we can configure for an edge
     85                   * sensitive interrupt instead = one interrupt per button press.
     86                   */
     87          //        enable_abort_button();
     88                  
     89                 // clk_out_init();
     90                  
     91            	/* Enable the pins for the selected SCI */
     92          #ifdef DEBUG_PRINT
     93          #ifdef USE_UART0
     94          #ifdef UART_PIN_PTB_1_2_
     95                  /* Enable the SCI1_TXD function on PTC4 */
     96            	PORTB_PCR1 = PORT_PCR_MUX(0x2); // LPSCI is alt3 function for this pin
     97            		
     98            	/* Enable the SCI1_RXD function on PTC3 */
     99            	PORTB_PCR2 = PORT_PCR_MUX(0x2); // LPSCI is alt3 function for this pin 
    100          #else
    101                  
    102                  /* Enable the SCI1_TXD function on PTC4 */
    103            	PORTB_PCR3 = PORT_PCR_MUX(0x3); // LPSCI is alt3 function for this pin
    104            		
    105            	/* Enable the SCI1_RXD function on PTC3 */
    106            	PORTB_PCR4 = PORT_PCR_MUX(0x3); // LPSCI is alt3 function for this pin
    107          #endif         
    108                  SIM_SOPT2 |= SIM_SOPT2_UART0SRC(1); // select the FLLFLLCLK as UART0 clock source
    109                  
    110                  uart0_init (TERM_PORT,uart0_clk_khz,TERMINAL_BAUD);
    111          #else
    112          
    113            	if (TERM_PORT == UART1_BASE_PTR)
    114            	{
    115                           /* Enable the SCI1_TXD function on PTC4 */
    116            		PORTC_PCR4 = PORT_PCR_MUX(0x3); // SCI is alt3 function for this pin
    117            		
    118            		/* Enable the SCI1_RXD function on PTC3 */
    119            		PORTC_PCR3 = PORT_PCR_MUX(0x3); // SCI is alt3 function for this pin
    120            	}
    121                  
    122                  if (TERM_PORT == UART2_BASE_PTR)
    123            	{
    124                           /* Enable the SCI2_TXD function on PTD3 */
    125            		PORTD_PCR3 = PORT_PCR_MUX(0x3); // SCI is alt3 function for this pin
    126            		
    127            		/* Enable the SCI2_RXD function on PTD2 */
    128            		PORTD_PCR2 = PORT_PCR_MUX(0x3); // SCI is alt3 function for this pin
    129            	}
    130                  
    131            	SCI_init (TERM_PORT, periph_clk_khz, TERMINAL_BAUD);
    132          #endif
    133          #endif
    134          }
   \   00000076   0xBD00             POP      {PC}             ;; return
    135          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    136          void enable_abort_button(void)
    137          {
   \                     enable_abort_button:
   \   00000000   0xB580             PUSH     {R7,LR}
    138              /* Configure the PTA4 pin for its GPIO function */
    139              PORTA_PCR4 = PORT_PCR_MUX(0x1); // GPIO is alt1 function for this pin
   \   00000002   0x....             LDR      R0,??DataTable2_9  ;; 0x40049010
   \   00000004   0x2180             MOVS     R1,#+128
   \   00000006   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000008   0x6001             STR      R1,[R0, #+0]
    140              
    141              /* Configure the PTA4 pin for rising edge interrupts */
    142              PORTA_PCR4 |= PORT_PCR_IRQC(0x9); 
   \   0000000A   0x....             LDR      R0,??DataTable2_9  ;; 0x40049010
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x2190             MOVS     R1,#+144
   \   00000010   0x0309             LSLS     R1,R1,#+12       ;; #+589824
   \   00000012   0x4301             ORRS     R1,R1,R0
   \   00000014   0x....             LDR      R0,??DataTable2_9  ;; 0x40049010
   \   00000016   0x6001             STR      R1,[R0, #+0]
    143              
    144              /* Enable the associated IRQ in the NVIC */
    145              enable_irq(30);      
   \   00000018   0x201E             MOVS     R0,#+30
   \   0000001A   0x.... 0x....      BL       enable_irq
    146          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    147          /********************************************************************/
    148          
    149          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    150          void clk_out_init(void)
    151          {
    152           	/* Enable the FB_CLKOUT function on PTC3 (alt5 function) */
    153          	PORTA_PCR15 = ( PORT_PCR_MUX(0x3));
   \                     clk_out_init:
   \   00000000   0x....             LDR      R0,??DataTable2_10  ;; 0x4004903c
   \   00000002   0x21C0             MOVS     R1,#+192
   \   00000004   0x0089             LSLS     R1,R1,#+2        ;; #+768
   \   00000006   0x6001             STR      R1,[R0, #+0]
    154                  
    155                  /* Select the CLKOUT in the SMI_SOPT2 mux */
    156                  SIM_SOPT2 |= SIM_SOPT2_CLKOUTSEL(4);
   \   00000008   0x....             LDR      R0,??DataTable2_11  ;; 0x40048004
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2180             MOVS     R1,#+128
   \   0000000E   0x4301             ORRS     R1,R1,R0
   \   00000010   0x....             LDR      R0,??DataTable2_11  ;; 0x40048004
   \   00000012   0x6001             STR      R1,[R0, #+0]
    157          }
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4007D002         DC32     0x4007d002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     mcg_clk_hz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x01406F40         DC32     0x1406f40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     uart0_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     mcg_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     core_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     periph_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x40049010         DC32     0x40049010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x4004903C         DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x40048004         DC32     0x40048004

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  clk_out_init
        8  enable_abort_button
             8 -> enable_irq
        4  sysinit
             4 -> __aeabi_idiv
             4 -> __aeabi_uidiv


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      22  clk_out_init
       4  core_clk_khz
      32  enable_abort_button
       4  mcg_clk_hz
       4  mcg_clk_khz
       4  periph_clk_khz
       4  pll_clk_khz
     120  sysinit
       4  uart0_clk_khz

 
  24 bytes in section .bss
 222 bytes in section .text
 
 222 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: none
