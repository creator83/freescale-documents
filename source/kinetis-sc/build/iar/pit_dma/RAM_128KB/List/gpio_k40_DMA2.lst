###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     15/Feb/2011  13:17:23 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\KINETIS5 #
#                    12_SC\kinetis-sc\src\projects\gpio\gpio_k40_DMA2.c       #
#    Command line =  "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\KINETIS #
#                    512_SC\kinetis-sc\src\projects\gpio\gpio_k40_DMA2.c" -D  #
#                    IAR -D TWR_K40X256 -lCN "D:\Profiles\B17685\My           #
#                    Documents\FAE\MCU\Kinetis\KINETIS512_SC\kinetis-sc\build #
#                    \iar\gpio\RAM_128KB\List\" -lB "D:\Profiles\B17685\My    #
#                    Documents\FAE\MCU\Kinetis\KINETIS512_SC\kinetis-sc\build #
#                    \iar\gpio\RAM_128KB\List\" -o "D:\Profiles\B17685\My     #
#                    Documents\FAE\MCU\Kinetis\KINETIS512_SC\kinetis-sc\build #
#                    \iar\gpio\RAM_128KB\Obj\" --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_2\arm\INC\c\DLib_Config_N #
#                    ormal.h" -I "D:\Profiles\B17685\My                       #
#                    Documents\FAE\MCU\Kinetis\KINETIS512_SC\kinetis-sc\build #
#                    \iar\gpio\..\..\..\src\projects\gpio\" -I                #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\KINETIS #
#                    512_SC\kinetis-sc\build\iar\gpio\..\..\..\src\common\"   #
#                    -I "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\KINE #
#                    TIS512_SC\kinetis-sc\build\iar\gpio\..\..\..\src\cpu\"   #
#                    -I "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\KINE #
#                    TIS512_SC\kinetis-sc\build\iar\gpio\..\..\..\src\cpu\hea #
#                    ders\" -I "D:\Profiles\B17685\My                         #
#                    Documents\FAE\MCU\Kinetis\KINETIS512_SC\kinetis-sc\build #
#                    \iar\gpio\..\..\..\src\drivers\adc16\" -I                #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\KINETIS #
#                    512_SC\kinetis-sc\build\iar\gpio\..\..\..\src\drivers\ua #
#                    rt\" -I "D:\Profiles\B17685\My                           #
#                    Documents\FAE\MCU\Kinetis\KINETIS512_SC\kinetis-sc\build #
#                    \iar\gpio\..\..\..\src\drivers\mcg\" -I                  #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\KINETIS #
#                    512_SC\kinetis-sc\build\iar\gpio\..\..\..\src\drivers\wd #
#                    og\" -I "D:\Profiles\B17685\My                           #
#                    Documents\FAE\MCU\Kinetis\KINETIS512_SC\kinetis-sc\build #
#                    \iar\gpio\..\..\..\src\platforms\" -I                    #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\KINETIS #
#                    512_SC\kinetis-sc\build\iar\gpio\..\" -Ol                #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\KINETIS5 #
#                    12_SC\kinetis-sc\build\iar\gpio\RAM_128KB\List\gpio_k40_ #
#                    DMA2.lst                                                 #
#    Object file  =  D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\KINETIS5 #
#                    12_SC\kinetis-sc\build\iar\gpio\RAM_128KB\Obj\gpio_k40_D #
#                    MA2.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\KINETIS512_SC\kinetis-sc\src\projects\gpio\gpio_k40_DMA2.c
      1          /*
      2           * File:		gpio_k40.c
      3           * Purpose:		LED and Switch Example
      4           *
      5           *                      Configures GPIO for the LED and push buttons on the TWR-K40X256
      6           *                      Blue LED - On
      7           *                      Green LED - Toggles on/off
      8           *                      Orange LED - On if SW7 pressed
      9           *                      Yellow LED - On if SW6 pressed
     10           *
     11           *                      Also configures push buttons for falling IRQ's. ISR
     12           *                        configured in vector table in isr.h
     13           */
     14          
     15          #include "common.h"
     16          #include "adc16.h"
     17          #include "uif.h"
     18          #define GPIO_PIN_MASK            0x1Fu
     19          #define GPIO_PIN(x)              (((1)<<(x & GPIO_PIN_MASK)))
     20          
     21          
     22          

   \                                 In section .bss, align 4
     23          int isr_flag, dma_error, diff,thld1,thld2, temp3 = 0;
   \                     isr_flag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     dma_error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     diff:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     thld1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     thld2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     temp3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     24          uint32 Dma_Source_WORD[2], ADC_DATA, ADC_PDATA;
   \                     Dma_Source_WORD:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     ADC_DATA:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ADC_PDATA:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     25          int *res_ptr;
   \                     res_ptr:
   \   00000000                      DS8 4
     26          #define DMA_TCD_SADDR(x)                            DMA_SADDR_REG(DMA_BASE_PTR,x) 
     27          #define DMA_TCD_SOFF(x)                             DMA_SOFF_REG(DMA_BASE_PTR,x)
     28          #define DMA_TCD_ATTR(x)                             DMA_ATTR_REG(DMA_BASE_PTR,x)
     29          #define DMA_TCD_NBYTES_MLNO(x)                      DMA_NBYTES_MLNO_REG(DMA_BASE_PTR,x)
     30          #define DMA_TCD_NBYTES_MLOFFNO(x)                   DMA_NBYTES_MLOFFNO_REG(DMA_BASE_PTR,x)
     31          #define DMA_TCD_NBYTES_MLOFFYES(x)                  DMA_NBYTES_MLOFFYES_REG(DMA_BASE_PTR,x)
     32          #define DMA_TCD_SLAST(x)                            DMA_SLAST_REG(DMA_BASE_PTR,x)
     33          #define DMA_TCD_DADDR(x)                            DMA_DADDR_REG(DMA_BASE_PTR,x)
     34          #define DMA_TCD_DOFF(x)                             DMA_DOFF_REG(DMA_BASE_PTR,x)
     35          #define DMA_TCD_CITER_ELINKYES(x)                   DMA_CITER_ELINKYES_REG(DMA_BASE_PTR,x)
     36          #define DMA_TCD_CITER_ELINKNO(x)                    DMA_CITER_ELINKNO_REG(DMA_BASE_PTR,x)
     37          #define DMA_TCD_DLASTSGA(x)                         DMA_DLAST_SGA_REG(DMA_BASE_PTR,x)
     38          #define DMA_TCD_CSR(x)                              DMA_CSR_REG(DMA_BASE_PTR,x)
     39          #define DMA_TCD_BITER_ELINKNO(x)                    DMA_BITER_ELINKNO_REG(DMA_BASE_PTR,x)
     40          #define DMA_TCD_BITER_ELINKYES(x)                   DMA_BITER_ELINKYES_REG(DMA_BASE_PTR,x)
     41          #define DMAMUX_CHCFG(x)                             DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,x)
     42          
     43          struct dma_tcd {
     44          	uint32_t saddr;
     45          	int16_t soff;
     46          	uint16_t tcdAttr;
     47          	uint32_t nbytes;
     48          	int32_t slast;
     49          	uint32_t daddr;
     50          	int16_t doff;
     51          	uint16_t citer;
     52          	int32_t dlast_sga;
     53          	uint16_t csr;	
     54          	uint16_t biter;
     55          	int channelno;
     56          	uint32_t testdata;
     57          	int loopcount;
     58              uint32_t link;
     59          };
     60          
     61          enum COMMAND
     62          {
     63          	CONFIG_BASIC_XFR,
     64          	MEM_FILL,
     65          	DMA_SOFT_START,
     66          	XFR_OVER_WAIT,
     67          	CMP_MEM,
     68          	CONFIG_BASIC_XFR_ERR,
     69          	MINOR_LOOP_CH_LINK,
     70          	MAJOR_LOOP_LINK_EN,
     71          	SLAST_CHECK,
     72          	DLAST_CHECK,
     73          	SGA_TEST_CONFIG,
     74          	SGA_ENB,
     75          	XFR_WAIT_ERROR_CHECK,
     76          	ERROR_CLR,
     77          	INSERT_CPE_ERR,
     78          	CONFIG_PRIORITY,
     79          	CHECK_PRI
     80          };
     81          
     82          struct dummy_tcd {
     83          
     84          	uint32_t saddr;
     85          	int16_t soff;
     86          	uint16_t attr;
     87          	uint32_t nbytes;
     88          	int32_t slast;
     89          	uint32_t daddr;
     90          	int16_t doff;
     91          	uint16_t citer;
     92          	int32_t dlast_sga;
     93          	uint16_t csr;
     94          	uint16_t biter;
     95          	
     96          };
     97          

   \                                 In section .bss, align 4
     98          struct dma_tcd tcd;
   \                     tcd:
   \   00000000                      DS8 48
     99          
    100          //Function declarations
    101          void cmd_rd (int, char **);
    102          void cmd_wrt (int, char **);
    103          void init_gpio(void);
    104          void delay(void);
    105          void dma_config(int COMMAND , struct dma_tcd *tcd_value);
    106          void Set_Pit0(void);
    107          void Set_Pit1(void);
    108          int8 ADC1_Cal(void);
    109          void Set_ADC1(void);
    110          

   \                                 In section .text, align 4, keep-with-next
    111          UIF_CMD UIF_CMDTAB[] =
   \                     UIF_CMDTAB:
   \   00000000                      ; Initializer data, 140 bytes
   \   00000000   ........0000       DC32 `?<Constant "help">`, 0, 1, 0, uif_cmd_help, `?<Constant "Help">`, `?<Constant "<cmd>">`, `?<Constant "set">`, 0, 2
   \              000001000000
   \              00000000....
   \              ............
   \              ............
   \              ....00000000
   \              02000000    
   \   00000028   00000000....       DC32 0, uif_cmd_set, `?<Constant "Set Config">`, `?<Constant "<option value>">`, `?<Constant "show">`, 0, 1, 0, uif_cmd_show, `?<Constant "Show Config">`
   \              ............
   \              ............
   \              ....00000000
   \              010000000000
   \              0000........
   \              ........    
   \   00000050   ............       DC32 `?<Constant "<option>">`, `?<Constant "rd">`, 0, 0, 0, cmd_rd, `?<Constant "Register Display">`, `?<Constant "">`, `?<Constant "wrt">`, 0
   \              ....00000000
   \              000000000000
   \              0000........
   \              ............
   \              ............
   \              00000000    
   \   00000078   030000000000       DC32 3, 0, cmd_wrt, `?<Constant "Write PIT  <register ...">`
   \              0000........
   \              ........    
   \   00000088   00000000           DC8 0, 0, 0, 0
    112          {
    113              UIF_CMDS_ALL
    114              {"rd",0,0,0,cmd_rd, "Register Display",""},
    115              {"wrt",0,3,0,cmd_wrt, "Write PIT  <register index> <value>"},
    116          
    117          };
    118          

   \                                 In section .text, align 4, keep-with-next
    119          UIF_SETCMD UIF_SETCMDTAB[] =
   \                     UIF_SETCMDTAB:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   ........0000       DC32 `?<Constant "sysclk">`, 0, 1, 0, `?<Constant "">`
   \              000001000000
   \              00000000....
   \              ....        
    120          {
    121              {"sysclk", 0,1,0,""},
    122          };
    123          

   \                                 In section .text, align 4, keep-with-next
    124          const int UIF_NUM_CMD    = UIF_CMDTAB_SIZE;
   \                     UIF_NUM_CMD:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   05000000           DC32 5

   \                                 In section .text, align 4, keep-with-next
    125          const int UIF_NUM_SETCMD = UIF_SETCMDTAB_SIZE;
   \                     UIF_NUM_SETCMD:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   01000000           DC32 1
    126          

   \                                 In section .text, align 2, keep-with-next
    127          void cmd_rd (int argc, char **argv)
    128          {
   \                     cmd_rd:
   \   00000000   80B5               PUSH     {R7,LR}
    129          
    130              printf("\n-------------------------------------------\n");
   \   00000002   ........           LDR.W    R0,??DataTable74
   \   00000006   ........           BL       printf
    131              printf("       PIT Register Read Utility\n");
   \   0000000A   ........           LDR.W    R0,??DataTable74_1
   \   0000000E   ........           BL       printf
    132              printf("-------------------------------------------\n");
   \   00000012   ........           LDR.W    R0,??DataTable74_2
   \   00000016   ........           BL       printf
    133              printf("\n");
   \   0000001A   ....               ADR.N    R0,??DataTable68  ;; "\n"
   \   0000001C   ........           BL       printf
    134                  printf("Pit0   = %d \r\n", (PIT_LDVAL0));
   \   00000020   ........           LDR.W    R0,??DataTable74_3  ;; 0x40037100
   \   00000024   0168               LDR      R1,[R0, #+0]
   \   00000026   ........           LDR.W    R0,??DataTable74_4
   \   0000002A   ........           BL       printf
    135                  printf("Pit1   = %d \r\n", (PIT_LDVAL1));
   \   0000002E   ........           LDR.W    R0,??DataTable74_5  ;; 0x40037110
   \   00000032   0168               LDR      R1,[R0, #+0]
   \   00000034   ........           LDR.W    R0,??DataTable78
   \   00000038   ........           BL       printf
    136                  
    137             
    138          }// end cmd_rd
   \   0000003C   01BD               POP      {R0,PC}          ;; return
    139          
    140          //******************************************************************************
    141          

   \                                 In section .text, align 2, keep-with-next
    142          void
    143          cmd_wrt (int argc, char **argv)
    144          {
   \                     cmd_wrt:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0C00               MOVS     R4,R1
    145              uint32 regindex;
    146              uint32 regvalue;
    147              
    148              int result = 0;
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   0090               STR      R0,[SP, #+0]
    149              res_ptr = &result;
   \   0000000A   ........           LDR.W    R0,??DataTable74_6
   \   0000000E   00A9               ADD      R1,SP,#+0
   \   00000010   0160               STR      R1,[R0, #+0]
    150                   
    151              printf("\n-------------------------------------------\n");
   \   00000012   ........           LDR.W    R0,??DataTable74
   \   00000016   ........           BL       printf
    152              printf(" PIT Single Register Write Utility\n");
   \   0000001A   ........           LDR.W    R0,??DataTable74_7
   \   0000001E   ........           BL       printf
    153              printf("-------------------------------------------\n");
   \   00000022   ........           LDR.W    R0,??DataTable74_2
   \   00000026   ........           BL       printf
    154              printf("\n");
   \   0000002A   ....               ADR.N    R0,??DataTable68  ;; "\n"
   \   0000002C   ........           BL       printf
    155              printf("Valid 'wrt' syntax:\n");
   \   00000030   ........           LDR.W    R0,??DataTable74_8
   \   00000034   ........           BL       printf
    156                   printf("PIT0 frequency(Hz) > wrt  <0> <value(Hz)> \n\n");
   \   00000038   ........           LDR.W    R0,??DataTable74_9
   \   0000003C   ........           BL       printf
    157                   printf("PIT1 frequency(Hz) > wrt  <1> <value(Hz)> \n\n");
   \   00000040   ........           LDR.W    R0,??DataTable74_10
   \   00000044   ........           BL       printf
    158                   printf("PIT0 to PIT1 phase(counts from A to B)> wrt  <2> <value(counts)> \n\n");
   \   00000048   ........           LDR.W    R0,??DataTable74_11
   \   0000004C   ........           BL       printf
    159                   printf("PIT1 to PIT0 phase(counts from B to A)> wrt  <3> <value(counts)> \n\n");
   \   00000050   ........           LDR.W    R0,??DataTable74_12
   \   00000054   ........           BL       printf
    160                   
    161              if (argc != 3)
   \   00000058   032D               CMP      R5,#+3
   \   0000005A   14D0               BEQ.N    ??cmd_wrt_0
    162              {
    163                  printf("Valid 'wrt' syntax:\n");
   \   0000005C   ........           LDR.W    R0,??DataTable74_8
   \   00000060   ........           BL       printf
    164                  printf("PIT0 frequency(Hz) > wrt  <0> <value(Hz)> \n\n");
   \   00000064   ........           LDR.W    R0,??DataTable74_9
   \   00000068   ........           BL       printf
    165                  printf("PIT1 frequency(Hz) > wrt  <1> <value(Hz)> \n\n");
   \   0000006C   ........           LDR.W    R0,??DataTable74_10
   \   00000070   ........           BL       printf
    166                  printf("PIT0 to PIT1 phase(counts from A to B)> wrt  <2> <value(counts)> \n\n");
   \   00000074   ........           LDR.W    R0,??DataTable74_11
   \   00000078   ........           BL       printf
    167                  printf("PIT1 to PIT0 phase(counts from B to A) > wrt  <3> <value(counts)> \n\n");
   \   0000007C   ........           LDR.W    R0,??DataTable74_13
   \   00000080   ........           BL       printf
    168          
    169                  return;
   \   00000084   D2E0               B.N      ??cmd_wrt_1
    170              }
    171              else{
    172                
    173                  regindex = get_value(argv[1],res_ptr,10);
   \                     ??cmd_wrt_0:
   \   00000086   0A22               MOVS     R2,#+10
   \   00000088   ........           LDR.W    R0,??DataTable74_6
   \   0000008C   0168               LDR      R1,[R0, #+0]
   \   0000008E   6068               LDR      R0,[R4, #+4]
   \   00000090   ........           BL       get_value
   \   00000094   0500               MOVS     R5,R0
    174                  regvalue = get_value(argv[2],res_ptr,10);
   \   00000096   0A22               MOVS     R2,#+10
   \   00000098   ........           LDR.W    R0,??DataTable74_6
   \   0000009C   0168               LDR      R1,[R0, #+0]
   \   0000009E   A068               LDR      R0,[R4, #+8]
   \   000000A0   ........           BL       get_value
    175                          
    176                   if(regvalue<4294967294){        
   \   000000A4   10F1020F           CMN      R0,#+2
   \   000000A8   80F0BC80           BCS.W    ??cmd_wrt_2
    177                        switch (regindex){
   \   000000AC   002D               CMP      R5,#+0
   \   000000AE   05D0               BEQ.N    ??cmd_wrt_3
   \   000000B0   022D               CMP      R5,#+2
   \   000000B2   21D0               BEQ.N    ??cmd_wrt_4
   \   000000B4   12D3               BCC.N    ??cmd_wrt_5
   \   000000B6   032D               CMP      R5,#+3
   \   000000B8   6AD0               BEQ.N    ??cmd_wrt_6
   \   000000BA   B2E0               B.N      ??cmd_wrt_7
    178                           case 0: PIT_LDVAL0 = (48000000/regvalue)/3 -3*32000/regvalue;
   \                     ??cmd_wrt_3:
   \   000000BC   ........           LDR.W    R1,??DataTable76  ;; 0x2dc6c00
   \   000000C0   B1FBF0F1           UDIV     R1,R1,R0
   \   000000C4   0322               MOVS     R2,#+3
   \   000000C6   B1FBF2F1           UDIV     R1,R1,R2
   \   000000CA   ........           LDR.W    R2,??DataTable76_1  ;; 0x17700
   \   000000CE   B2FBF0F0           UDIV     R0,R2,R0
   \   000000D2   081A               SUBS     R0,R1,R0
   \   000000D4   ........           LDR.W    R1,??DataTable74_3  ;; 0x40037100
   \   000000D8   0860               STR      R0,[R1, #+0]
    179                              break;
   \   000000DA   A7E0               B.N      ??cmd_wrt_8
    180                           case 1: PIT_LDVAL1 =  (48000000/regvalue)/2 -3*32000/regvalue;
   \                     ??cmd_wrt_5:
   \   000000DC   ........           LDR.W    R1,??DataTable76  ;; 0x2dc6c00
   \   000000E0   B1FBF0F1           UDIV     R1,R1,R0
   \   000000E4   ........           LDR.W    R2,??DataTable76_1  ;; 0x17700
   \   000000E8   B2FBF0F0           UDIV     R0,R2,R0
   \   000000EC   D0EB5100           RSBS     R0,R0,R1, LSR #+1
   \   000000F0   ........           LDR.W    R1,??DataTable74_5  ;; 0x40037110
   \   000000F4   0860               STR      R0,[R1, #+0]
    181                              break;
   \   000000F6   99E0               B.N      ??cmd_wrt_8
    182                           case 2: 
    183                             {thld1 = PIT_LDVAL1;
   \                     ??cmd_wrt_4:
   \   000000F8   ........           LDR.W    R1,??DataTable77
   \   000000FC   ........           LDR.W    R2,??DataTable74_5  ;; 0x40037110
   \   00000100   1268               LDR      R2,[R2, #+0]
   \   00000102   0A60               STR      R2,[R1, #+0]
    184                              thld2 = 2* regvalue;
   \   00000104   4000               LSLS     R0,R0,#+1
   \   00000106   ........           LDR.W    R1,??DataTable77_1
   \   0000010A   0860               STR      R0,[R1, #+0]
    185                               // disable the timer
    186                              PIT_TCTRL0 &= !PIT_TCTRL_TEN_MASK;  
   \   0000010C   ........           LDR.W    R0,??DataTable77_2  ;; 0x40037108
   \   00000110   0068               LDR      R0,[R0, #+0]
   \   00000112   ........           LDR.W    R1,??DataTable77_2  ;; 0x40037108
   \   00000116   0022               MOVS     R2,#+0
   \   00000118   0A60               STR      R2,[R1, #+0]
    187                              PIT_TCTRL1 &= !PIT_TCTRL_TEN_MASK;
   \   0000011A   ........           LDR.W    R1,??DataTable77_3  ;; 0x40037118
   \   0000011E   0968               LDR      R1,[R1, #+0]
   \   00000120   ........           LDR.W    R2,??DataTable77_3  ;; 0x40037118
   \   00000124   0023               MOVS     R3,#+0
   \   00000126   1360               STR      R3,[R2, #+0]
    188                                // Set GPIO to known state
    189                              GPIOD_PSOR = 0x00000080;
   \   00000128   ........           LDR.W    R2,??DataTable77_4  ;; 0x400ff0c4
   \   0000012C   8023               MOVS     R3,#+128
   \   0000012E   1360               STR      R3,[R2, #+0]
    190                              GPIOA_PSOR = 0x00010000;
   \   00000130   ........           LDR.W    R2,??DataTable77_5  ;; 0x400ff004
   \   00000134   5FF48033           MOVS     R3,#+65536
   \   00000138   1360               STR      R3,[R2, #+0]
    191                                //Clear flag for short pulse
    192                              PIT_TFLG1 = PIT_TFLG_TIF_MASK;
   \   0000013A   ........           LDR.W    R2,??DataTable77_6  ;; 0x4003711c
   \   0000013E   0123               MOVS     R3,#+1
   \   00000140   1360               STR      R3,[R2, #+0]
    193                                // Load the new values
    194                              PIT_LDVAL1 = thld2;
   \   00000142   ........           LDR.W    R2,??DataTable74_5  ;; 0x40037110
   \   00000146   ........           LDR.W    R3,??DataTable77_1
   \   0000014A   1B68               LDR      R3,[R3, #+0]
   \   0000014C   1360               STR      R3,[R2, #+0]
    195                              PIT_LDVAL0 = thld1;
   \   0000014E   ........           LDR.W    R2,??DataTable74_3  ;; 0x40037100
   \   00000152   ........           LDR.W    R3,??DataTable77
   \   00000156   1B68               LDR      R3,[R3, #+0]
   \   00000158   1360               STR      R3,[R2, #+0]
    196                              // start the timer
    197                              PIT_TCTRL1 |= PIT_TCTRL_TEN_MASK;   
   \   0000015A   ........           LDR.W    R2,??DataTable77_3  ;; 0x40037118
   \   0000015E   1268               LDR      R2,[R2, #+0]
   \   00000160   52F00102           ORRS     R2,R2,#0x1
   \   00000164   ........           LDR.W    R3,??DataTable77_3  ;; 0x40037118
   \   00000168   1A60               STR      R2,[R3, #+0]
    198                              PIT_TCTRL0 |= PIT_TCTRL_TEN_MASK;
   \   0000016A   ........           LDR.W    R2,??DataTable77_2  ;; 0x40037108
   \   0000016E   1268               LDR      R2,[R2, #+0]
   \   00000170   52F00102           ORRS     R2,R2,#0x1
   \   00000174   ........           LDR.W    R3,??DataTable77_2  ;; 0x40037108
   \   00000178   1A60               STR      R2,[R3, #+0]
    199                               // wait and set the true period
    200                              while(!(PIT_TFLG1&1));
   \                     ??cmd_wrt_9:
   \   0000017A   ........           LDR.W    R0,??DataTable77_6  ;; 0x4003711c
   \   0000017E   0068               LDR      R0,[R0, #+0]
   \   00000180   C007               LSLS     R0,R0,#+31
   \   00000182   FAD5               BPL.N    ??cmd_wrt_9
    201                              PIT_LDVAL1 = thld1;
   \   00000184   ....               LDR.N    R0,??DataTable74_5  ;; 0x40037110
   \   00000186   ........           LDR.W    R1,??DataTable77
   \   0000018A   0968               LDR      R1,[R1, #+0]
   \   0000018C   0160               STR      R1,[R0, #+0]
    202                             }
    203                              break;
   \   0000018E   4DE0               B.N      ??cmd_wrt_8
    204                           case 3: 
    205                             {thld1 = PIT_LDVAL0;
   \                     ??cmd_wrt_6:
   \   00000190   ........           LDR.W    R1,??DataTable77
   \   00000194   ....               LDR.N    R2,??DataTable74_3  ;; 0x40037100
   \   00000196   1268               LDR      R2,[R2, #+0]
   \   00000198   0A60               STR      R2,[R1, #+0]
    206                               thld2 = 2* regvalue;
   \   0000019A   4000               LSLS     R0,R0,#+1
   \   0000019C   ........           LDR.W    R1,??DataTable77_1
   \   000001A0   0860               STR      R0,[R1, #+0]
    207                               // disable the timer
    208                              PIT_TCTRL0 &= !PIT_TCTRL_TEN_MASK;   
   \   000001A2   ........           LDR.W    R0,??DataTable77_2  ;; 0x40037108
   \   000001A6   0068               LDR      R0,[R0, #+0]
   \   000001A8   ........           LDR.W    R1,??DataTable77_2  ;; 0x40037108
   \   000001AC   0022               MOVS     R2,#+0
   \   000001AE   0A60               STR      R2,[R1, #+0]
    209                              PIT_TCTRL1 &= !PIT_TCTRL_TEN_MASK;
   \   000001B0   ........           LDR.W    R1,??DataTable77_3  ;; 0x40037118
   \   000001B4   0968               LDR      R1,[R1, #+0]
   \   000001B6   ........           LDR.W    R2,??DataTable77_3  ;; 0x40037118
   \   000001BA   0023               MOVS     R3,#+0
   \   000001BC   1360               STR      R3,[R2, #+0]
    210                             
    211                               // Set GPIO to known state
    212                              GPIOD_PSOR = 0x00000080;
   \   000001BE   ........           LDR.W    R2,??DataTable77_4  ;; 0x400ff0c4
   \   000001C2   8023               MOVS     R3,#+128
   \   000001C4   1360               STR      R3,[R2, #+0]
    213                              GPIOA_PSOR = 0x00010000; 
   \   000001C6   ........           LDR.W    R2,??DataTable77_5  ;; 0x400ff004
   \   000001CA   5FF48033           MOVS     R3,#+65536
   \   000001CE   1360               STR      R3,[R2, #+0]
    214                              
    215                                //Clear flag for short pulse
    216                              PIT_TFLG0 = PIT_TFLG_TIF_MASK;
   \   000001D0   ........           LDR.W    R2,??DataTable78_1  ;; 0x4003710c
   \   000001D4   0123               MOVS     R3,#+1
   \   000001D6   1360               STR      R3,[R2, #+0]
    217                              // start the timer
    218                              PIT_LDVAL0 = thld2;
   \   000001D8   ....               LDR.N    R2,??DataTable74_3  ;; 0x40037100
   \   000001DA   ........           LDR.W    R3,??DataTable77_1
   \   000001DE   1B68               LDR      R3,[R3, #+0]
   \   000001E0   1360               STR      R3,[R2, #+0]
    219                              PIT_LDVAL1 = thld1;
   \   000001E2   ....               LDR.N    R2,??DataTable74_5  ;; 0x40037110
   \   000001E4   ........           LDR.W    R3,??DataTable77
   \   000001E8   1B68               LDR      R3,[R3, #+0]
   \   000001EA   1360               STR      R3,[R2, #+0]
    220                               // wait and set the true period
    221                              PIT_TCTRL0 |= PIT_TCTRL_TEN_MASK;   // start the timer
   \   000001EC   ........           LDR.W    R2,??DataTable77_2  ;; 0x40037108
   \   000001F0   1268               LDR      R2,[R2, #+0]
   \   000001F2   52F00102           ORRS     R2,R2,#0x1
   \   000001F6   ........           LDR.W    R3,??DataTable77_2  ;; 0x40037108
   \   000001FA   1A60               STR      R2,[R3, #+0]
    222                              PIT_TCTRL1 |= PIT_TCTRL_TEN_MASK;
   \   000001FC   ........           LDR.W    R2,??DataTable77_3  ;; 0x40037118
   \   00000200   1268               LDR      R2,[R2, #+0]
   \   00000202   52F00102           ORRS     R2,R2,#0x1
   \   00000206   ........           LDR.W    R3,??DataTable77_3  ;; 0x40037118
   \   0000020A   1A60               STR      R2,[R3, #+0]
    223                              // wait and set the true period
    224                              while(!(PIT_TFLG0&1));
   \                     ??cmd_wrt_10:
   \   0000020C   ........           LDR.W    R0,??DataTable78_1  ;; 0x4003710c
   \   00000210   0068               LDR      R0,[R0, #+0]
   \   00000212   C007               LSLS     R0,R0,#+31
   \   00000214   FAD5               BPL.N    ??cmd_wrt_10
    225                              PIT_LDVAL0 = thld1;
   \   00000216   ....               LDR.N    R0,??DataTable74_3  ;; 0x40037100
   \   00000218   ........           LDR.W    R1,??DataTable77
   \   0000021C   0968               LDR      R1,[R1, #+0]
   \   0000021E   0160               STR      R1,[R0, #+0]
    226                              
    227                             }
    228                              break;
   \   00000220   04E0               B.N      ??cmd_wrt_8
    229                           
    230                           default: break;
   \                     ??cmd_wrt_7:
   \   00000222   03E0               B.N      ??cmd_wrt_8
    231                        } // end switch/case regindex
    232                   } // if
    233                  else 
    234                  printf("Register value not in valid range.\r\n\n");
   \                     ??cmd_wrt_2:
   \   00000224   ........           LDR.W    R0,??DataTable79
   \   00000228   ........           BL       printf
    235                 
    236              }// end else
    237          }// end cmd_wrt
   \                     ??cmd_wrt_8:
   \                     ??cmd_wrt_1:
   \   0000022C   31BD               POP      {R0,R4,R5,PC}    ;; return
    238          
    239          /************************************************************************************ 
    240          *  DMA 32-bit transmit test 
    241          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    242          void dma_32bit (void)
    243          {volatile uint32 *tempptr;
   \                     dma_32bit:
   \   00000000   80B5               PUSH     {R7,LR}
    244                 
    245            SIM_SCGC6 |= SIM_SCGC6_DMAMUX_MASK;
   \   00000002   ........           LDR.W    R0,??DataTable78_2  ;; 0x4004803c
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   50F00200           ORRS     R0,R0,#0x2
   \   0000000C   ........           LDR.W    R1,??DataTable78_2  ;; 0x4004803c
   \   00000010   0860               STR      R0,[R1, #+0]
    246            DMAMUX_CHCFG0|=DMAMUX_CHCFG_SOURCE(52);  //PORTD 
   \   00000012   ........           LDR.W    R0,??DataTable78_3  ;; 0x40021000
   \   00000016   0078               LDRB     R0,[R0, #+0]
   \   00000018   50F03400           ORRS     R0,R0,#0x34
   \   0000001C   ........           LDR.W    R1,??DataTable78_3  ;; 0x40021000
   \   00000020   0870               STRB     R0,[R1, #+0]
    247            DMAMUX_CHCFG0 |= DMAMUX_CHCFG_ENBL_MASK|DMAMUX_CHCFG_TRIG_MASK;
   \   00000022   ........           LDR.W    R0,??DataTable78_3  ;; 0x40021000
   \   00000026   0078               LDRB     R0,[R0, #+0]
   \   00000028   50F0C000           ORRS     R0,R0,#0xC0
   \   0000002C   ........           LDR.W    R1,??DataTable78_3  ;; 0x40021000
   \   00000030   0870               STRB     R0,[R1, #+0]
    248            
    249            DMAMUX_CHCFG1|=DMAMUX_CHCFG_SOURCE(49);  //PORTD 
   \   00000032   ........           LDR.W    R0,??DataTable78_4  ;; 0x40021001
   \   00000036   0078               LDRB     R0,[R0, #+0]
   \   00000038   50F03100           ORRS     R0,R0,#0x31
   \   0000003C   ........           LDR.W    R1,??DataTable78_4  ;; 0x40021001
   \   00000040   0870               STRB     R0,[R1, #+0]
    250            DMAMUX_CHCFG1 |= DMAMUX_CHCFG_ENBL_MASK|DMAMUX_CHCFG_TRIG_MASK;
   \   00000042   ........           LDR.W    R0,??DataTable78_4  ;; 0x40021001
   \   00000046   0078               LDRB     R0,[R0, #+0]
   \   00000048   50F0C000           ORRS     R0,R0,#0xC0
   \   0000004C   ........           LDR.W    R1,??DataTable78_4  ;; 0x40021001
   \   00000050   0870               STRB     R0,[R1, #+0]
    251            
    252            
    253            
    254          	printf("\nStarting eDMA 32-bit memory to memory transfer test!\n");
   \   00000052   ........           LDR.W    R0,??DataTable78_5
   \   00000056   ........           BL       printf
    255                  tempptr = &Dma_Source_WORD[0];
   \   0000005A   ........           LDR.W    R0,??DataTable78_6
    256          	
    257          	tcd.saddr = (uint32_t)tempptr;
   \   0000005E   ........           LDR.W    R1,??DataTable78_7
   \   00000062   0860               STR      R0,[R1, #+0]
    258          	tcd.daddr = 0x400Ff0CC; //ADDRESS of PTD_PTOR
   \   00000064   ........           LDR.W    R0,??DataTable78_7
   \   00000068   ........           LDR.W    R1,??DataTable78_8  ;; 0x400ff0cc
   \   0000006C   0161               STR      R1,[R0, #+16]
    259          	
    260          	tcd.nbytes = 4;
   \   0000006E   ........           LDR.W    R0,??DataTable78_7
   \   00000072   0421               MOVS     R1,#+4
   \   00000074   8160               STR      R1,[R0, #+8]
    261          	tcd.tcdAttr = DMA_ATTR_SSIZE(2) | DMA_ATTR_DSIZE(2); //EDMA_TCD_ATTR_SSIZE_32BIT|EDMA_TCD_ATTR_DSIZE_32BIT ;
   \   00000076   ........           LDR.W    R0,??DataTable78_7
   \   0000007A   40F20221           MOVW     R1,#+514
   \   0000007E   C180               STRH     R1,[R0, #+6]
    262          	tcd.soff = 0x0;
   \   00000080   ........           LDR.W    R0,??DataTable78_7
   \   00000084   0021               MOVS     R1,#+0
   \   00000086   8180               STRH     R1,[R0, #+4]
    263          	tcd.doff = 0x0;
   \   00000088   ........           LDR.W    R0,??DataTable78_7
   \   0000008C   0021               MOVS     R1,#+0
   \   0000008E   8182               STRH     R1,[R0, #+20]
    264          	tcd.slast = 0x0;
   \   00000090   ........           LDR.W    R0,??DataTable78_7
   \   00000094   0021               MOVS     R1,#+0
   \   00000096   C160               STR      R1,[R0, #+12]
    265          	tcd.loopcount = 0x1;
   \   00000098   ........           LDR.W    R0,??DataTable78_7
   \   0000009C   0121               MOVS     R1,#+1
   \   0000009E   8162               STR      R1,[R0, #+40]
    266          	tcd.dlast_sga = 0x0;
   \   000000A0   ........           LDR.W    R0,??DataTable78_7
   \   000000A4   0021               MOVS     R1,#+0
   \   000000A6   8161               STR      R1,[R0, #+24]
    267          	tcd.csr = 0x0;
   \   000000A8   ........           LDR.W    R0,??DataTable78_7
   \   000000AC   0021               MOVS     R1,#+0
   \   000000AE   8183               STRH     R1,[R0, #+28]
    268          	
    269                  tcd.channelno = 0;
   \   000000B0   ........           LDR.W    R0,??DataTable78_7
   \   000000B4   0021               MOVS     R1,#+0
   \   000000B6   0162               STR      R1,[R0, #+32]
    270              
    271                  dma_config(CONFIG_BASIC_XFR, &tcd);
   \   000000B8   ........           LDR.W    R1,??DataTable78_7
   \   000000BC   0020               MOVS     R0,#+0
   \   000000BE   ........           BL       dma_config
    272                  DMA_ERQ|= 1;
   \   000000C2   ........           LDR.W    R0,??DataTable79_1  ;; 0x4000800c
   \   000000C6   0068               LDR      R0,[R0, #+0]
   \   000000C8   50F00100           ORRS     R0,R0,#0x1
   \   000000CC   ........           LDR.W    R1,??DataTable79_1  ;; 0x4000800c
   \   000000D0   0860               STR      R0,[R1, #+0]
    273                  /////////////////////////////////////////////////
    274                  //Set up DMA CH 1
    275                  ///////////////////////////////////////////
    276                  tempptr = &Dma_Source_WORD[1];
   \   000000D2   ........           LDR.W    R0,??DataTable79_2
    277          	
    278          	tcd.saddr = (uint32_t)tempptr;
   \   000000D6   ........           LDR.W    R1,??DataTable78_7
   \   000000DA   0860               STR      R0,[R1, #+0]
    279          	tcd.daddr = 0x400Ff00C; //ADDRESS of PTD_PTOR
   \   000000DC   ........           LDR.W    R0,??DataTable78_7
   \   000000E0   ........           LDR.W    R1,??DataTable79_3  ;; 0x400ff00c
   \   000000E4   0161               STR      R1,[R0, #+16]
    280          	//tcd.daddr = 0x400Ff0CC;
    281          	tcd.nbytes = 4;
   \   000000E6   ........           LDR.W    R0,??DataTable78_7
   \   000000EA   0421               MOVS     R1,#+4
   \   000000EC   8160               STR      R1,[R0, #+8]
    282          	tcd.tcdAttr = DMA_ATTR_SSIZE(2) | DMA_ATTR_DSIZE(2); //EDMA_TCD_ATTR_SSIZE_32BIT|EDMA_TCD_ATTR_DSIZE_32BIT ;
   \   000000EE   ........           LDR.W    R0,??DataTable78_7
   \   000000F2   40F20221           MOVW     R1,#+514
   \   000000F6   C180               STRH     R1,[R0, #+6]
    283          	tcd.soff = 0x0;
   \   000000F8   ........           LDR.W    R0,??DataTable78_7
   \   000000FC   0021               MOVS     R1,#+0
   \   000000FE   8180               STRH     R1,[R0, #+4]
    284          	tcd.doff = 0x0;
   \   00000100   ........           LDR.W    R0,??DataTable78_7
   \   00000104   0021               MOVS     R1,#+0
   \   00000106   8182               STRH     R1,[R0, #+20]
    285          	tcd.slast = 0x0;
   \   00000108   ........           LDR.W    R0,??DataTable78_7
   \   0000010C   0021               MOVS     R1,#+0
   \   0000010E   C160               STR      R1,[R0, #+12]
    286          	tcd.loopcount = 0x1;
   \   00000110   ........           LDR.W    R0,??DataTable78_7
   \   00000114   0121               MOVS     R1,#+1
   \   00000116   8162               STR      R1,[R0, #+40]
    287          	tcd.dlast_sga = 0x0;
   \   00000118   ........           LDR.W    R0,??DataTable78_7
   \   0000011C   0021               MOVS     R1,#+0
   \   0000011E   8161               STR      R1,[R0, #+24]
    288          	tcd.csr = 0x0;
   \   00000120   ........           LDR.W    R0,??DataTable78_7
   \   00000124   0021               MOVS     R1,#+0
   \   00000126   8183               STRH     R1,[R0, #+28]
    289          	
    290                  tcd.channelno = 1;
   \   00000128   ........           LDR.W    R0,??DataTable78_7
   \   0000012C   0121               MOVS     R1,#+1
   \   0000012E   0162               STR      R1,[R0, #+32]
    291              
    292                  dma_config(CONFIG_BASIC_XFR, &tcd);
   \   00000130   ........           LDR.W    R1,??DataTable78_7
   \   00000134   0020               MOVS     R0,#+0
   \   00000136   ........           BL       dma_config
    293                  DMA_ERQ|= 2;
   \   0000013A   ........           LDR.W    R0,??DataTable79_1  ;; 0x4000800c
   \   0000013E   0068               LDR      R0,[R0, #+0]
   \   00000140   50F00200           ORRS     R0,R0,#0x2
   \   00000144   ........           LDR.W    R1,??DataTable79_1  ;; 0x4000800c
   \   00000148   0860               STR      R0,[R1, #+0]
    294                 
    295             	
    296          }
   \   0000014A   01BD               POP      {R0,PC}          ;; return
    297          
    298          //**************************************************************/
    299          

   \                                 In section .text, align 2, keep-with-next
    300          void main (void)
    301          {
   \                     main:
   \   00000000   80B5               PUSH     {R7,LR}
    302            
    303            printf("TWR-K40X256 GPIO Example!\n");
   \   00000002   ........           LDR.W    R0,??DataTable79_4
   \   00000006   ........           BL       printf
    304          
    305            /* Turn on all port clocks */
    306            SIM_SCGC5 = SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTE_MASK;
   \   0000000A   ........           LDR.W    R0,??DataTable79_5  ;; 0x40048038
   \   0000000E   4FF47851           MOV      R1,#+15872
   \   00000012   0160               STR      R1,[R0, #+0]
    307          
    308            /* Enable GPIOC interrupts in NVIC */
    309            enable_irq(89); //GPIOC Vector is 105. IRQ# is 105-16=89
   \   00000014   5920               MOVS     R0,#+89
   \   00000016   ........           BL       enable_irq
    310          
    311            /* Initialize GPIO on TWR-K40X256 */
    312            init_gpio();
   \   0000001A   ........           BL       init_gpio
    313            
    314            Set_ADC1();
   \   0000001E   ........           BL       Set_ADC1
    315            
    316            Dma_Source_WORD[0]= 0x00000080;
   \   00000022   ........           LDR.W    R0,??DataTable78_6
   \   00000026   8021               MOVS     R1,#+128
   \   00000028   0160               STR      R1,[R0, #+0]
    317            Dma_Source_WORD[1]= 0x00010000;
   \   0000002A   ........           LDR.W    R0,??DataTable78_6
   \   0000002E   5FF48031           MOVS     R1,#+65536
   \   00000032   4160               STR      R1,[R0, #+4]
    318            GPIOD_PTOR = 0x00000080;
   \   00000034   ........           LDR.W    R0,??DataTable78_8  ;; 0x400ff0cc
   \   00000038   8021               MOVS     R1,#+128
   \   0000003A   0160               STR      R1,[R0, #+0]
    319             GPIOD_PTOR = 0x00000080;
   \   0000003C   ........           LDR.W    R0,??DataTable78_8  ;; 0x400ff0cc
   \   00000040   8021               MOVS     R1,#+128
   \   00000042   0160               STR      R1,[R0, #+0]
    320              GPIOA_PTOR = 0x00010000;
   \   00000044   ........           LDR.W    R0,??DataTable79_3  ;; 0x400ff00c
   \   00000048   5FF48031           MOVS     R1,#+65536
   \   0000004C   0160               STR      R1,[R0, #+0]
    321             GPIOA_PTOR =  0x00010000;
   \   0000004E   ........           LDR.W    R0,??DataTable79_3  ;; 0x400ff00c
   \   00000052   5FF48031           MOVS     R1,#+65536
   \   00000056   0160               STR      R1,[R0, #+0]
    322            dma_32bit();
   \   00000058   ........           BL       dma_32bit
    323             
    324            ADC_PDATA = 0;
   \   0000005C   ........           LDR.W    R0,??DataTable79_6
   \   00000060   0021               MOVS     R1,#+0
   \   00000062   0160               STR      R1,[R0, #+0]
    325           //set Pit
    326            Set_Pit0();
   \   00000064   ........           BL       Set_Pit0
    327            Set_Pit1();
   \   00000068   ........           BL       Set_Pit1
    328                    PIT_LDVAL0 = 1777;
   \   0000006C   ....               LDR.N    R0,??DataTable74_3  ;; 0x40037100
   \   0000006E   40F2F161           MOVW     R1,#+1777
   \   00000072   0160               STR      R1,[R0, #+0]
    329                    PIT_LDVAL1 = 1777;
   \   00000074   ....               LDR.N    R0,??DataTable74_5  ;; 0x40037110
   \   00000076   40F2F161           MOVW     R1,#+1777
   \   0000007A   0160               STR      R1,[R0, #+0]
    330                    
    331                    PIT_TFLG0 = PIT_TFLG_TIF_MASK;
   \   0000007C   ........           LDR.W    R0,??DataTable78_1  ;; 0x4003710c
   \   00000080   0121               MOVS     R1,#+1
   \   00000082   0160               STR      R1,[R0, #+0]
    332                    GPIOD_PSOR = 0x00000080;
   \   00000084   ........           LDR.W    R0,??DataTable77_4  ;; 0x400ff0c4
   \   00000088   8021               MOVS     R1,#+128
   \   0000008A   0160               STR      R1,[R0, #+0]
    333                    GPIOA_PSOR = 0x00010000;
   \   0000008C   ........           LDR.W    R0,??DataTable77_5  ;; 0x400ff004
   \   00000090   5FF48031           MOVS     R1,#+65536
   \   00000094   0160               STR      R1,[R0, #+0]
    334                    PIT_TCTRL1 |= PIT_TCTRL_TEN_MASK;   // start the timer
   \   00000096   ........           LDR.W    R0,??DataTable77_3  ;; 0x40037118
   \   0000009A   0068               LDR      R0,[R0, #+0]
   \   0000009C   50F00100           ORRS     R0,R0,#0x1
   \   000000A0   ........           LDR.W    R1,??DataTable77_3  ;; 0x40037118
   \   000000A4   0860               STR      R0,[R1, #+0]
    335                    PIT_TCTRL0 |= PIT_TCTRL_TEN_MASK;
   \   000000A6   ........           LDR.W    R0,??DataTable77_2  ;; 0x40037108
   \   000000AA   0068               LDR      R0,[R0, #+0]
   \   000000AC   50F00100           ORRS     R0,R0,#0x1
   \   000000B0   ........           LDR.W    R1,??DataTable77_2  ;; 0x40037108
   \   000000B4   0860               STR      R0,[R1, #+0]
    336                        
    337            while(1){
    338                    
    339              run_cmd();
   \                     ??main_0:
   \   000000B6   ........           BL       run_cmd
   \   000000BA   FCE7               B.N      ??main_0
    340            
    341            
    342            }//While(1)
    343            
    344            }//Main
    345            
    346            
    347            
    348          
    349          
    350          /*
    351           * Initialize GPIO for Tower switches and LED's
    352           *
    353           *   PTC5 - SW6
    354           *   PTC13 - SW7
    355           *
    356           *   PTB11 - Blue LED (D17)
    357           *   PTC9 - Green LED (D14)
    358           *   PTC8 - Yellow LED (D15)
    359           *   PTC7 - Orange LED (D16)
    360           *
    361           */

   \                                 In section .text, align 2, keep-with-next
    362          void init_gpio()
    363          {
    364            //Set PTC5 and PTC13 (connected to SW6 and SW7) for GPIO functionality, falling IRQ,
    365            //   and to use internal pull-ups. (pin defaults to input state)
    366           // PORTC_PCR5=(0|PORT_PCR_MUX(1)|PORT_PCR_IRQC(0xA)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK);
    367           // PORTC_PCR13=(0|PORT_PCR_MUX(1)|PORT_PCR_IRQC(0xA)|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK);
    368          
    369            //Set PTB11, PTC7, PTC8, and PTC9 (connected to LED's) for GPIO functionality
    370            PORTB_PCR11=(0|PORT_PCR_MUX(1));
   \                     init_gpio:
   \   00000000   ........           LDR.W    R0,??DataTable79_7  ;; 0x4004a02c
   \   00000004   4FF48071           MOV      R1,#+256
   \   00000008   0160               STR      R1,[R0, #+0]
    371            PORTC_PCR7=(0|PORT_PCR_MUX(1));
   \   0000000A   ........           LDR.W    R0,??DataTable79_8  ;; 0x4004b01c
   \   0000000E   4FF48071           MOV      R1,#+256
   \   00000012   0160               STR      R1,[R0, #+0]
    372            PORTC_PCR8=(0|PORT_PCR_MUX(1));
   \   00000014   ........           LDR.W    R0,??DataTable79_9  ;; 0x4004b020
   \   00000018   4FF48071           MOV      R1,#+256
   \   0000001C   0160               STR      R1,[R0, #+0]
    373            PORTC_PCR9=(0|PORT_PCR_MUX(1));
   \   0000001E   ........           LDR.W    R0,??DataTable79_10  ;; 0x4004b024
   \   00000022   4FF48071           MOV      R1,#+256
   \   00000026   0160               STR      R1,[R0, #+0]
    374            
    375            //DMA outputs
    376            PORTD_PCR6|=(0|PORT_PCR_MUX(1));
   \   00000028   ........           LDR.W    R0,??DataTable79_11  ;; 0x4004c018
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   4FF48071           MOV      R1,#+256
   \   00000032   0843               ORRS     R0,R1,R0
   \   00000034   ........           LDR.W    R1,??DataTable79_11  ;; 0x4004c018
   \   00000038   0860               STR      R0,[R1, #+0]
    377            PORTD_PCR7|=(0|PORT_PCR_MUX(1)|PORT_PCR_IRQC(0x3));
   \   0000003A   ........           LDR.W    R0,??DataTable79_12  ;; 0x4004c01c
   \   0000003E   0068               LDR      R0,[R0, #+0]
   \   00000040   ........           LDR.W    R1,??DataTable79_13  ;; 0x30100
   \   00000044   0843               ORRS     R0,R1,R0
   \   00000046   ........           LDR.W    R1,??DataTable79_12  ;; 0x4004c01c
   \   0000004A   0860               STR      R0,[R1, #+0]
    378            PORTA_PCR16|=(0|PORT_PCR_MUX(1)|PORT_PCR_IRQC(0x3));
   \   0000004C   ........           LDR.W    R0,??DataTable79_14  ;; 0x40049040
   \   00000050   0068               LDR      R0,[R0, #+0]
   \   00000052   ........           LDR.W    R1,??DataTable79_13  ;; 0x30100
   \   00000056   0843               ORRS     R0,R1,R0
   \   00000058   ........           LDR.W    R1,??DataTable79_14  ;; 0x40049040
   \   0000005C   0860               STR      R0,[R1, #+0]
    379          
    380          
    381            //Change PTB11, PTC7, PTC8, PTC9 to outputs
    382            GPIOB_PDDR=GPIO_PDDR_PDD(GPIO_PIN(11));
   \   0000005E   ........           LDR.W    R0,??DataTable79_15  ;; 0x400ff054
   \   00000062   4FF40061           MOV      R1,#+2048
   \   00000066   0160               STR      R1,[R0, #+0]
    383            GPIOC_PDDR=GPIO_PDDR_PDD(GPIO_PIN(7) | GPIO_PIN(8) | GPIO_PIN(9));	
   \   00000068   ........           LDR.W    R0,??DataTable79_16  ;; 0x400ff094
   \   0000006C   4FF46071           MOV      R1,#+896
   \   00000070   0160               STR      R1,[R0, #+0]
    384            
    385            GPIOD_PDDR|=GPIO_PDDR_PDD(GPIO_PIN(7) | GPIO_PIN(6) );	
   \   00000072   ........           LDR.W    R0,??DataTable79_17  ;; 0x400ff0d4
   \   00000076   0068               LDR      R0,[R0, #+0]
   \   00000078   50F0C000           ORRS     R0,R0,#0xC0
   \   0000007C   ........           LDR.W    R1,??DataTable79_17  ;; 0x400ff0d4
   \   00000080   0860               STR      R0,[R1, #+0]
    386            GPIOA_PDDR|=GPIO_PDDR_PDD(GPIO_PIN(16));	
   \   00000082   ........           LDR.W    R0,??DataTable79_18  ;; 0x400ff014
   \   00000086   0068               LDR      R0,[R0, #+0]
   \   00000088   50F48030           ORRS     R0,R0,#0x10000
   \   0000008C   ........           LDR.W    R1,??DataTable79_18  ;; 0x400ff014
   \   00000090   0860               STR      R0,[R1, #+0]
    387          }
   \   00000092   7047               BX       LR               ;; return
    388          /********************************************************************/
    389          
    390          /*
    391           * ISR for PORTC interrupts
    392           */

   \                                 In section .text, align 2, keep-with-next
    393          void portc_isr(void)
    394          {
   \                     portc_isr:
   \   00000000   80B5               PUSH     {R7,LR}
    395            if(PORTC_ISFR & PORT_ISFR_ISF(GPIO_PIN(5)))
   \   00000002   ........           LDR.W    R0,??DataTable79_19  ;; 0x4004b0a0
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   8006               LSLS     R0,R0,#+26
   \   0000000A   03D5               BPL.N    ??portc_isr_0
    396            {
    397               printf("SW6 Pressed\n");
   \   0000000C   ........           LDR.W    R0,??DataTable79_20
   \   00000010   ........           BL       printf
    398            }
    399            if(PORTC_ISFR & PORT_ISFR_ISF(GPIO_PIN(13)))
   \                     ??portc_isr_0:
   \   00000014   ........           LDR.W    R0,??DataTable79_19  ;; 0x4004b0a0
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   8004               LSLS     R0,R0,#+18
   \   0000001C   03D5               BPL.N    ??portc_isr_1
    400            {
    401               printf("SW7 Pressed\n");
   \   0000001E   ........           LDR.W    R0,??DataTable79_21
   \   00000022   ........           BL       printf
    402            }
    403            PORTC_ISFR=0xFFFFFFFF;  //Clear Port C ISR flags
   \                     ??portc_isr_1:
   \   00000026   ........           LDR.W    R0,??DataTable79_19  ;; 0x4004b0a0
   \   0000002A   5FF0FF31           MOVS     R1,#-1
   \   0000002E   0160               STR      R1,[R0, #+0]
    404          }
   \   00000030   01BD               POP      {R0,PC}          ;; return
    405          
    406          /*
    407           * ISR for PORTE interrupts
    408           */

   \                                 In section .text, align 2, keep-with-next
    409          void porte_isr(void)
    410          {
    411            PORTE_ISFR=0xFFFFFFFF;  //Clear Port E ISR flags
   \                     porte_isr:
   \   00000000   ........           LDR.W    R0,??DataTable79_22  ;; 0x4004d0a0
   \   00000004   5FF0FF31           MOVS     R1,#-1
   \   00000008   0160               STR      R1,[R0, #+0]
    412          }
   \   0000000A   7047               BX       LR               ;; return
    413          
    414          /*
    415           * ISR for PORTA interrupts
    416           */

   \                                 In section .text, align 2, keep-with-next
    417          void porta_isr(void)
    418          {
    419            PORTA_ISFR=0xFFFFFFFF;  //Clear Port A ISR flags
   \                     porta_isr:
   \   00000000   ........           LDR.W    R0,??DataTable79_23  ;; 0x400490a0
   \   00000004   5FF0FF31           MOVS     R1,#-1
   \   00000008   0160               STR      R1,[R0, #+0]
    420          }
   \   0000000A   7047               BX       LR               ;; return
    421          
    422          
    423          /*
    424           * Function to provide a short delay
    425           */

   \                                 In section .text, align 4, keep-with-next
    426          void delay()
    427          {
    428            unsigned int i, n;
    429            for(i=0;i<30000;i++)
   \                     delay:
   \   00000000   0020               MOVS     R0,#+0
   \   00000002   04E0               B.N      ??delay_0
    430            {
    431              for(n=0;n<200;n++)
    432              {
    433                asm("nop");
   \                     ??delay_1:
   \   00000004   00BF               nop              
    434              }
   \   00000006   491C               ADDS     R1,R1,#+1
   \                     ??delay_2:
   \   00000008   C829               CMP      R1,#+200
   \   0000000A   FBD3               BCC.N    ??delay_1
   \   0000000C   401C               ADDS     R0,R0,#+1
   \                     ??delay_0:
   \   0000000E   47F23051           MOVW     R1,#+30000
   \   00000012   8842               CMP      R0,R1
   \   00000014   01D2               BCS.N    ??delay_3
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   F6E7               B.N      ??delay_2
    435            }
    436          }
   \                     ??delay_3:
   \   0000001A   7047               BX       LR               ;; return
    437          ///////////////////////////////////////////////////////////////////////
    438          //////////////////////////////////////////////////////////////////////
    439          //////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    440          void dma_config(int COMMAND , struct dma_tcd *tcd_value)
    441          {
   \                     dma_config:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0C00               MOVS     R4,R1
    442          	int  i=0,j=0;
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   0026               MOVS     R6,#+0
    443          	
    444          	switch(COMMAND) 
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   25D0               BEQ.N    ??dma_config_0
   \   0000000C   0228               CMP      R0,#+2
   \   0000000E   75D0               BEQ.N    ??dma_config_1
   \   00000010   69D3               BCC.N    ??dma_config_2
   \   00000012   0428               CMP      R0,#+4
   \   00000014   00F0A480           BEQ.W    ??dma_config_3
   \   00000018   76D3               BCC.N    ??dma_config_4
   \   0000001A   0628               CMP      R0,#+6
   \   0000001C   00F01581           BEQ.W    ??dma_config_5
   \   00000020   C0F0CB80           BCC.W    ??dma_config_6
   \   00000024   0828               CMP      R0,#+8
   \   00000026   00F08781           BEQ.W    ??dma_config_7
   \   0000002A   C0F06281           BCC.W    ??dma_config_8
   \   0000002E   0A28               CMP      R0,#+10
   \   00000030   00F0C681           BEQ.W    ??dma_config_9
   \   00000034   C0F0A181           BCC.W    ??dma_config_10
   \   00000038   0C28               CMP      R0,#+12
   \   0000003A   00F02B82           BEQ.W    ??dma_config_11
   \   0000003E   C0F00B82           BCC.W    ??dma_config_12
   \   00000042   0E28               CMP      R0,#+14
   \   00000044   00F0C482           BEQ.W    ??dma_config_13
   \   00000048   C0F0AC82           BCC.W    ??dma_config_14
   \   0000004C   1028               CMP      R0,#+16
   \   0000004E   00F0FB82           BEQ.W    ??dma_config_15
   \   00000052   C0F0C582           BCC.W    ??dma_config_16
   \   00000056   23E3               B.N      ??dma_config_17
    445          	{
    446          	  case CONFIG_BASIC_XFR:	
    447          	    
    448                      i = tcd_value->channelno;
   \                     ??dma_config_0:
   \   00000058   256A               LDR      R5,[R4, #+32]
    449                      //printf("\nTesting DMA channel "); Print8(i); printf("\n");	   	
    450                      DMA_TCD_SADDR(i) = tcd_value->saddr;
   \   0000005A   6801               LSLS     R0,R5,#+5
   \   0000005C   ........           LDR.W    R1,??DataTable79_24  ;; 0x40009000
   \   00000060   2268               LDR      R2,[R4, #+0]
   \   00000062   4250               STR      R2,[R0, R1]
    451          		    
    452          	    DMA_TCD_ATTR(i) = tcd_value->tcdAttr;
   \   00000064   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000068   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000006C   E188               LDRH     R1,[R4, #+6]
   \   0000006E   C180               STRH     R1,[R0, #+6]
    453          	        
    454          	    DMA_TCD_SOFF(i) = tcd_value->soff;	  
   \   00000070   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000074   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000078   A188               LDRH     R1,[R4, #+4]
   \   0000007A   8180               STRH     R1,[R0, #+4]
    455          	       	
    456          	    DMA_TCD_NBYTES_MLNO(i) = tcd_value->nbytes;	
   \   0000007C   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000080   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000084   A168               LDR      R1,[R4, #+8]
   \   00000086   8160               STR      R1,[R0, #+8]
    457          		    	    
    458          	    DMA_TCD_SLAST(i) = tcd_value->slast;	        
   \   00000088   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   0000008C   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000090   E168               LDR      R1,[R4, #+12]
   \   00000092   C160               STR      R1,[R0, #+12]
    459          	        
    460          	    DMA_TCD_DADDR(i) = tcd_value->daddr;	    
   \   00000094   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000098   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000009C   2169               LDR      R1,[R4, #+16]
   \   0000009E   0161               STR      R1,[R0, #+16]
    461          	            
    462          	    DMA_TCD_CITER_ELINKNO(i) = DMA_CITER_ELINKNO_CITER(tcd_value->loopcount);	        
   \   000000A0   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000000A4   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000000A8   A16A               LDR      R1,[R4, #+40]
   \   000000AA   4904               LSLS     R1,R1,#+17
   \   000000AC   490C               LSRS     R1,R1,#+17
   \   000000AE   C182               STRH     R1,[R0, #+22]
    463          		    
    464                      DMA_TCD_DOFF(i) = tcd_value->doff;	
   \   000000B0   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000000B4   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000000B8   A18A               LDRH     R1,[R4, #+20]
   \   000000BA   8182               STRH     R1,[R0, #+20]
    465          		    	    
    466          	    DMA_TCD_DLASTSGA(i) = tcd_value->dlast_sga;	        
   \   000000BC   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000000C0   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000000C4   A169               LDR      R1,[R4, #+24]
   \   000000C6   8161               STR      R1,[R0, #+24]
    467          	        
    468                      DMA_TCD_BITER_ELINKNO(i) = DMA_BITER_ELINKNO_BITER(tcd_value->loopcount);
   \   000000C8   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000000CC   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000000D0   A16A               LDR      R1,[R4, #+40]
   \   000000D2   4904               LSLS     R1,R1,#+17
   \   000000D4   490C               LSRS     R1,R1,#+17
   \   000000D6   C183               STRH     R1,[R0, #+30]
    469          		    
    470                      DMA_TCD_CSR(i) = tcd_value->csr;
   \   000000D8   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000000DC   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000000E0   A18B               LDRH     R1,[R4, #+28]
   \   000000E2   8183               STRH     R1,[R0, #+28]
    471                      
    472          	
    473          	    break;
   \   000000E4   DCE2               B.N      ??dma_config_17
    474          		
    475                    case MEM_FILL:  
    476          		
    477          	    i = tcd_value->channelno;
   \                     ??dma_config_2:
   \   000000E6   256A               LDR      R5,[R4, #+32]
    478          	    for( j=0; j < tcd_value->nbytes; j++)	//j=j+4
   \   000000E8   0026               MOVS     R6,#+0
   \   000000EA   03E0               B.N      ??dma_config_18
    479          	    {
    480          	      //*((unsigned long int *)(tcd_value->saddr +j)) = tcd_value->testdata;
    481          	      *((unsigned char *)(tcd_value->saddr +j)) = j + i;
   \                     ??dma_config_19:
   \   000000EC   A819               ADDS     R0,R5,R6
   \   000000EE   2168               LDR      R1,[R4, #+0]
   \   000000F0   7054               STRB     R0,[R6, R1]
    482          	      //printf("\n"); Print8(*((unsigned char *)(tcd_value->saddr +j)));
    483          	    }
   \   000000F2   761C               ADDS     R6,R6,#+1
   \                     ??dma_config_18:
   \   000000F4   A068               LDR      R0,[R4, #+8]
   \   000000F6   8642               CMP      R6,R0
   \   000000F8   F8D3               BCC.N    ??dma_config_19
    484                      //*((unsigned long int *)(tcd_value->saddr +j)) = 0x0+j;
    485                      break;
   \   000000FA   D1E2               B.N      ??dma_config_17
    486          		
    487          	  case DMA_SOFT_START: 
    488          		
    489          	    i = tcd_value->channelno;		
   \                     ??dma_config_1:
   \   000000FC   256A               LDR      R5,[R4, #+32]
    490          	    //printf("\nDMA channel %d started.\n", i);
    491          	    DMA_SSRT = tcd_value->channelno;     
   \   000000FE   206A               LDR      R0,[R4, #+32]
   \   00000100   ........           LDR.W    R1,??DataTable79_25  ;; 0x4000801d
   \   00000104   0870               STRB     R0,[R1, #+0]
    492          	    break;
   \   00000106   CBE2               B.N      ??dma_config_17
    493          		        
    494                    case XFR_OVER_WAIT: 
    495          		
    496          	    i = tcd_value->channelno;
   \                     ??dma_config_4:
   \   00000108   256A               LDR      R5,[R4, #+32]
    497          	    //printf("\nBefore waiting.");
    498                      //printf("\nDMA_TCD_CSR %d = 0x%x", i, DMA_TCD_CSR(i));
    499                      //printf("\nDMA_CSR & MASK = 0x%x", (DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK));
    500                      //printf("\nDMA_ES = 0x%x", DMA_ES);
    501          	    while((( DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) == 0) && ( DMA_ES == 0));
   \                     ??dma_config_20:
   \   0000010A   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   0000010E   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000112   808B               LDRH     R0,[R0, #+28]
   \   00000114   0006               LSLS     R0,R0,#+24
   \   00000116   04D4               BMI.N    ??dma_config_21
   \   00000118   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   0000011C   0068               LDR      R0,[R0, #+0]
   \   0000011E   0028               CMP      R0,#+0
   \   00000120   F3D0               BEQ.N    ??dma_config_20
    502          	    //while((DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) == 0);
    503          	    //printf("\nAfter waiting.");			
    504          	    if (DMA_ES)
   \                     ??dma_config_21:
   \   00000122   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   00000126   0068               LDR      R0,[R0, #+0]
   \   00000128   0028               CMP      R0,#+0
   \   0000012A   18D0               BEQ.N    ??dma_config_22
    505          	    {
    506                        dma_error++;
   \   0000012C   ........           LDR.W    R0,??DataTable79_27
   \   00000130   0068               LDR      R0,[R0, #+0]
   \   00000132   401C               ADDS     R0,R0,#+1
   \   00000134   ........           LDR.W    R1,??DataTable79_27
   \   00000138   0860               STR      R0,[R1, #+0]
    507                        printf("\nERROR!!! An error ocurred while processing.\n");
   \   0000013A   ........           LDR.W    R0,??DataTable79_28
   \   0000013E   ........           BL       printf
    508          	      printf("\nDMA_ES = 0x%x", DMA_ES);
   \   00000142   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   00000146   0168               LDR      R1,[R0, #+0]
   \   00000148   ........           LDR.W    R0,??DataTable79_29
   \   0000014C   ........           BL       printf
    509                        printf("\nDMA_ERR = 0x%x", DMA_ERR);
   \   00000150   ........           LDR.W    R0,??DataTable79_30  ;; 0x4000802c
   \   00000154   0168               LDR      R1,[R0, #+0]
   \   00000156   ........           LDR.W    R0,??DataTable79_31
   \   0000015A   ........           BL       printf
    510          	    }  
    511          	    break;
   \                     ??dma_config_22:
   \   0000015E   9FE2               B.N      ??dma_config_17
    512          		        
    513                    case CMP_MEM:
    514          		
    515                      j = tcd_value->channelno;
   \                     ??dma_config_3:
   \   00000160   266A               LDR      R6,[R4, #+32]
    516                      //printf("\nCSR0 = "); //Print16(DMA_TCD_CSR(0));
    517                      for(i=0; i < (tcd_value->nbytes); i++)
   \   00000162   0025               MOVS     R5,#+0
   \   00000164   00E0               B.N      ??dma_config_23
   \                     ??dma_config_24:
   \   00000166   6D1C               ADDS     R5,R5,#+1
   \                     ??dma_config_23:
   \   00000168   A068               LDR      R0,[R4, #+8]
   \   0000016A   8542               CMP      R5,R0
   \   0000016C   24D2               BCS.N    ??dma_config_25
    518                      {		            	
    519                        /*
    520          	      printf("\nSADDR: ");
    521                        Print32((unsigned long int)(tcd_value->saddr+ i)); printf(" = ");
    522                        Print8(*(unsigned char *)( tcd_value->saddr+ i));		          
    523                        printf("\nDADDR: ");
    524                        Print32((unsigned long int)(tcd_value->daddr+ i)); printf(" = ");
    525                        Print8(*(unsigned char *)( tcd_value->daddr+ i));
    526                        printf("\n");
    527               	      */
    528                        if ( (*(unsigned char *)(tcd_value->saddr + i)) != (*(unsigned char *)(tcd_value->daddr + i)) )
   \   0000016E   2068               LDR      R0,[R4, #+0]
   \   00000170   285C               LDRB     R0,[R5, R0]
   \   00000172   2169               LDR      R1,[R4, #+16]
   \   00000174   695C               LDRB     R1,[R5, R1]
   \   00000176   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000178   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000017A   8842               CMP      R0,R1
   \   0000017C   F3D0               BEQ.N    ??dma_config_24
    529                        {
    530                          dma_error++;
   \   0000017E   ........           LDR.W    R0,??DataTable79_27
   \   00000182   0068               LDR      R0,[R0, #+0]
   \   00000184   401C               ADDS     R0,R0,#+1
   \   00000186   ........           LDR.W    R1,??DataTable79_27
   \   0000018A   0860               STR      R0,[R1, #+0]
    531                          printf("\nData error!");
   \   0000018C   ........           LDR.W    R0,??DataTable79_32
   \   00000190   ........           BL       printf
    532                   	printf("\nSADDR: 0x%x = 0x%x", ((unsigned long int)(tcd_value->saddr+i)), (*(unsigned char *)( tcd_value->saddr+i)));       
   \   00000194   2068               LDR      R0,[R4, #+0]
   \   00000196   2A5C               LDRB     R2,[R5, R0]
   \   00000198   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000019A   2068               LDR      R0,[R4, #+0]
   \   0000019C   2918               ADDS     R1,R5,R0
   \   0000019E   ........           LDR.W    R0,??DataTable79_33
   \   000001A2   ........           BL       printf
    533                          printf("\nDADDR: 0x%x = 0x%x", ((unsigned long int)(tcd_value->daddr+i)), (*(unsigned char *)( tcd_value->daddr+i)));
   \   000001A6   2069               LDR      R0,[R4, #+16]
   \   000001A8   2A5C               LDRB     R2,[R5, R0]
   \   000001AA   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001AC   2069               LDR      R0,[R4, #+16]
   \   000001AE   2918               ADDS     R1,R5,R0
   \   000001B0   ........           LDR.W    R0,??DataTable79_34
   \   000001B4   ........           BL       printf
    534                          break;
    535                        }
    536                      }
    537                    
    538                      break;                
   \                     ??dma_config_25:
   \   000001B8   72E2               B.N      ??dma_config_17
    539                      
    540                    case CONFIG_BASIC_XFR_ERR:
    541                  
    542                      i = tcd_value->channelno ;
   \                     ??dma_config_6:
   \   000001BA   256A               LDR      R5,[R4, #+32]
    543                      printf("\nTesting DMA channel %d", i);
   \   000001BC   2900               MOVS     R1,R5
   \   000001BE   ........           LDR.W    R0,??DataTable79_35
   \   000001C2   ........           BL       printf
    544                      DMA_TCD_SADDR(i) = tcd_value->saddr ;
   \   000001C6   6801               LSLS     R0,R5,#+5
   \   000001C8   ........           LDR.W    R1,??DataTable79_24  ;; 0x40009000
   \   000001CC   2268               LDR      R2,[R4, #+0]
   \   000001CE   4250               STR      R2,[R0, R1]
    545          	
    546                      DMA_TCD_ATTR(i) = tcd_value->tcdAttr; 
   \   000001D0   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000001D4   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000001D8   E188               LDRH     R1,[R4, #+6]
   \   000001DA   C180               STRH     R1,[R0, #+6]
    547          							
    548                      DMA_TCD_SOFF(i) = tcd_value->soff;
   \   000001DC   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000001E0   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000001E4   A188               LDRH     R1,[R4, #+4]
   \   000001E6   8180               STRH     R1,[R0, #+4]
    549          	
    550                      DMA_TCD_NBYTES_MLNO(i) = tcd_value->nbytes;
   \   000001E8   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000001EC   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000001F0   A168               LDR      R1,[R4, #+8]
   \   000001F2   8160               STR      R1,[R0, #+8]
    551          	
    552                      DMA_TCD_SLAST(i) = tcd_value->slast;
   \   000001F4   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000001F8   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000001FC   E168               LDR      R1,[R4, #+12]
   \   000001FE   C160               STR      R1,[R0, #+12]
    553          
    554                      DMA_TCD_DADDR(i) = tcd_value->daddr;
   \   00000200   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000204   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000208   2169               LDR      R1,[R4, #+16]
   \   0000020A   0161               STR      R1,[R0, #+16]
    555          	
    556                      //DMA_TCD_CITER_ELINKNO(i) = tcd_value->citer;
    557                      DMA_TCD_CITER_ELINKYES(i) = tcd_value->citer;
   \   0000020C   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000210   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000214   E18A               LDRH     R1,[R4, #+22]
   \   00000216   C182               STRH     R1,[R0, #+22]
    558          								
    559                      DMA_TCD_DOFF(i) = tcd_value->doff;
   \   00000218   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   0000021C   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000220   A18A               LDRH     R1,[R4, #+20]
   \   00000222   8182               STRH     R1,[R0, #+20]
    560          									
    561                      DMA_TCD_DLASTSGA(i) = tcd_value->dlast_sga;
   \   00000224   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000228   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000022C   A169               LDR      R1,[R4, #+24]
   \   0000022E   8161               STR      R1,[R0, #+24]
    562          
    563                      //DMA_TCD_BITER_ELINKNO(i) = tcd_value->biter;
    564                      DMA_TCD_BITER_ELINKYES(i) = tcd_value->biter;
   \   00000230   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000234   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000238   E18B               LDRH     R1,[R4, #+30]
   \   0000023A   C183               STRH     R1,[R0, #+30]
    565          	
    566                      DMA_TCD_CSR(i) = tcd_value->csr;	
   \   0000023C   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000240   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000244   A18B               LDRH     R1,[R4, #+28]
   \   00000246   8183               STRH     R1,[R0, #+28]
    567          		        
    568                      break; 
   \   00000248   2AE2               B.N      ??dma_config_17
    569                  		
    570                    case MINOR_LOOP_CH_LINK:
    571          		
    572                      i = tcd_value->channelno ;
   \                     ??dma_config_5:
   \   0000024A   256A               LDR      R5,[R4, #+32]
    573          		
    574                      j = tcd_value->link ;
   \   0000024C   E66A               LDR      R6,[R4, #+44]
    575          
    576                      
    577          		        		   	
    578                      DMA_TCD_SADDR(i) = tcd_value->saddr ;
   \   0000024E   6801               LSLS     R0,R5,#+5
   \   00000250   ........           LDR.W    R1,??DataTable79_24  ;; 0x40009000
   \   00000254   2268               LDR      R2,[R4, #+0]
   \   00000256   4250               STR      R2,[R0, R1]
    579          	
    580                      DMA_TCD_ATTR(i) = tcd_value->tcdAttr; 
   \   00000258   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   0000025C   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000260   E188               LDRH     R1,[R4, #+6]
   \   00000262   C180               STRH     R1,[R0, #+6]
    581          							
    582                      DMA_TCD_SOFF(i) = tcd_value->soff;
   \   00000264   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000268   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000026C   A188               LDRH     R1,[R4, #+4]
   \   0000026E   8180               STRH     R1,[R0, #+4]
    583          	
    584                      DMA_TCD_NBYTES_MLNO(i) = tcd_value->nbytes;
   \   00000270   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000274   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000278   A168               LDR      R1,[R4, #+8]
   \   0000027A   8160               STR      R1,[R0, #+8]
    585          	
    586                      DMA_TCD_SLAST(i) = 0x0;
   \   0000027C   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000280   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000284   0021               MOVS     R1,#+0
   \   00000286   C160               STR      R1,[R0, #+12]
    587          
    588                      DMA_TCD_DADDR(i) = tcd_value->daddr;
   \   00000288   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   0000028C   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000290   2169               LDR      R1,[R4, #+16]
   \   00000292   0161               STR      R1,[R0, #+16]
    589          	
    590                      DMA_TCD_CITER_ELINKYES(i) =  DMA_CITER_ELINKYES_CITER(tcd_value->loopcount)| DMA_CITER_ELINKYES_ELINK_MASK | DMA_CITER_ELINKYES_LINKCH(j) ;
   \   00000294   A06A               LDR      R0,[R4, #+40]
   \   00000296   C005               LSLS     R0,R0,#+23
   \   00000298   C00D               LSRS     R0,R0,#+23
   \   0000029A   7102               LSLS     R1,R6,#+9
   \   0000029C   11F4F051           ANDS     R1,R1,#0x1E00
   \   000002A0   0843               ORRS     R0,R1,R0
   \   000002A2   50F40040           ORRS     R0,R0,#0x8000
   \   000002A6   ........           LDR.W    R1,??DataTable79_24  ;; 0x40009000
   \   000002AA   11EB4511           ADDS     R1,R1,R5, LSL #+5
   \   000002AE   C882               STRH     R0,[R1, #+22]
    591          																											
    592                      DMA_TCD_DOFF(i) = tcd_value->doff;
   \   000002B0   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000002B4   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000002B8   A18A               LDRH     R1,[R4, #+20]
   \   000002BA   8182               STRH     R1,[R0, #+20]
    593          									
    594                      DMA_TCD_DLASTSGA(i) = 0x0;
   \   000002BC   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000002C0   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000002C4   0021               MOVS     R1,#+0
   \   000002C6   8161               STR      R1,[R0, #+24]
    595          
    596                      DMA_TCD_BITER_ELINKYES(i) =  DMA_BITER_ELINKYES_BITER(tcd_value->loopcount)| DMA_BITER_ELINKYES_ELINK_MASK | DMA_BITER_ELINKYES_LINKCH(j);
   \   000002C8   A06A               LDR      R0,[R4, #+40]
   \   000002CA   C005               LSLS     R0,R0,#+23
   \   000002CC   C00D               LSRS     R0,R0,#+23
   \   000002CE   7102               LSLS     R1,R6,#+9
   \   000002D0   11F4F051           ANDS     R1,R1,#0x1E00
   \   000002D4   0843               ORRS     R0,R1,R0
   \   000002D6   50F40040           ORRS     R0,R0,#0x8000
   \   000002DA   ........           LDR.W    R1,??DataTable79_24  ;; 0x40009000
   \   000002DE   11EB4511           ADDS     R1,R1,R5, LSL #+5
   \   000002E2   C883               STRH     R0,[R1, #+30]
    597          	
    598                      DMA_TCD_CSR(i) = 0x0;	
   \   000002E4   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000002E8   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000002EC   0021               MOVS     R1,#+0
   \   000002EE   8183               STRH     R1,[R0, #+28]
    599          		        
    600                      //printf("\nDMA_TCD_CITER_ELINKYES %d = 0x%x", i , DMA_TCD_CITER_ELINKYES(i));
    601                      //printf("\nDMA_TCD_BITER_ELINKYES %d = 0x%x", i , DMA_TCD_BITER_ELINKYES(i));
    602                      break;
   \   000002F0   D6E1               B.N      ??dma_config_17
    603          
    604                    case MAJOR_LOOP_LINK_EN:
    605          	  		
    606                      i = tcd_value->channelno;
   \                     ??dma_config_8:
   \   000002F2   256A               LDR      R5,[R4, #+32]
    607                      j = tcd_value->link;
   \   000002F4   E66A               LDR      R6,[R4, #+44]
   \   000002F6   05E0               B.N      ??dma_config_26
    608                      /* In order to follow the coherency model, the following
    609                          steps are REQUIRED to correctly enable major channel
    610                          linking:
    611          		
    612                          1. Perform a write to the CSR to clear the DONE bit
    613                          2. Then perform another write to the CSR to set the MAJORELINK bit */
    614                      
    615                      /* Make sure the DONE bit is cleared before enabling link */
    616          			
    617                      /* Keep trying to clear DONE bit until it is detected cleared */	
    618                      while ((DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) != 0)
    619                      {
    620                        DMA_TCD_CSR(i) = 0 ;
   \                     ??dma_config_27:
   \   000002F8   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000002FC   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000300   0021               MOVS     R1,#+0
   \   00000302   8183               STRH     R1,[R0, #+28]
    621                      }														
   \                     ??dma_config_26:
   \   00000304   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000308   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000030C   808B               LDRH     R0,[R0, #+28]
   \   0000030E   0006               LSLS     R0,R0,#+24
   \   00000310   F2D4               BMI.N    ??dma_config_27
    622          			
    623                      /* Keep trying to set E_LINK bit until it is detected set */	
    624                      while ((DMA_TCD_CSR(i) & DMA_CSR_MAJORELINK_MASK) == 0)
   \                     ??dma_config_28:
   \   00000312   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000316   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000031A   808B               LDRH     R0,[R0, #+28]
   \   0000031C   8006               LSLS     R0,R0,#+26
   \   0000031E   0AD4               BMI.N    ??dma_config_29
    625                      {
    626                        DMA_TCD_CSR(i) = ( 0
    627                                            |  DMA_CSR_MAJORLINKCH(j)
    628                                            |  DMA_CSR_MAJORELINK_MASK 
    629                                          );									
   \   00000320   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000324   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000328   3102               LSLS     R1,R6,#+8
   \   0000032A   11F47061           ANDS     R1,R1,#0xF00
   \   0000032E   51F02001           ORRS     R1,R1,#0x20
   \   00000332   8183               STRH     R1,[R0, #+28]
   \   00000334   EDE7               B.N      ??dma_config_28
    630                      }
    631          	    //printf("\nDMA_TCD_CSR %d = 0x%x", i, DMA_TCD_CSR(i));			
    632                      break;
   \                     ??dma_config_29:
   \   00000336   B3E1               B.N      ??dma_config_17
    633               
    634                    case SLAST_CHECK:
    635          			
    636                      i = tcd_value->channelno ;		
   \                     ??dma_config_7:
   \   00000338   256A               LDR      R5,[R4, #+32]
    637          		
    638                      if ( DMA_TCD_SADDR(i) == tcd_value->saddr)
   \   0000033A   6801               LSLS     R0,R5,#+5
   \   0000033C   ........           LDR.W    R1,??DataTable79_24  ;; 0x40009000
   \   00000340   4058               LDR      R0,[R0, R1]
   \   00000342   2168               LDR      R1,[R4, #+0]
   \   00000344   8842               CMP      R0,R1
   \   00000346   04D1               BNE.N    ??dma_config_30
    639                        printf("\nSLAST adjustment is correct.");
   \   00000348   ........           ADR.W    R0,`?<Constant "\\nSLAST adjustment is ...">`
   \   0000034C   ........           BL       printf
   \   00000350   12E0               B.N      ??dma_config_31
    640                      else
    641                      {
    642                        dma_error++;
   \                     ??dma_config_30:
   \   00000352   ........           LDR.W    R0,??DataTable79_27
   \   00000356   0068               LDR      R0,[R0, #+0]
   \   00000358   401C               ADDS     R0,R0,#+1
   \   0000035A   ........           LDR.W    R1,??DataTable79_27
   \   0000035E   0860               STR      R0,[R1, #+0]
    643                        printf("\nERROR!!! SLAST adjustment not correct.");
   \   00000360   ........           ADR.W    R0,`?<Constant "\\nERROR!!! SLAST adjus...">`
   \   00000364   ........           BL       printf
    644                        printf("\nSADDR = 0x%x", DMA_TCD_SADDR(i));
   \   00000368   6801               LSLS     R0,R5,#+5
   \   0000036A   ........           LDR.W    R1,??DataTable79_24  ;; 0x40009000
   \   0000036E   4158               LDR      R1,[R0, R1]
   \   00000370   ........           ADR.W    R0,`?<Constant "\\nSADDR = 0x%x">`
   \   00000374   ........           BL       printf
    645                      }
    646                      break;
   \                     ??dma_config_31:
   \   00000378   92E1               B.N      ??dma_config_17
    647          		         
    648                    case DLAST_CHECK:
    649          			
    650                      i = tcd_value->channelno ;		
   \                     ??dma_config_10:
   \   0000037A   256A               LDR      R5,[R4, #+32]
    651          		
    652                      if ( DMA_TCD_DADDR(i) == tcd_value->daddr)
   \   0000037C   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000380   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000384   0069               LDR      R0,[R0, #+16]
   \   00000386   2169               LDR      R1,[R4, #+16]
   \   00000388   8842               CMP      R0,R1
   \   0000038A   04D1               BNE.N    ??dma_config_32
    653                        printf("\nDLAST adjustment is correct.");
   \   0000038C   ........           ADR.W    R0,`?<Constant "\\nDLAST adjustment is ...">`
   \   00000390   ........           BL       printf
   \   00000394   13E0               B.N      ??dma_config_33
    654                      else
    655                      {
    656                        dma_error++;
   \                     ??dma_config_32:
   \   00000396   ........           LDR.W    R0,??DataTable79_27
   \   0000039A   0068               LDR      R0,[R0, #+0]
   \   0000039C   401C               ADDS     R0,R0,#+1
   \   0000039E   ........           LDR.W    R1,??DataTable79_27
   \   000003A2   0860               STR      R0,[R1, #+0]
    657                        printf("\nERROR!!! DLAST adjustment not correct.\n");
   \   000003A4   ........           ADR.W    R0,`?<Constant "\\nERROR!!! DLAST adjus...">`
   \   000003A8   ........           BL       printf
    658                        printf("\nDADDR = 0x%x", DMA_TCD_DADDR(i));
   \   000003AC   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000003B0   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000003B4   0169               LDR      R1,[R0, #+16]
   \   000003B6   ........           ADR.W    R0,`?<Constant "\\nDADDR = 0x%x">`
   \   000003BA   ........           BL       printf
    659                      }
    660                      break;
   \                     ??dma_config_33:
   \   000003BE   6FE1               B.N      ??dma_config_17
    661          		        		   
    662                    case SGA_TEST_CONFIG:
    663          		
    664                      i = tcd_value->channelno ;
   \                     ??dma_config_9:
   \   000003C0   256A               LDR      R5,[R4, #+32]
    665          		        
    666                      printf("\nTesting DMA channel %d.", i);
   \   000003C2   2900               MOVS     R1,R5
   \   000003C4   ........           ADR.W    R0,`?<Constant "\\nTesting DMA channel %d.">`
   \   000003C8   ........           BL       printf
    667          		        		   	
    668                      DMA_TCD_SADDR(i) = tcd_value->saddr;
   \   000003CC   6801               LSLS     R0,R5,#+5
   \   000003CE   ........           LDR.W    R1,??DataTable79_24  ;; 0x40009000
   \   000003D2   2268               LDR      R2,[R4, #+0]
   \   000003D4   4250               STR      R2,[R0, R1]
    669          	
    670                      DMA_TCD_ATTR(i) = tcd_value->tcdAttr; 
   \   000003D6   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000003DA   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000003DE   E188               LDRH     R1,[R4, #+6]
   \   000003E0   C180               STRH     R1,[R0, #+6]
    671          							
    672                      DMA_TCD_SOFF(i) = tcd_value->soff;
   \   000003E2   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000003E6   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000003EA   A188               LDRH     R1,[R4, #+4]
   \   000003EC   8180               STRH     R1,[R0, #+4]
    673          	
    674                      DMA_TCD_NBYTES_MLNO(i) = tcd_value->nbytes;
   \   000003EE   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000003F2   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000003F6   A168               LDR      R1,[R4, #+8]
   \   000003F8   8160               STR      R1,[R0, #+8]
    675          	
    676                      DMA_TCD_SLAST(i) = tcd_value->slast;
   \   000003FA   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   000003FE   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000402   E168               LDR      R1,[R4, #+12]
   \   00000404   C160               STR      R1,[R0, #+12]
    677          
    678                      DMA_TCD_DADDR(i) = tcd_value->daddr;
   \   00000406   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   0000040A   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000040E   2169               LDR      R1,[R4, #+16]
   \   00000410   0161               STR      R1,[R0, #+16]
    679          	
    680                      DMA_TCD_CITER_ELINKNO(i) =  DMA_CITER_ELINKNO_CITER(tcd_value->loopcount) ;
   \   00000412   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000416   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000041A   A16A               LDR      R1,[R4, #+40]
   \   0000041C   4904               LSLS     R1,R1,#+17
   \   0000041E   490C               LSRS     R1,R1,#+17
   \   00000420   C182               STRH     R1,[R0, #+22]
    681          								
    682                      DMA_TCD_DOFF(i) = tcd_value->doff;
   \   00000422   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000426   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000042A   A18A               LDRH     R1,[R4, #+20]
   \   0000042C   8182               STRH     R1,[R0, #+20]
    683          									
    684                      DMA_TCD_DLASTSGA(i) = tcd_value->link;
   \   0000042E   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000432   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000436   E16A               LDR      R1,[R4, #+44]
   \   00000438   8161               STR      R1,[R0, #+24]
    685          
    686                      DMA_TCD_BITER_ELINKNO(i) =  DMA_BITER_ELINKNO_BITER(tcd_value->loopcount);
   \   0000043A   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   0000043E   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000442   A16A               LDR      R1,[R4, #+40]
   \   00000444   4904               LSLS     R1,R1,#+17
   \   00000446   490C               LSRS     R1,R1,#+17
   \   00000448   C183               STRH     R1,[R0, #+30]
    687          	
    688                      DMA_TCD_CSR(i) = tcd_value->csr;	
   \   0000044A   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   0000044E   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000452   A18B               LDRH     R1,[R4, #+28]
   \   00000454   8183               STRH     R1,[R0, #+28]
    689                    
    690                      break;
   \   00000456   23E1               B.N      ??dma_config_17
    691          		        
    692                    case SGA_ENB: 	
    693                      /* In order to follow the coherency model, the following
    694                          steps are REQUIRED to correctly enable scatter/gather
    695                          functionality:
    696          		
    697                          1. Perform a write to the CSR to clear the DONE bit
    698                          2. Then perform another write to the CSR to set the E_SG bit */
    699                      /* Make sure the DONE bit is cleared before enabling link */
    700                      /* Keep trying to clear DONE bit until it is detected cleared */	
    701          	    	
    702                      i = tcd_value->channelno ;
   \                     ??dma_config_12:
   \   00000458   256A               LDR      R5,[R4, #+32]
   \   0000045A   05E0               B.N      ??dma_config_34
    703          	               
    704                      while ((DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) != 0)
    705                      {
    706                        DMA_TCD_CSR(i) = 0 ;
   \                     ??dma_config_35:
   \   0000045C   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000460   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000464   0021               MOVS     R1,#+0
   \   00000466   8183               STRH     R1,[R0, #+28]
    707                      }														
   \                     ??dma_config_34:
   \   00000468   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   0000046C   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000470   808B               LDRH     R0,[R0, #+28]
   \   00000472   0006               LSLS     R0,R0,#+24
   \   00000474   F2D4               BMI.N    ??dma_config_35
    708          		
    709                      /* Keep trying to set E_SG bit until it is detected set */	
    710                      while ((DMA_TCD_CSR(i) & DMA_CSR_ESG_MASK) == 0)
   \                     ??dma_config_36:
   \   00000476   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   0000047A   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000047E   808B               LDRH     R0,[R0, #+28]
   \   00000480   C006               LSLS     R0,R0,#+27
   \   00000482   06D4               BMI.N    ??dma_config_37
    711                      {
    712                        DMA_TCD_CSR(i) = ( 0
    713                                            |  DMA_CSR_ESG_MASK 
    714                                          );
   \   00000484   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   00000488   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000048C   1021               MOVS     R1,#+16
   \   0000048E   8183               STRH     R1,[R0, #+28]
   \   00000490   F1E7               B.N      ??dma_config_36
    715                      }					
    716                      break;
   \                     ??dma_config_37:
   \   00000492   05E1               B.N      ??dma_config_17
    717          		            
    718                    case XFR_WAIT_ERROR_CHECK: 	/* Wait for DMA to complete */
    719          			
    720                      i = tcd_value->channelno ;
   \                     ??dma_config_11:
   \   00000494   256A               LDR      R5,[R4, #+32]
    721                      //printf("\nbefore while..");																	
    722                      while((( DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) == 0) && ( DMA_ES == 0));
   \                     ??dma_config_38:
   \   00000496   ........           LDR.W    R0,??DataTable79_24  ;; 0x40009000
   \   0000049A   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000049E   808B               LDRH     R0,[R0, #+28]
   \   000004A0   0006               LSLS     R0,R0,#+24
   \   000004A2   04D4               BMI.N    ??dma_config_39
   \   000004A4   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   000004A8   0068               LDR      R0,[R0, #+0]
   \   000004AA   0028               CMP      R0,#+0
   \   000004AC   F3D0               BEQ.N    ??dma_config_38
    723                      //printf("\nafter while..");
    724                      /* Check for errors */
    725                      if (DMA_ES)
   \                     ??dma_config_39:
   \   000004AE   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   000004B2   0068               LDR      R0,[R0, #+0]
   \   000004B4   0028               CMP      R0,#+0
   \   000004B6   70D0               BEQ.N    ??dma_config_40
    726                      {
    727                        //printf("\nDMA_TCD_CSR = "); Print16(DMA_TCD_CSR(i));
    728                        //printf("\nDMA_ES = "); Print32(DMA_ES);
    729                        //printf("\nDMA_ERR = "); Print32(DMA_ERR);
    730          	      dma_error++; 	
   \   000004B8   ........           LDR.W    R0,??DataTable79_27
   \   000004BC   0068               LDR      R0,[R0, #+0]
   \   000004BE   401C               ADDS     R0,R0,#+1
   \   000004C0   ........           LDR.W    R1,??DataTable79_27
   \   000004C4   0860               STR      R0,[R1, #+0]
    731                        if ((DMA_ES & DMA_ES_DAE_MASK) != 0)
   \   000004C6   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   000004CA   0068               LDR      R0,[R0, #+0]
   \   000004CC   8006               LSLS     R0,R0,#+26
   \   000004CE   04D5               BPL.N    ??dma_config_41
    732                        {
    733                          printf("\nDAE error detected correctly.\n");
   \   000004D0   ........           ADR.W    R0,`?<Constant "\\nDAE error detected c...">`
   \   000004D4   ........           BL       printf
    734                          j++;
   \   000004D8   761C               ADDS     R6,R6,#+1
    735                        }	
    736                        if((DMA_ES & DMA_ES_DBE_MASK) != 0)
   \                     ??dma_config_41:
   \   000004DA   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   000004DE   0068               LDR      R0,[R0, #+0]
   \   000004E0   C007               LSLS     R0,R0,#+31
   \   000004E2   04D5               BPL.N    ??dma_config_42
    737                        {
    738                          printf("\nDBE error detected correctly.\n");
   \   000004E4   ........           ADR.W    R0,`?<Constant "\\nDBE error detected c...">`
   \   000004E8   ........           BL       printf
    739                          j++;
   \   000004EC   761C               ADDS     R6,R6,#+1
    740                        }
    741                        if((DMA_ES & DMA_ES_DOE_MASK) != 0)
   \                     ??dma_config_42:
   \   000004EE   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   000004F2   0068               LDR      R0,[R0, #+0]
   \   000004F4   C006               LSLS     R0,R0,#+27
   \   000004F6   04D5               BPL.N    ??dma_config_43
    742                        {
    743                          printf("\nDOE error detected correctly.\n");
   \   000004F8   ........           ADR.W    R0,`?<Constant "\\nDOE error detected c...">`
   \   000004FC   ........           BL       printf
    744                          j++;
   \   00000500   761C               ADDS     R6,R6,#+1
    745                        }
    746                        if((DMA_ES & DMA_ES_NCE_MASK) != 0)
   \                     ??dma_config_43:
   \   00000502   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   00000506   0068               LDR      R0,[R0, #+0]
   \   00000508   0007               LSLS     R0,R0,#+28
   \   0000050A   04D5               BPL.N    ??dma_config_44
    747                        {
    748                          printf("\nNCE error detected correctly.\n");
   \   0000050C   ........           ADR.W    R0,`?<Constant "\\nNCE error detected c...">`
   \   00000510   ........           BL       printf
    749                          j++;
   \   00000514   761C               ADDS     R6,R6,#+1
    750                        }
    751                        if((DMA_ES & DMA_ES_SAE_MASK) != 0)
   \                     ??dma_config_44:
   \   00000516   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   0000051A   0068               LDR      R0,[R0, #+0]
   \   0000051C   0006               LSLS     R0,R0,#+24
   \   0000051E   04D5               BPL.N    ??dma_config_45
    752                        {
    753                          printf("\nSAE error detected correctly.\n");
   \   00000520   ........           ADR.W    R0,`?<Constant "\\nSAE error detected c...">`
   \   00000524   ........           BL       printf
    754                          j++;
   \   00000528   761C               ADDS     R6,R6,#+1
    755                        }
    756                        if((DMA_ES & DMA_ES_CPE_MASK) != 0)
   \                     ??dma_config_45:
   \   0000052A   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   0000052E   0068               LDR      R0,[R0, #+0]
   \   00000530   4004               LSLS     R0,R0,#+17
   \   00000532   04D5               BPL.N    ??dma_config_46
    757                        {
    758                          printf("\nCPE error detected correctly.\n");
   \   00000534   ........           ADR.W    R0,`?<Constant "\\nCPE error detected c...">`
   \   00000538   ........           BL       printf
    759                          j++;
   \   0000053C   761C               ADDS     R6,R6,#+1
    760                        }
    761                        if((DMA_ES & DMA_ES_SBE_MASK) != 0)
   \                     ??dma_config_46:
   \   0000053E   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   00000542   0068               LDR      R0,[R0, #+0]
   \   00000544   8007               LSLS     R0,R0,#+30
   \   00000546   04D5               BPL.N    ??dma_config_47
    762                        {
    763                          printf("\nSBE error detected correctly.\n");
   \   00000548   ........           ADR.W    R0,`?<Constant "\\nSBE error detected c...">`
   \   0000054C   ........           BL       printf
    764                          j++;
   \   00000550   761C               ADDS     R6,R6,#+1
    765                        }
    766                        if((DMA_ES & DMA_ES_SGE_MASK) != 0)
   \                     ??dma_config_47:
   \   00000552   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   00000556   0068               LDR      R0,[R0, #+0]
   \   00000558   4007               LSLS     R0,R0,#+29
   \   0000055A   04D5               BPL.N    ??dma_config_48
    767                        {
    768                          printf("\nSGE error detected correctly.\n");
   \   0000055C   ........           ADR.W    R0,`?<Constant "\\nSGE error detected c...">`
   \   00000560   ........           BL       printf
    769                          j++;
   \   00000564   761C               ADDS     R6,R6,#+1
    770                        } 
    771                        if((DMA_ES & DMA_ES_SOE_MASK) != 0)
   \                     ??dma_config_48:
   \   00000566   ........           LDR.W    R0,??DataTable79_26  ;; 0x40008004
   \   0000056A   0068               LDR      R0,[R0, #+0]
   \   0000056C   4006               LSLS     R0,R0,#+25
   \   0000056E   04D5               BPL.N    ??dma_config_49
    772                        {
    773                          printf("\nSOE error detected correctly.\n");
   \   00000570   ........           ADR.W    R0,`?<Constant "\\nSOE error detected c...">`
   \   00000574   ........           BL       printf
    774                          j++;
   \   00000578   761C               ADDS     R6,R6,#+1
    775                        }
    776                        if((DMA_ES & DMA_ES_ECX_MASK) != 0)
   \                     ??dma_config_49:
   \   0000057A   ....               LDR.N    R0,??DataTable79_26  ;; 0x40008004
   \   0000057C   0068               LDR      R0,[R0, #+0]
   \   0000057E   C003               LSLS     R0,R0,#+15
   \   00000580   04D5               BPL.N    ??dma_config_50
    777                        {
    778                          printf("\nError cancel transfer detected correctly.\n");
   \   00000582   ........           ADR.W    R0,`?<Constant "\\nError cancel transfe...">`
   \   00000586   ........           BL       printf
    779                          j++;
   \   0000058A   761C               ADDS     R6,R6,#+1
    780                        }
    781                        if (j == 0)
   \                     ??dma_config_50:
   \   0000058C   002E               CMP      R6,#+0
   \   0000058E   08D1               BNE.N    ??dma_config_51
    782                          printf("\nERROR NOT DETECTED!!!\n");		        
   \   00000590   ........           ADR.W    R0,`?<Constant "\\nERROR NOT DETECTED!!!\\n">`
   \   00000594   ........           BL       printf
   \   00000598   03E0               B.N      ??dma_config_51
    783                          //printf("\nDMAERR = "); Print32(DMA_ERR);
    784                      }
    785          	    else
    786                        printf("\nNO ERROR DETECTED!!!\n");
   \                     ??dma_config_40:
   \   0000059A   ........           ADR.W    R0,`?<Constant "\\nNO ERROR DETECTED!!!\\n">`
   \   0000059E   ........           BL       printf
    787          	            	
    788          	    break;
   \                     ??dma_config_51:
   \   000005A2   7DE0               B.N      ??dma_config_17
    789          	            	
    790                    case ERROR_CLR:     
    791          			
    792                      printf("\nBefore DMA_ERR = 0x%x", DMA_ERR);
   \                     ??dma_config_14:
   \   000005A4   ....               LDR.N    R0,??DataTable79_30  ;; 0x4000802c
   \   000005A6   0168               LDR      R1,[R0, #+0]
   \   000005A8   ........           ADR.W    R0,`?<Constant "\\nBefore DMA_ERR = 0x%x">`
   \   000005AC   ........           BL       printf
    793                      DMA_CERR = DMA_CERR_CAEI_MASK;
   \   000005B0   ....               LDR.N    R0,??DataTable79_36  ;; 0x4000801e
   \   000005B2   4021               MOVS     R1,#+64
   \   000005B4   0170               STRB     R1,[R0, #+0]
    794                      //printf("\nAfter Clear Error.");
    795                      printf("\nAfter DMA_ERR = 0x%x", DMA_ERR);
   \   000005B6   ....               LDR.N    R0,??DataTable79_30  ;; 0x4000802c
   \   000005B8   0168               LDR      R1,[R0, #+0]
   \   000005BA   ........           ADR.W    R0,`?<Constant "\\nAfter DMA_ERR = 0x%x">`
   \   000005BE   ........           BL       printf
    796                      printf("\nDMA_ES = 0x%x", DMA_ES);
   \   000005C2   ....               LDR.N    R0,??DataTable79_26  ;; 0x40008004
   \   000005C4   0168               LDR      R1,[R0, #+0]
   \   000005C6   ........           ADR.W    R0,`?<Constant "\\nDMA_ES = 0x%x">`
   \   000005CA   ........           BL       printf
    797                      break;
   \   000005CE   67E0               B.N      ??dma_config_17
    798          		            
    799                    case INSERT_CPE_ERR:
    800          			
    801                      i = tcd_value->channelno ;
   \                     ??dma_config_13:
   \   000005D0   256A               LDR      R5,[R4, #+32]
    802                      DMA_DCHPRI1 = 0x01;
   \   000005D2   ....               LDR.N    R0,??DataTable79_37  ;; 0x40008102
   \   000005D4   0121               MOVS     R1,#+1
   \   000005D6   0170               STRB     R1,[R0, #+0]
    803                      DMA_DCHPRI2 = 0x01;
   \   000005D8   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008101
   \   000005DA   0121               MOVS     R1,#+1
   \   000005DC   0170               STRB     R1,[R0, #+0]
    804                      /*
    805                      for(j=0;j<2;j++)
    806                      {
    807                        //DMA_DCHPRI(j) = 0x01;
    808                        //printf("\nDCHPRI("); Print8(j); printf(") = "); Print8(DMA_DCHPRI(j));
    809                      }
    810                      */        
    811                      break;
   \   000005DE   5FE0               B.N      ??dma_config_17
    812          	                
    813                    case CONFIG_PRIORITY:
    814          			
    815                      DMA_DCHPRI0 = 0x80 + 0;	//0x80+ 5;
   \                     ??dma_config_16:
   \   000005E0   ....               LDR.N    R0,??DataTable79_39  ;; 0x40008103
   \   000005E2   8021               MOVS     R1,#+128
   \   000005E4   0170               STRB     R1,[R0, #+0]
    816                      DMA_DCHPRI1 = 0x80 + 1;	//0xC0 + 1;	    	
   \   000005E6   ....               LDR.N    R0,??DataTable79_37  ;; 0x40008102
   \   000005E8   8121               MOVS     R1,#+129
   \   000005EA   0170               STRB     R1,[R0, #+0]
    817                      DMA_DCHPRI2 = 0x80 + 2;
   \   000005EC   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008101
   \   000005EE   8221               MOVS     R1,#+130
   \   000005F0   0170               STRB     R1,[R0, #+0]
    818                      DMA_DCHPRI3 = 0x80 + 3;	    	
   \   000005F2   ....               LDR.N    R0,??DataTable79_40  ;; 0x40008100
   \   000005F4   8321               MOVS     R1,#+131
   \   000005F6   0170               STRB     R1,[R0, #+0]
    819                      DMA_DCHPRI4 = 0x80 + 4;
   \   000005F8   ....               LDR.N    R0,??DataTable79_41  ;; 0x40008107
   \   000005FA   8421               MOVS     R1,#+132
   \   000005FC   0170               STRB     R1,[R0, #+0]
    820                      DMA_DCHPRI5 = 0x80 + 5;	//0;
   \   000005FE   ....               LDR.N    R0,??DataTable79_42  ;; 0x40008106
   \   00000600   8521               MOVS     R1,#+133
   \   00000602   0170               STRB     R1,[R0, #+0]
    821                      DMA_DCHPRI6 = 0x80 + 6;
   \   00000604   ....               LDR.N    R0,??DataTable79_43  ;; 0x40008105
   \   00000606   8621               MOVS     R1,#+134
   \   00000608   0170               STRB     R1,[R0, #+0]
    822                      DMA_DCHPRI7 = 0x80 + 7;
   \   0000060A   ....               LDR.N    R0,??DataTable79_44  ;; 0x40008104
   \   0000060C   8721               MOVS     R1,#+135
   \   0000060E   0170               STRB     R1,[R0, #+0]
    823                      DMA_DCHPRI8 = 0x80 + 8;
   \   00000610   ....               LDR.N    R0,??DataTable79_45  ;; 0x4000810b
   \   00000612   8821               MOVS     R1,#+136
   \   00000614   0170               STRB     R1,[R0, #+0]
    824                      DMA_DCHPRI9 = 0x80 + 9;
   \   00000616   ....               LDR.N    R0,??DataTable79_46  ;; 0x4000810a
   \   00000618   8921               MOVS     R1,#+137
   \   0000061A   0170               STRB     R1,[R0, #+0]
    825                      DMA_DCHPRI10 = 0x80 + 10;
   \   0000061C   ....               LDR.N    R0,??DataTable79_47  ;; 0x40008109
   \   0000061E   8A21               MOVS     R1,#+138
   \   00000620   0170               STRB     R1,[R0, #+0]
    826                      DMA_DCHPRI11 = 0x80 + 11;
   \   00000622   ....               LDR.N    R0,??DataTable79_48  ;; 0x40008108
   \   00000624   8B21               MOVS     R1,#+139
   \   00000626   0170               STRB     R1,[R0, #+0]
    827                      DMA_DCHPRI12 = 0x80 + 12;
   \   00000628   ....               LDR.N    R0,??DataTable79_49  ;; 0x4000810f
   \   0000062A   8C21               MOVS     R1,#+140
   \   0000062C   0170               STRB     R1,[R0, #+0]
    828                      DMA_DCHPRI13 = 0x80 + 13;
   \   0000062E   ....               LDR.N    R0,??DataTable79_50  ;; 0x4000810e
   \   00000630   8D21               MOVS     R1,#+141
   \   00000632   0170               STRB     R1,[R0, #+0]
    829                      DMA_DCHPRI14 = 0x80 + 14;
   \   00000634   ....               LDR.N    R0,??DataTable79_51  ;; 0x4000810d
   \   00000636   8E21               MOVS     R1,#+142
   \   00000638   0170               STRB     R1,[R0, #+0]
    830                      DMA_DCHPRI15 = 0x80 + 15;    
   \   0000063A   ....               LDR.N    R0,??DataTable79_52  ;; 0x4000810c
   \   0000063C   8F21               MOVS     R1,#+143
   \   0000063E   0170               STRB     R1,[R0, #+0]
    831          	        
    832                      DMA_CR = 0x0000;
   \   00000640   ....               LDR.N    R0,??DataTable79_53  ;; 0x40008000
   \   00000642   0021               MOVS     R1,#+0
   \   00000644   0160               STR      R1,[R0, #+0]
    833                  
    834                      break;
   \   00000646   2BE0               B.N      ??dma_config_17
    835          	                
    836                    case CHECK_PRI:
    837          		
    838                      i = tcd_value->channelno ;
   \                     ??dma_config_15:
   \   00000648   256A               LDR      R5,[R4, #+32]
    839                      j = tcd_value->link ;
   \   0000064A   E66A               LDR      R6,[R4, #+44]
    840          			
    841                      while((((DMA_TCD_CSR(i) & DMA_CSR_ACTIVE_MASK) == 0) || (( DMA_TCD_CSR(j) & DMA_CSR_DONE_MASK) == 0)) && (DMA_ES == 0));
   \                     ??dma_config_52:
   \   0000064C   ....               LDR.N    R0,??DataTable79_24  ;; 0x40009000
   \   0000064E   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000652   808B               LDRH     R0,[R0, #+28]
   \   00000654   4006               LSLS     R0,R0,#+25
   \   00000656   05D5               BPL.N    ??dma_config_53
   \   00000658   ....               LDR.N    R0,??DataTable79_24  ;; 0x40009000
   \   0000065A   10EB4610           ADDS     R0,R0,R6, LSL #+5
   \   0000065E   808B               LDRH     R0,[R0, #+28]
   \   00000660   0006               LSLS     R0,R0,#+24
   \   00000662   03D4               BMI.N    ??dma_config_54
   \                     ??dma_config_53:
   \   00000664   ....               LDR.N    R0,??DataTable79_26  ;; 0x40008004
   \   00000666   0068               LDR      R0,[R0, #+0]
   \   00000668   0028               CMP      R0,#+0
   \   0000066A   EFD0               BEQ.N    ??dma_config_52
    842                      //while((!( DMA_TCD_CSR(i) &  DMA_TCD_CSR_ACTIVE)) & (!( DMA_ES)) & (!( DMA_TCD_CSR(j) &  DMA_TCD_CSR_DONE))  );
    843                      printf("\nChannel %d transfer is complete and channel %d is preempted \n", j, i);
   \                     ??dma_config_54:
   \   0000066C   2A00               MOVS     R2,R5
   \   0000066E   3100               MOVS     R1,R6
   \   00000670   ........           ADR.W    R0,`?<Constant "\\nChannel %d transfer ...">`
   \   00000674   ........           BL       printf
    844              		    
    845                      while((((DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) == 0) || (( DMA_TCD_CSR(j) & DMA_CSR_DONE_MASK) == 0)) && (DMA_ES == 0));        
   \                     ??dma_config_55:
   \   00000678   ....               LDR.N    R0,??DataTable79_24  ;; 0x40009000
   \   0000067A   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000067E   808B               LDRH     R0,[R0, #+28]
   \   00000680   0006               LSLS     R0,R0,#+24
   \   00000682   05D5               BPL.N    ??dma_config_56
   \   00000684   ....               LDR.N    R0,??DataTable79_24  ;; 0x40009000
   \   00000686   10EB4610           ADDS     R0,R0,R6, LSL #+5
   \   0000068A   808B               LDRH     R0,[R0, #+28]
   \   0000068C   0006               LSLS     R0,R0,#+24
   \   0000068E   03D4               BMI.N    ??dma_config_57
   \                     ??dma_config_56:
   \   00000690   ....               LDR.N    R0,??DataTable79_26  ;; 0x40008004
   \   00000692   0068               LDR      R0,[R0, #+0]
   \   00000694   0028               CMP      R0,#+0
   \   00000696   EFD0               BEQ.N    ??dma_config_55
    846                      //while((!( DMA_TCD_CSR(j) &  DMA_TCD_CSR_DONE)) & (!( DMA_ES)) & (!( DMA_TCD_CSR(j) &  DMA_TCD_CSR_DONE)));
    847                      printf("\nBoth the channels have completed the transfer\n");
   \                     ??dma_config_57:
   \   00000698   ........           ADR.W    R0,`?<Constant "\\nBoth the channels ha...">`
   \   0000069C   ........           BL       printf
    848                              
    849                      break;	               
    850          	}
    851          }
   \                     ??dma_config_17:
   \   000006A0   70BD               POP      {R4-R6,PC}       ;; return
    852          
    853          
    854          //////////////////////////////////
    855          ////////////////////////////////////
    856          //////////////////////////////////////
    857          

   \                                 In section .text, align 2, keep-with-next
    858          void Set_Pit0(void)
    859          {
    860            SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;      // turn on PIT cloccks
   \                     Set_Pit0:
   \   00000000   ....               LDR.N    R0,??DataTable78_2  ;; 0x4004803c
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   50F40000           ORRS     R0,R0,#0x800000
   \   00000008   ....               LDR.N    R1,??DataTable78_2  ;; 0x4004803c
   \   0000000A   0860               STR      R0,[R1, #+0]
    861            PIT_MCR    = 1;                    // reset MDIS -> enable the module
   \   0000000C   ....               LDR.N    R0,??DataTable79_54  ;; 0x40037000
   \   0000000E   0121               MOVS     R1,#+1
   \   00000010   0160               STR      R1,[R0, #+0]
    862          //  PIT_LDVAL0 = 0x017d7840;           // free running on 32 bits 
    863            //PIT_TCTRL0 = PIT_TCTRL_TIE_MASK;   // start the timer
    864            //PIT_TCTRL0 |= PIT_TCTRL_TEN_MASK;   // start the timer
    865            
    866          }  
   \   00000012   7047               BX       LR               ;; return
    867          //////////////////////////////////////
    868          

   \                                 In section .text, align 2, keep-with-next
    869          void Set_Pit1(void)
    870          {
    871            SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;      // turn on PIT cloccks
   \                     Set_Pit1:
   \   00000000   ....               LDR.N    R0,??DataTable78_2  ;; 0x4004803c
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   50F40000           ORRS     R0,R0,#0x800000
   \   00000008   ....               LDR.N    R1,??DataTable78_2  ;; 0x4004803c
   \   0000000A   0860               STR      R0,[R1, #+0]
    872            PIT_MCR    =1;                    // reset MDIS -> enable the module
   \   0000000C   ....               LDR.N    R0,??DataTable79_54  ;; 0x40037000
   \   0000000E   0121               MOVS     R1,#+1
   \   00000010   0160               STR      R1,[R0, #+0]
    873           // PIT_LDVAL1 = 0x017d7840;           // free running on 32 bits 
    874            //PIT_TCTRL0 = PIT_TCTRL_TIE_MASK;   // start the timer
    875            //PIT_TCTRL1 |= PIT_TCTRL_TEN_MASK;   // start the timer
    876            
    877          }  
   \   00000012   7047               BX       LR               ;; return
    878          
    879          ///////////////////////////////////////////////////////////
    880          //                  ADC1 SETUP                           //
    881          // ADC1 wil run 16 bit conversion from two channels      //
    882          // conversions will be hardware triggered by PDB         //
    883          ///////////////////////////////////////////////////////////
    884          
    885          

   \                                 In section .text, align 2, keep-with-next
    886          void Set_ADC1(void) {
   \                     Set_ADC1:
   \   00000000   80B5               PUSH     {R7,LR}
    887            
    888          SIM_SCGC3 |= (SIM_SCGC3_ADC1_MASK );     // ADC1 clock gate on
   \   00000002   ....               LDR.N    R0,??DataTable79_55  ;; 0x40048030
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   50F00060           ORRS     R0,R0,#0x8000000
   \   0000000A   ....               LDR.N    R1,??DataTable79_55  ;; 0x40048030
   \   0000000C   0860               STR      R0,[R1, #+0]
    889          
    890          
    891          
    892          /* setup the initial ADC1 default configuration */
    893          ADC1_CFG1  = ADLPC_NORMAL 
    894                     | ADC_CFG1_ADIV(ADIV_8) 
    895                     | ADLSMP_LONG 
    896                     | ADC_CFG1_MODE(MODE_16)
    897                     | ADC_CFG1_ADICLK(ADICLK_BUS); 
   \   0000000E   ....               LDR.N    R0,??DataTable79_56  ;; 0x400bb008
   \   00000010   7C21               MOVS     R1,#+124
   \   00000012   0160               STR      R1,[R0, #+0]
    898           
    899          ADC1_CFG2  = MUXSEL_ADCA 
    900                     | ADACKEN_DISABLED 
    901                     | ADHSC_HISPEED 
    902                     | ADC_CFG2_ADLSTS(ADLSTS_20) ;
   \   00000014   ....               LDR.N    R0,??DataTable79_57  ;; 0x400bb00c
   \   00000016   0421               MOVS     R1,#+4
   \   00000018   0160               STR      R1,[R0, #+0]
    903           
    904          ADC1_CV1 = 0x1234u ;    // don't care
   \   0000001A   ....               LDR.N    R0,??DataTable79_58  ;; 0x400bb018
   \   0000001C   41F23421           MOVW     R1,#+4660
   \   00000020   0160               STR      R1,[R0, #+0]
    905          ADC1_CV2 = 0x5678u ;    // don't care
   \   00000022   ....               LDR.N    R0,??DataTable79_59  ;; 0x400bb01c
   \   00000024   45F27861           MOVW     R1,#+22136
   \   00000028   0160               STR      R1,[R0, #+0]
    906           
    907          ADC1_SC2  = ADTRG_SW 
    908                    | ACFE_DISABLED 
    909                    | ACFGT_GREATER 
    910                    | ACREN_ENABLED 
    911                    | DMAEN_DISABLED 
    912                    | ADC_SC2_REFSEL(REFSEL_EXT);  
   \   0000002A   ....               LDR.N    R0,??DataTable79_60  ;; 0x400bb020
   \   0000002C   1821               MOVS     R1,#+24
   \   0000002E   0160               STR      R1,[R0, #+0]
    913            
    914          ADC1_SC3  = CAL_OFF 
    915                    | ADCO_SINGLE 
    916                    | AVGE_ENABLED 
    917                    | ADC_SC3_AVGS(AVGS_32);
   \   00000030   ....               LDR.N    R0,??DataTable79_61  ;; 0x400bb024
   \   00000032   0721               MOVS     R1,#+7
   \   00000034   0160               STR      R1,[R0, #+0]
    918            
    919          ADC1_PGA  = PGAEN_DISABLED 
    920                    | PGACHP_NOCHOP 
    921                    | PGALP_NORMAL 
    922                    | ADC_PGA_PGAG(PGAG_64);
   \   00000036   ....               LDR.N    R0,??DataTable79_62  ;; 0x400bb050
   \   00000038   5FF4C021           MOVS     R1,#+393216
   \   0000003C   0160               STR      R1,[R0, #+0]
    923           
    924          ADC1_SC1A = AIEN_OFF | DIFF_SINGLE | ADC_SC1_ADCH(23);   // channel 23 on ADC1 is connected to DAC1 output
   \   0000003E   ....               LDR.N    R0,??DataTable79_63  ;; 0x400bb000
   \   00000040   1721               MOVS     R1,#+23
   \   00000042   0160               STR      R1,[R0, #+0]
    925          ADC1_SC1B = AIEN_OFF | DIFF_SINGLE | ADC_SC1_ADCH(20);   // channel 20 on ADC1 is connected to potentiometer      
   \   00000044   ....               LDR.N    R0,??DataTable79_64  ;; 0x400bb004
   \   00000046   1421               MOVS     R1,#+20
   \   00000048   0160               STR      R1,[R0, #+0]
    926            
    927          
    928          ADC1_Cal();                    // do the calibration
   \   0000004A   ........           BL       ADC1_Cal
    929          
    930          // reconfig again values that calibration has altered AND enable interrupts on "B" conversion
    931          
    932              
    933          
    934          ADC1_SC2  = ADTRG_SW
    935                    | ACFE_DISABLED 
    936                    | ACFGT_GREATER 
    937                    | ACREN_ENABLED 
    938                    | DMAEN_DISABLED 
    939                    | ADC_SC2_REFSEL(REFSEL_EXT);  
   \   0000004E   ....               LDR.N    R0,??DataTable79_60  ;; 0x400bb020
   \   00000050   1821               MOVS     R1,#+24
   \   00000052   0160               STR      R1,[R0, #+0]
    940            
    941          ADC1_SC3  = CAL_OFF 
    942                    | ADCO_SINGLE 
    943                    | AVGE_DISABLED 
    944                    | ADC_SC3_AVGS(AVGS_32);
   \   00000054   ....               LDR.N    R0,??DataTable79_61  ;; 0x400bb024
   \   00000056   0321               MOVS     R1,#+3
   \   00000058   0160               STR      R1,[R0, #+0]
    945          
    946          }
   \   0000005A   01BD               POP      {R0,PC}          ;; return
    947          

   \                                 In section .text, align 2, keep-with-next
    948          int8 ADC1_Cal(void)
    949          {
    950          
    951            unsigned short cal_var;
    952            
    953            ADC1_SC2 &=  ~ADC_SC2_ADTRG_MASK ; // Enable Software Conversion Trigger for Calibration Process    - ADC0_SC2 = ADC0_SC2 | ADC_SC2_ADTRGW(0);   
   \                     ADC1_Cal:
   \   00000000   ....               LDR.N    R0,??DataTable79_60  ;; 0x400bb020
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   30F04000           BICS     R0,R0,#0x40
   \   00000008   ....               LDR.N    R1,??DataTable79_60  ;; 0x400bb020
   \   0000000A   0860               STR      R0,[R1, #+0]
    954            ADC1_SC3 &= ( ~ADC_SC3_ADCO_MASK & ~ADC_SC3_AVGS_MASK ); // set single conversion, clear avgs bitfield for next writing
   \   0000000C   ....               LDR.N    R0,??DataTable79_61  ;; 0x400bb024
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   30F00B00           BICS     R0,R0,#0xB
   \   00000014   ....               LDR.N    R1,??DataTable79_61  ;; 0x400bb024
   \   00000016   0860               STR      R0,[R1, #+0]
    955            ADC1_SC3 |= ( ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(AVGS_32) );  // Turn averaging ON and set at max value ( 32 )
   \   00000018   ....               LDR.N    R0,??DataTable79_61  ;; 0x400bb024
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   50F00700           ORRS     R0,R0,#0x7
   \   00000020   ....               LDR.N    R1,??DataTable79_61  ;; 0x400bb024
   \   00000022   0860               STR      R0,[R1, #+0]
    956            
    957            
    958            ADC1_SC3 |= ADC_SC3_CAL_MASK ;      // Start CAL
   \   00000024   ....               LDR.N    R0,??DataTable79_61  ;; 0x400bb024
   \   00000026   0068               LDR      R0,[R0, #+0]
   \   00000028   50F08000           ORRS     R0,R0,#0x80
   \   0000002C   ....               LDR.N    R1,??DataTable79_61  ;; 0x400bb024
   \   0000002E   0860               STR      R0,[R1, #+0]
    959            while ( ( ADC1_SC1A & ADC_SC1_COCO_MASK ) == COCO_NOT ); // Wait calibration end
   \                     ??ADC1_Cal_0:
   \   00000030   ....               LDR.N    R0,??DataTable79_63  ;; 0x400bb000
   \   00000032   0068               LDR      R0,[R0, #+0]
   \   00000034   0006               LSLS     R0,R0,#+24
   \   00000036   FBD5               BPL.N    ??ADC1_Cal_0
    960            	
    961            if ((ADC1_SC3 & ADC_SC3_CALF_MASK) == CALF_FAIL ) return(0);    // Check for Calibration fail error and return 
   \   00000038   ....               LDR.N    R0,??DataTable79_61  ;; 0x400bb024
   \   0000003A   0068               LDR      R0,[R0, #+0]
   \   0000003C   4006               LSLS     R0,R0,#+25
   \   0000003E   01D5               BPL.N    ??ADC1_Cal_1
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   3EE0               B.N      ??ADC1_Cal_2
    962          
    963            // Calculate plus-side calibration as per 21.4.7 
    964            cal_var = 0x00;
   \                     ??ADC1_Cal_1:
   \   00000044   0020               MOVS     R0,#+0
    965            
    966            cal_var =  ADC1_CLP0; 
   \   00000046   ....               LDR.N    R1,??DataTable79_65  ;; 0x400bb04c
   \   00000048   0968               LDR      R1,[R1, #+0]
   \   0000004A   0800               MOVS     R0,R1
    967            cal_var += ADC1_CLP1;
   \   0000004C   ....               LDR.N    R1,??DataTable79_66  ;; 0x400bb048
   \   0000004E   0968               LDR      R1,[R1, #+0]
   \   00000050   0818               ADDS     R0,R1,R0
    968            cal_var += ADC1_CLP2;
   \   00000052   ....               LDR.N    R1,??DataTable79_67  ;; 0x400bb044
   \   00000054   0968               LDR      R1,[R1, #+0]
   \   00000056   0818               ADDS     R0,R1,R0
    969            cal_var += ADC1_CLP3;
   \   00000058   ....               LDR.N    R1,??DataTable79_68  ;; 0x400bb040
   \   0000005A   0968               LDR      R1,[R1, #+0]
   \   0000005C   0818               ADDS     R0,R1,R0
    970            cal_var += ADC1_CLP4;
   \   0000005E   ....               LDR.N    R1,??DataTable79_69  ;; 0x400bb03c
   \   00000060   0968               LDR      R1,[R1, #+0]
   \   00000062   0818               ADDS     R0,R1,R0
    971            cal_var += ADC1_CLPS;
   \   00000064   ....               LDR.N    R1,??DataTable79_70  ;; 0x400bb038
   \   00000066   0968               LDR      R1,[R1, #+0]
   \   00000068   0818               ADDS     R0,R1,R0
    972          
    973            cal_var = cal_var/2;
   \   0000006A   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006C   0221               MOVS     R1,#+2
   \   0000006E   90FBF1F0           SDIV     R0,R0,R1
    974            cal_var |= 0x8000; // Set MSB
   \   00000072   50F40040           ORRS     R0,R0,#0x8000
    975          
    976            ADC1_PG = ADC_PG_PG(cal_var);
   \   00000076   ....               LDR.N    R1,??DataTable79_71  ;; 0x400bb02c
   \   00000078   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007A   0860               STR      R0,[R1, #+0]
    977           
    978          
    979            // Calculate minus-side calibration as per 21.4.7 
    980            cal_var = 0x00;
   \   0000007C   0020               MOVS     R0,#+0
    981          
    982            cal_var =  ADC1_CLM0; 
   \   0000007E   ....               LDR.N    R1,??DataTable79_72  ;; 0x400bb06c
   \   00000080   0968               LDR      R1,[R1, #+0]
   \   00000082   0800               MOVS     R0,R1
    983            cal_var += ADC1_CLM1;
   \   00000084   ....               LDR.N    R1,??DataTable79_73  ;; 0x400bb068
   \   00000086   0968               LDR      R1,[R1, #+0]
   \   00000088   0818               ADDS     R0,R1,R0
    984            cal_var += ADC1_CLM2;
   \   0000008A   ....               LDR.N    R1,??DataTable79_74  ;; 0x400bb064
   \   0000008C   0968               LDR      R1,[R1, #+0]
   \   0000008E   0818               ADDS     R0,R1,R0
    985            cal_var += ADC1_CLM3;
   \   00000090   ....               LDR.N    R1,??DataTable79_75  ;; 0x400bb060
   \   00000092   0968               LDR      R1,[R1, #+0]
   \   00000094   0818               ADDS     R0,R1,R0
    986            cal_var += ADC1_CLM4;
   \   00000096   ....               LDR.N    R1,??DataTable79_76  ;; 0x400bb05c
   \   00000098   0968               LDR      R1,[R1, #+0]
   \   0000009A   0818               ADDS     R0,R1,R0
    987            cal_var += ADC1_CLMS;
   \   0000009C   ....               LDR.N    R1,??DataTable79_77  ;; 0x400bb058
   \   0000009E   0968               LDR      R1,[R1, #+0]
   \   000000A0   0818               ADDS     R0,R1,R0
    988          
    989            cal_var = cal_var/2;
   \   000000A2   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A4   0221               MOVS     R1,#+2
   \   000000A6   90FBF1F0           SDIV     R0,R0,R1
    990          
    991            cal_var |= 0x8000; // Set MSB
   \   000000AA   50F40040           ORRS     R0,R0,#0x8000
    992          
    993            ADC1_MG = ADC_MG_MG(cal_var); 
   \   000000AE   ....               LDR.N    R1,??DataTable79_78  ;; 0x400bb030
   \   000000B0   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B2   0860               STR      R0,[R1, #+0]
    994            
    995            ADC1_SC3 &= ~ADC_SC3_CAL_MASK ; /* Clear CAL bit */
   \   000000B4   ....               LDR.N    R0,??DataTable79_61  ;; 0x400bb024
   \   000000B6   0068               LDR      R0,[R0, #+0]
   \   000000B8   30F08000           BICS     R0,R0,#0x80
   \   000000BC   ....               LDR.N    R1,??DataTable79_61  ;; 0x400bb024
   \   000000BE   0860               STR      R0,[R1, #+0]
    996          
    997            return(0);
   \   000000C0   0020               MOVS     R0,#+0
   \                     ??ADC1_Cal_2:
   \   000000C2   7047               BX       LR               ;; return
    998          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68:
   \   00000000   0A000000           DC8      "\n",0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   ........           DC32     `?<Constant "\\n--------------------...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_1:
   \   00000000   ........           DC32     `?<Constant "       PIT Register R...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_2:
   \   00000000   ........           DC32     `?<Constant "---------------------...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_3:
   \   00000000   00710340           DC32     0x40037100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_4:
   \   00000000   ........           DC32     `?<Constant "Pit0   = %d \\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_5:
   \   00000000   10710340           DC32     0x40037110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_6:
   \   00000000   ........           DC32     res_ptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_7:
   \   00000000   ........           DC32     `?<Constant " PIT Single Register ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_8:
   \   00000000   ........           DC32     `?<Constant "Valid \\'wrt\\' syntax:\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_9:
   \   00000000   ........           DC32     `?<Constant "PIT0 frequency(Hz) > ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_10:
   \   00000000   ........           DC32     `?<Constant "PIT1 frequency(Hz) > ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_11:
   \   00000000   ........           DC32     `?<Constant "PIT0 to PIT1 phase(co...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_12:
   \   00000000   ........           DC32     `?<Constant "PIT1 to PIT0 phase(co...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_13:
   \   00000000   ........           DC32     `?<Constant "PIT1 to PIT0 phase(co...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76:
   \   00000000   006CDC02           DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76_1:
   \   00000000   00770100           DC32     0x17700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77:
   \   00000000   ........           DC32     thld1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_1:
   \   00000000   ........           DC32     thld2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_2:
   \   00000000   08710340           DC32     0x40037108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_3:
   \   00000000   18710340           DC32     0x40037118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_4:
   \   00000000   C4F00F40           DC32     0x400ff0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_5:
   \   00000000   04F00F40           DC32     0x400ff004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_6:
   \   00000000   1C710340           DC32     0x4003711c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   ........           DC32     `?<Constant "Pit1   = %d \\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_1:
   \   00000000   0C710340           DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_2:
   \   00000000   3C800440           DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_3:
   \   00000000   00100240           DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_4:
   \   00000000   01100240           DC32     0x40021001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_5:
   \   00000000   ........           DC32     `?<Constant "\\nStarting eDMA 32-bit...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_6:
   \   00000000   ........           DC32     Dma_Source_WORD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_7:
   \   00000000   ........           DC32     tcd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_8:
   \   00000000   CCF00F40           DC32     0x400ff0cc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79:
   \   00000000   ........           DC32     `?<Constant "Register value not in...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_1:
   \   00000000   0C800040           DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_2:
   \   00000000   ........           DC32     Dma_Source_WORD+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_3:
   \   00000000   0CF00F40           DC32     0x400ff00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_4:
   \   00000000   ........           DC32     `?<Constant "TWR-K40X256 GPIO Exam...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_5:
   \   00000000   38800440           DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_6:
   \   00000000   ........           DC32     ADC_PDATA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_7:
   \   00000000   2CA00440           DC32     0x4004a02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_8:
   \   00000000   1CB00440           DC32     0x4004b01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_9:
   \   00000000   20B00440           DC32     0x4004b020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_10:
   \   00000000   24B00440           DC32     0x4004b024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_11:
   \   00000000   18C00440           DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_12:
   \   00000000   1CC00440           DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_13:
   \   00000000   00010300           DC32     0x30100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_14:
   \   00000000   40900440           DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_15:
   \   00000000   54F00F40           DC32     0x400ff054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_16:
   \   00000000   94F00F40           DC32     0x400ff094

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_17:
   \   00000000   D4F00F40           DC32     0x400ff0d4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_18:
   \   00000000   14F00F40           DC32     0x400ff014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_19:
   \   00000000   A0B00440           DC32     0x4004b0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_20:
   \   00000000   ........           DC32     `?<Constant "SW6 Pressed\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_21:
   \   00000000   ........           DC32     `?<Constant "SW7 Pressed\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_22:
   \   00000000   A0D00440           DC32     0x4004d0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_23:
   \   00000000   A0900440           DC32     0x400490a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_24:
   \   00000000   00900040           DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_25:
   \   00000000   1D800040           DC32     0x4000801d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_26:
   \   00000000   04800040           DC32     0x40008004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_27:
   \   00000000   ........           DC32     dma_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_28:
   \   00000000   ........           DC32     `?<Constant "\\nERROR!!! An error oc...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_29:
   \   00000000   ........           DC32     `?<Constant "\\nDMA_ES = 0x%x">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_30:
   \   00000000   2C800040           DC32     0x4000802c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_31:
   \   00000000   ........           DC32     `?<Constant "\\nDMA_ERR = 0x%x">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_32:
   \   00000000   ........           DC32     `?<Constant "\\nData error!">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_33:
   \   00000000   ........           DC32     `?<Constant "\\nSADDR: 0x%x = 0x%x">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_34:
   \   00000000   ........           DC32     `?<Constant "\\nDADDR: 0x%x = 0x%x">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_35:
   \   00000000   ........           DC32     `?<Constant "\\nTesting DMA channel %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_36:
   \   00000000   1E800040           DC32     0x4000801e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_37:
   \   00000000   02810040           DC32     0x40008102

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_38:
   \   00000000   01810040           DC32     0x40008101

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_39:
   \   00000000   03810040           DC32     0x40008103

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_40:
   \   00000000   00810040           DC32     0x40008100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_41:
   \   00000000   07810040           DC32     0x40008107

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_42:
   \   00000000   06810040           DC32     0x40008106

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_43:
   \   00000000   05810040           DC32     0x40008105

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_44:
   \   00000000   04810040           DC32     0x40008104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_45:
   \   00000000   0B810040           DC32     0x4000810b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_46:
   \   00000000   0A810040           DC32     0x4000810a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_47:
   \   00000000   09810040           DC32     0x40008109

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_48:
   \   00000000   08810040           DC32     0x40008108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_49:
   \   00000000   0F810040           DC32     0x4000810f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_50:
   \   00000000   0E810040           DC32     0x4000810e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_51:
   \   00000000   0D810040           DC32     0x4000810d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_52:
   \   00000000   0C810040           DC32     0x4000810c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_53:
   \   00000000   00800040           DC32     0x40008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_54:
   \   00000000   00700340           DC32     0x40037000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_55:
   \   00000000   30800440           DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_56:
   \   00000000   08B00B40           DC32     0x400bb008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_57:
   \   00000000   0CB00B40           DC32     0x400bb00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_58:
   \   00000000   18B00B40           DC32     0x400bb018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_59:
   \   00000000   1CB00B40           DC32     0x400bb01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_60:
   \   00000000   20B00B40           DC32     0x400bb020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_61:
   \   00000000   24B00B40           DC32     0x400bb024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_62:
   \   00000000   50B00B40           DC32     0x400bb050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_63:
   \   00000000   00B00B40           DC32     0x400bb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_64:
   \   00000000   04B00B40           DC32     0x400bb004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_65:
   \   00000000   4CB00B40           DC32     0x400bb04c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_66:
   \   00000000   48B00B40           DC32     0x400bb048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_67:
   \   00000000   44B00B40           DC32     0x400bb044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_68:
   \   00000000   40B00B40           DC32     0x400bb040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_69:
   \   00000000   3CB00B40           DC32     0x400bb03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_70:
   \   00000000   38B00B40           DC32     0x400bb038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_71:
   \   00000000   2CB00B40           DC32     0x400bb02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_72:
   \   00000000   6CB00B40           DC32     0x400bb06c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_73:
   \   00000000   68B00B40           DC32     0x400bb068

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_74:
   \   00000000   64B00B40           DC32     0x400bb064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_75:
   \   00000000   60B00B40           DC32     0x400bb060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_76:
   \   00000000   5CB00B40           DC32     0x400bb05c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_77:
   \   00000000   58B00B40           DC32     0x400bb058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_78:
   \   00000000   30B00B40           DC32     0x400bb030

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "help">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   68656C700000       DC8 104, 101, 108, 112, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Help">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   48656C700000       DC8 72, 101, 108, 112, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<cmd>">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   3C636D643E00       DC8 60, 99, 109, 100, 62, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "set">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   73657400           DC8 115, 101, 116, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Set Config">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   53657420436F       DC8 83, 101, 116, 32, 67, 111, 110, 102, 105, 103
   \              6E666967    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<option value>">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   3C6F7074696F       DC8 60, 111, 112, 116, 105, 111, 110, 32, 118, 97
   \              6E207661    
   \   0000000A   6C75653E0000       DC8 108, 117, 101, 62, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "show">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   73686F770000       DC8 115, 104, 111, 119, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Show Config">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   53686F772043       DC8 83, 104, 111, 119, 32, 67, 111, 110, 102, 105
   \              6F6E6669    
   \   0000000A   6700               DC8 103, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<option>">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   3C6F7074696F       DC8 60, 111, 112, 116, 105, 111, 110, 62, 0, 0
   \              6E3E0000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "rd">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   72640000           DC8 114, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Register Display">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   526567697374       DC8 82, 101, 103, 105, 115, 116, 101, 114, 32, 68
   \              65722044    
   \   0000000A   6973706C6179       DC8 105, 115, 112, 108, 97, 121, 0, 0, 0, 0
   \              00000000    

   \                                 In section .text, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000                      ; Initializer data, 1 bytes
   \   00000000   00                 DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "wrt">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   77727400           DC8 119, 114, 116, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Write PIT  <register ...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   577269746520       DC8 87, 114, 105, 116, 101, 32, 80, 73, 84, 32
   \              50495420    
   \   0000000A   203C72656769       DC8 32, 60, 114, 101, 103, 105, 115, 116, 101, 114
   \              73746572    
   \   00000014   20696E646578       DC8 32, 105, 110, 100, 101, 120, 62, 32, 60, 118
   \              3E203C76    
   \   0000001E   616C75653E00       DC8 97, 108, 117, 101, 62, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n--------------------...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   0A2D2D2D2D2D       DC8 10, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   0000000A   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   00000014   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   0000001E   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   00000028   2D2D2D2D0A00       DC8 45, 45, 45, 45, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       PIT Register R...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   202020202020       DC8 32, 32, 32, 32, 32, 32, 32, 80, 73, 84
   \              20504954    
   \   0000000A   205265676973       DC8 32, 82, 101, 103, 105, 115, 116, 101, 114, 32
   \              74657220    
   \   00000014   526561642055       DC8 82, 101, 97, 100, 32, 85, 116, 105, 108, 105
   \              74696C69    
   \   0000001E   74790A000000       DC8 116, 121, 10, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "---------------------...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   0000000A   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   00000014   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   0000001E   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   00000028   2D2D2D0A0000       DC8 45, 45, 45, 10, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "sysclk">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   737973636C6B       DC8 115, 121, 115, 99, 108, 107, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Pit0   = %d \\r\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   506974302020       DC8 80, 105, 116, 48, 32, 32, 32, 61, 32, 37
   \              203D2025    
   \   0000000A   64200D0A0000       DC8 100, 32, 13, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Pit1   = %d \\r\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   506974312020       DC8 80, 105, 116, 49, 32, 32, 32, 61, 32, 37
   \              203D2025    
   \   0000000A   64200D0A0000       DC8 100, 32, 13, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " PIT Single Register ...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   205049542053       DC8 32, 80, 73, 84, 32, 83, 105, 110, 103, 108
   \              696E676C    
   \   0000000A   652052656769       DC8 101, 32, 82, 101, 103, 105, 115, 116, 101, 114
   \              73746572    
   \   00000014   205772697465       DC8 32, 87, 114, 105, 116, 101, 32, 85, 116, 105
   \              20557469    
   \   0000001E   6C6974790A00       DC8 108, 105, 116, 121, 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Valid \\'wrt\\' syntax:\\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   56616C696420       DC8 86, 97, 108, 105, 100, 32, 39, 119, 114, 116
   \              27777274    
   \   0000000A   272073796E74       DC8 39, 32, 115, 121, 110, 116, 97, 120, 58, 10
   \              61783A0A    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "PIT0 frequency(Hz) > ...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   504954302066       DC8 80, 73, 84, 48, 32, 102, 114, 101, 113, 117
   \              72657175    
   \   0000000A   656E63792848       DC8 101, 110, 99, 121, 40, 72, 122, 41, 32, 62
   \              7A29203E    
   \   00000014   207772742020       DC8 32, 119, 114, 116, 32, 32, 60, 48, 62, 32
   \              3C303E20    
   \   0000001E   3C76616C7565       DC8 60, 118, 97, 108, 117, 101, 40, 72, 122, 41
   \              28487A29    
   \   00000028   3E200A0A0000       DC8 62, 32, 10, 10, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "PIT1 frequency(Hz) > ...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   504954312066       DC8 80, 73, 84, 49, 32, 102, 114, 101, 113, 117
   \              72657175    
   \   0000000A   656E63792848       DC8 101, 110, 99, 121, 40, 72, 122, 41, 32, 62
   \              7A29203E    
   \   00000014   207772742020       DC8 32, 119, 114, 116, 32, 32, 60, 49, 62, 32
   \              3C313E20    
   \   0000001E   3C76616C7565       DC8 60, 118, 97, 108, 117, 101, 40, 72, 122, 41
   \              28487A29    
   \   00000028   3E200A0A0000       DC8 62, 32, 10, 10, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "PIT0 to PIT1 phase(co...">`:
   \   00000000                      ; Initializer data, 68 bytes
   \   00000000   504954302074       DC8 80, 73, 84, 48, 32, 116, 111, 32, 80, 73
   \              6F205049    
   \   0000000A   543120706861       DC8 84, 49, 32, 112, 104, 97, 115, 101, 40, 99
   \              73652863    
   \   00000014   6F756E747320       DC8 111, 117, 110, 116, 115, 32, 102, 114, 111, 109
   \              66726F6D    
   \   0000001E   204120746F20       DC8 32, 65, 32, 116, 111, 32, 66, 41, 62, 32
   \              42293E20    
   \   00000028   77727420203C       DC8 119, 114, 116, 32, 32, 60, 50, 62, 32, 60
   \              323E203C    
   \   00000032   76616C756528       DC8 118, 97, 108, 117, 101, 40, 99, 111, 117, 110
   \              636F756E    
   \   0000003C   7473293E200A       DC8 116, 115, 41, 62, 32, 10, 10, 0
   \              0A00        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "PIT1 to PIT0 phase(co...">`:
   \   00000000                      ; Initializer data, 68 bytes
   \   00000000   504954312074       DC8 80, 73, 84, 49, 32, 116, 111, 32, 80, 73
   \              6F205049    
   \   0000000A   543020706861       DC8 84, 48, 32, 112, 104, 97, 115, 101, 40, 99
   \              73652863    
   \   00000014   6F756E747320       DC8 111, 117, 110, 116, 115, 32, 102, 114, 111, 109
   \              66726F6D    
   \   0000001E   204220746F20       DC8 32, 66, 32, 116, 111, 32, 65, 41, 62, 32
   \              41293E20    
   \   00000028   77727420203C       DC8 119, 114, 116, 32, 32, 60, 51, 62, 32, 60
   \              333E203C    
   \   00000032   76616C756528       DC8 118, 97, 108, 117, 101, 40, 99, 111, 117, 110
   \              636F756E    
   \   0000003C   7473293E200A       DC8 116, 115, 41, 62, 32, 10, 10, 0
   \              0A00        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "PIT1 to PIT0 phase(co...">_1`:
   \   00000000                      ; Initializer data, 72 bytes
   \   00000000   504954312074       DC8 80, 73, 84, 49, 32, 116, 111, 32, 80, 73
   \              6F205049    
   \   0000000A   543020706861       DC8 84, 48, 32, 112, 104, 97, 115, 101, 40, 99
   \              73652863    
   \   00000014   6F756E747320       DC8 111, 117, 110, 116, 115, 32, 102, 114, 111, 109
   \              66726F6D    
   \   0000001E   204220746F20       DC8 32, 66, 32, 116, 111, 32, 65, 41, 32, 62
   \              4129203E    
   \   00000028   207772742020       DC8 32, 119, 114, 116, 32, 32, 60, 51, 62, 32
   \              3C333E20    
   \   00000032   3C76616C7565       DC8 60, 118, 97, 108, 117, 101, 40, 99, 111, 117
   \              28636F75    
   \   0000003C   6E7473293E20       DC8 110, 116, 115, 41, 62, 32, 10, 10, 0, 0
   \              0A0A0000    
   \   00000046   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Register value not in...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   526567697374       DC8 82, 101, 103, 105, 115, 116, 101, 114, 32, 118
   \              65722076    
   \   0000000A   616C7565206E       DC8 97, 108, 117, 101, 32, 110, 111, 116, 32, 105
   \              6F742069    
   \   00000014   6E2076616C69       DC8 110, 32, 118, 97, 108, 105, 100, 32, 114, 97
   \              64207261    
   \   0000001E   6E67652E0D0A       DC8 110, 103, 101, 46, 13, 10, 10, 0, 0, 0
   \              0A000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nStarting eDMA 32-bit...">`:
   \   00000000                      ; Initializer data, 56 bytes
   \   00000000   0A5374617274       DC8 10, 83, 116, 97, 114, 116, 105, 110, 103, 32
   \              696E6720    
   \   0000000A   65444D412033       DC8 101, 68, 77, 65, 32, 51, 50, 45, 98, 105
   \              322D6269    
   \   00000014   74206D656D6F       DC8 116, 32, 109, 101, 109, 111, 114, 121, 32, 116
   \              72792074    
   \   0000001E   6F206D656D6F       DC8 111, 32, 109, 101, 109, 111, 114, 121, 32, 116
   \              72792074    
   \   00000028   72616E736665       DC8 114, 97, 110, 115, 102, 101, 114, 32, 116, 101
   \              72207465    
   \   00000032   7374210A0000       DC8 115, 116, 33, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TWR-K40X256 GPIO Exam...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   5457522D4B34       DC8 84, 87, 82, 45, 75, 52, 48, 88, 50, 53
   \              30583235    
   \   0000000A   36204750494F       DC8 54, 32, 71, 80, 73, 79, 32, 69, 120, 97
   \              20457861    
   \   00000014   6D706C65210A       DC8 109, 112, 108, 101, 33, 10, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SW6 Pressed\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   535736205072       DC8 83, 87, 54, 32, 80, 114, 101, 115, 115, 101
   \              65737365    
   \   0000000A   640A00000000       DC8 100, 10, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SW7 Pressed\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   535737205072       DC8 83, 87, 55, 32, 80, 114, 101, 115, 115, 101
   \              65737365    
   \   0000000A   640A00000000       DC8 100, 10, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nERROR!!! An error oc...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   0A4552524F52       DC8 10, 69, 82, 82, 79, 82, 33, 33, 33, 32
   \              21212120    
   \   0000000A   416E20657272       DC8 65, 110, 32, 101, 114, 114, 111, 114, 32, 111
   \              6F72206F    
   \   00000014   637572726564       DC8 99, 117, 114, 114, 101, 100, 32, 119, 104, 105
   \              20776869    
   \   0000001E   6C652070726F       DC8 108, 101, 32, 112, 114, 111, 99, 101, 115, 115
   \              63657373    
   \   00000028   696E672E0A00       DC8 105, 110, 103, 46, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDMA_ES = 0x%x">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   0A444D415F45       DC8 10, 68, 77, 65, 95, 69, 83, 32, 61, 32
   \              53203D20    
   \   0000000A   307825780000       DC8 48, 120, 37, 120, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDMA_ERR = 0x%x">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   0A444D415F45       DC8 10, 68, 77, 65, 95, 69, 82, 82, 32, 61
   \              5252203D    
   \   0000000A   203078257800       DC8 32, 48, 120, 37, 120, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nData error!">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   0A4461746120       DC8 10, 68, 97, 116, 97, 32, 101, 114, 114, 111
   \              6572726F    
   \   0000000A   722100000000       DC8 114, 33, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSADDR: 0x%x = 0x%x">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   0A5341444452       DC8 10, 83, 65, 68, 68, 82, 58, 32, 48, 120
   \              3A203078    
   \   0000000A   2578203D2030       DC8 37, 120, 32, 61, 32, 48, 120, 37, 120, 0
   \              78257800    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDADDR: 0x%x = 0x%x">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   0A4441444452       DC8 10, 68, 65, 68, 68, 82, 58, 32, 48, 120
   \              3A203078    
   \   0000000A   2578203D2030       DC8 37, 120, 32, 61, 32, 48, 120, 37, 120, 0
   \              78257800    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nTesting DMA channel %d">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   0A5465737469       DC8 10, 84, 101, 115, 116, 105, 110, 103, 32, 68
   \              6E672044    
   \   0000000A   4D4120636861       DC8 77, 65, 32, 99, 104, 97, 110, 110, 101, 108
   \              6E6E656C    
   \   00000014   20256400           DC8 32, 37, 100, 0

   \                                 In section .text, align 2, keep-with-next
   \                     `?<Constant "\\n">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSLAST adjustment is ...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A534C415354       DC8 10, 83, 76, 65, 83, 84, 32, 97, 100, 106
   \              2061646A    
   \   0000000A   7573746D656E       DC8 117, 115, 116, 109, 101, 110, 116, 32, 105, 115
   \              74206973    
   \   00000014   20636F727265       DC8 32, 99, 111, 114, 114, 101, 99, 116, 46, 0
   \              63742E00    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nERROR!!! SLAST adjus...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   0A4552524F52       DC8 10, 69, 82, 82, 79, 82, 33, 33, 33, 32
   \              21212120    
   \   0000000A   534C41535420       DC8 83, 76, 65, 83, 84, 32, 97, 100, 106, 117
   \              61646A75    
   \   00000014   73746D656E74       DC8 115, 116, 109, 101, 110, 116, 32, 110, 111, 116
   \              206E6F74    
   \   0000001E   20636F727265       DC8 32, 99, 111, 114, 114, 101, 99, 116, 46, 0
   \              63742E00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSADDR = 0x%x">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   0A5341444452       DC8 10, 83, 65, 68, 68, 82, 32, 61, 32, 48
   \              203D2030    
   \   0000000A   782578000000       DC8 120, 37, 120, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDLAST adjustment is ...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A444C415354       DC8 10, 68, 76, 65, 83, 84, 32, 97, 100, 106
   \              2061646A    
   \   0000000A   7573746D656E       DC8 117, 115, 116, 109, 101, 110, 116, 32, 105, 115
   \              74206973    
   \   00000014   20636F727265       DC8 32, 99, 111, 114, 114, 101, 99, 116, 46, 0
   \              63742E00    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nERROR!!! DLAST adjus...">`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   0A4552524F52       DC8 10, 69, 82, 82, 79, 82, 33, 33, 33, 32
   \              21212120    
   \   0000000A   444C41535420       DC8 68, 76, 65, 83, 84, 32, 97, 100, 106, 117
   \              61646A75    
   \   00000014   73746D656E74       DC8 115, 116, 109, 101, 110, 116, 32, 110, 111, 116
   \              206E6F74    
   \   0000001E   20636F727265       DC8 32, 99, 111, 114, 114, 101, 99, 116, 46, 10
   \              63742E0A    
   \   00000028   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDADDR = 0x%x">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   0A4441444452       DC8 10, 68, 65, 68, 68, 82, 32, 61, 32, 48
   \              203D2030    
   \   0000000A   782578000000       DC8 120, 37, 120, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nTesting DMA channel %d.">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   0A5465737469       DC8 10, 84, 101, 115, 116, 105, 110, 103, 32, 68
   \              6E672044    
   \   0000000A   4D4120636861       DC8 77, 65, 32, 99, 104, 97, 110, 110, 101, 108
   \              6E6E656C    
   \   00000014   2025642E0000       DC8 32, 37, 100, 46, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDAE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A4441452065       DC8 10, 68, 65, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDBE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A4442452065       DC8 10, 68, 66, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDOE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A444F452065       DC8 10, 68, 79, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nNCE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A4E43452065       DC8 10, 78, 67, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSAE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A5341452065       DC8 10, 83, 65, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nCPE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A4350452065       DC8 10, 67, 80, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSBE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A5342452065       DC8 10, 83, 66, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSGE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A5347452065       DC8 10, 83, 71, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSOE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A534F452065       DC8 10, 83, 79, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nError cancel transfe...">`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   0A4572726F72       DC8 10, 69, 114, 114, 111, 114, 32, 99, 97, 110
   \              2063616E    
   \   0000000A   63656C207472       DC8 99, 101, 108, 32, 116, 114, 97, 110, 115, 102
   \              616E7366    
   \   00000014   657220646574       DC8 101, 114, 32, 100, 101, 116, 101, 99, 116, 101
   \              65637465    
   \   0000001E   6420636F7272       DC8 100, 32, 99, 111, 114, 114, 101, 99, 116, 108
   \              6563746C    
   \   00000028   792E0A00           DC8 121, 46, 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nERROR NOT DETECTED!!!\\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   0A4552524F52       DC8 10, 69, 82, 82, 79, 82, 32, 78, 79, 84
   \              204E4F54    
   \   0000000A   204445544543       DC8 32, 68, 69, 84, 69, 67, 84, 69, 68, 33
   \              54454421    
   \   00000014   21210A00           DC8 33, 33, 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nNO ERROR DETECTED!!!\\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   0A4E4F204552       DC8 10, 78, 79, 32, 69, 82, 82, 79, 82, 32
   \              524F5220    
   \   0000000A   444554454354       DC8 68, 69, 84, 69, 67, 84, 69, 68, 33, 33
   \              45442121    
   \   00000014   210A0000           DC8 33, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nBefore DMA_ERR = 0x%x">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   0A4265666F72       DC8 10, 66, 101, 102, 111, 114, 101, 32, 68, 77
   \              6520444D    
   \   0000000A   415F45525220       DC8 65, 95, 69, 82, 82, 32, 61, 32, 48, 120
   \              3D203078    
   \   00000014   25780000           DC8 37, 120, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nAfter DMA_ERR = 0x%x">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   0A4166746572       DC8 10, 65, 102, 116, 101, 114, 32, 68, 77, 65
   \              20444D41    
   \   0000000A   5F455252203D       DC8 95, 69, 82, 82, 32, 61, 32, 48, 120, 37
   \              20307825    
   \   00000014   78000000           DC8 120, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nChannel %d transfer ...">`:
   \   00000000                      ; Initializer data, 64 bytes
   \   00000000   0A4368616E6E       DC8 10, 67, 104, 97, 110, 110, 101, 108, 32, 37
   \              656C2025    
   \   0000000A   64207472616E       DC8 100, 32, 116, 114, 97, 110, 115, 102, 101, 114
   \              73666572    
   \   00000014   20697320636F       DC8 32, 105, 115, 32, 99, 111, 109, 112, 108, 101
   \              6D706C65    
   \   0000001E   746520616E64       DC8 116, 101, 32, 97, 110, 100, 32, 99, 104, 97
   \              20636861    
   \   00000028   6E6E656C2025       DC8 110, 110, 101, 108, 32, 37, 100, 32, 105, 115
   \              64206973    
   \   00000032   20707265656D       DC8 32, 112, 114, 101, 101, 109, 112, 116, 101, 100
   \              70746564    
   \   0000003C   200A0000           DC8 32, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nBoth the channels ha...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   0A426F746820       DC8 10, 66, 111, 116, 104, 32, 116, 104, 101, 32
   \              74686520    
   \   0000000A   6368616E6E65       DC8 99, 104, 97, 110, 110, 101, 108, 115, 32, 104
   \              6C732068    
   \   00000014   61766520636F       DC8 97, 118, 101, 32, 99, 111, 109, 112, 108, 101
   \              6D706C65    
   \   0000001E   746564207468       DC8 116, 101, 100, 32, 116, 104, 101, 32, 116, 114
   \              65207472    
   \   00000028   616E73666572       DC8 97, 110, 115, 102, 101, 114, 10, 0
   \              0A00        

   Maximum stack usage in bytes:

     Function   .cstack
     --------   -------
     ADC1_Cal        0
     Set_ADC1        8
     Set_Pit0        0
     Set_Pit1        0
     cmd_rd          8
     cmd_wrt        16
     delay           0
     dma_32bit       8
     dma_config     16
     init_gpio       0
     main            8
     porta_isr       0
     portc_isr       8
     porte_isr       0


   Section sizes:

     Function/Label                           Bytes
     --------------                           -----
     isr_flag                                    4
     dma_error                                   4
     diff                                        4
     thld1                                       4
     thld2                                       4
     temp3                                       4
     Dma_Source_WORD                             8
     ADC_DATA                                    4
     ADC_PDATA                                   4
     res_ptr                                     4
     tcd                                        48
     UIF_CMDTAB                                140
     UIF_SETCMDTAB                              20
     UIF_NUM_CMD                                 4
     UIF_NUM_SETCMD                              4
     cmd_rd                                     62
     cmd_wrt                                   558
     dma_32bit                                 332
     main                                      188
     init_gpio                                 148
     portc_isr                                  50
     porte_isr                                  12
     porta_isr                                  12
     delay                                      28
     dma_config                               1698
     Set_Pit0                                   20
     Set_Pit1                                   20
     Set_ADC1                                   92
     ADC1_Cal                                  196
     ??DataTable68                               4
     ??DataTable74                               4
     ??DataTable74_1                             4
     ??DataTable74_2                             4
     ??DataTable74_3                             4
     ??DataTable74_4                             4
     ??DataTable74_5                             4
     ??DataTable74_6                             4
     ??DataTable74_7                             4
     ??DataTable74_8                             4
     ??DataTable74_9                             4
     ??DataTable74_10                            4
     ??DataTable74_11                            4
     ??DataTable74_12                            4
     ??DataTable74_13                            4
     ??DataTable76                               4
     ??DataTable76_1                             4
     ??DataTable77                               4
     ??DataTable77_1                             4
     ??DataTable77_2                             4
     ??DataTable77_3                             4
     ??DataTable77_4                             4
     ??DataTable77_5                             4
     ??DataTable77_6                             4
     ??DataTable78                               4
     ??DataTable78_1                             4
     ??DataTable78_2                             4
     ??DataTable78_3                             4
     ??DataTable78_4                             4
     ??DataTable78_5                             4
     ??DataTable78_6                             4
     ??DataTable78_7                             4
     ??DataTable78_8                             4
     ??DataTable79                               4
     ??DataTable79_1                             4
     ??DataTable79_2                             4
     ??DataTable79_3                             4
     ??DataTable79_4                             4
     ??DataTable79_5                             4
     ??DataTable79_6                             4
     ??DataTable79_7                             4
     ??DataTable79_8                             4
     ??DataTable79_9                             4
     ??DataTable79_10                            4
     ??DataTable79_11                            4
     ??DataTable79_12                            4
     ??DataTable79_13                            4
     ??DataTable79_14                            4
     ??DataTable79_15                            4
     ??DataTable79_16                            4
     ??DataTable79_17                            4
     ??DataTable79_18                            4
     ??DataTable79_19                            4
     ??DataTable79_20                            4
     ??DataTable79_21                            4
     ??DataTable79_22                            4
     ??DataTable79_23                            4
     ??DataTable79_24                            4
     ??DataTable79_25                            4
     ??DataTable79_26                            4
     ??DataTable79_27                            4
     ??DataTable79_28                            4
     ??DataTable79_29                            4
     ??DataTable79_30                            4
     ??DataTable79_31                            4
     ??DataTable79_32                            4
     ??DataTable79_33                            4
     ??DataTable79_34                            4
     ??DataTable79_35                            4
     ??DataTable79_36                            4
     ??DataTable79_37                            4
     ??DataTable79_38                            4
     ??DataTable79_39                            4
     ??DataTable79_40                            4
     ??DataTable79_41                            4
     ??DataTable79_42                            4
     ??DataTable79_43                            4
     ??DataTable79_44                            4
     ??DataTable79_45                            4
     ??DataTable79_46                            4
     ??DataTable79_47                            4
     ??DataTable79_48                            4
     ??DataTable79_49                            4
     ??DataTable79_50                            4
     ??DataTable79_51                            4
     ??DataTable79_52                            4
     ??DataTable79_53                            4
     ??DataTable79_54                            4
     ??DataTable79_55                            4
     ??DataTable79_56                            4
     ??DataTable79_57                            4
     ??DataTable79_58                            4
     ??DataTable79_59                            4
     ??DataTable79_60                            4
     ??DataTable79_61                            4
     ??DataTable79_62                            4
     ??DataTable79_63                            4
     ??DataTable79_64                            4
     ??DataTable79_65                            4
     ??DataTable79_66                            4
     ??DataTable79_67                            4
     ??DataTable79_68                            4
     ??DataTable79_69                            4
     ??DataTable79_70                            4
     ??DataTable79_71                            4
     ??DataTable79_72                            4
     ??DataTable79_73                            4
     ??DataTable79_74                            4
     ??DataTable79_75                            4
     ??DataTable79_76                            4
     ??DataTable79_77                            4
     ??DataTable79_78                            4
     ?<Constant "help">                          8
     ?<Constant "Help">                          8
     ?<Constant "<cmd>">                         8
     ?<Constant "set">                           4
     ?<Constant "Set Config">                   12
     ?<Constant "<option value>">               16
     ?<Constant "show">                          8
     ?<Constant "Show Config">                  12
     ?<Constant "<option>">                     12
     ?<Constant "rd">                            4
     ?<Constant "Register Display">             20
     ?<Constant "">                              1
     ?<Constant "wrt">                           4
     ?<Constant "Write PIT  <register ...">     36
     ?<Constant "\n--------------------...">    48
     ?<Constant "       PIT Register R...">     36
     ?<Constant "---------------------...">     48
     ?<Constant "sysclk">                        8
     ?<Constant "Pit0   = %d \r\n">             16
     ?<Constant "Pit1   = %d \r\n">             16
     ?<Constant " PIT Single Register ...">     36
     ?<Constant "Valid \'wrt\' syntax:\n">      24
     ?<Constant "PIT0 frequency(Hz) > ...">     48
     ?<Constant "PIT1 frequency(Hz) > ...">     48
     ?<Constant "PIT0 to PIT1 phase(co...">     68
     ?<Constant "PIT1 to PIT0 phase(co...">     68
     ?<Constant "PIT1 to PIT0 phase(co...">_1   72
     ?<Constant "Register value not in...">     40
     ?<Constant "\nStarting eDMA 32-bit...">    56
     ?<Constant "TWR-K40X256 GPIO Exam...">     28
     ?<Constant "SW6 Pressed\n">                16
     ?<Constant "SW7 Pressed\n">                16
     ?<Constant "\nERROR!!! An error oc...">    48
     ?<Constant "\nDMA_ES = 0x%x">              16
     ?<Constant "\nDMA_ERR = 0x%x">             16
     ?<Constant "\nData error!">                16
     ?<Constant "\nSADDR: 0x%x = 0x%x">         20
     ?<Constant "\nDADDR: 0x%x = 0x%x">         20
     ?<Constant "\nTesting DMA channel %d">     24
     ?<Constant "\n">                            2
     ?<Constant "\nSLAST adjustment is ...">    32
     ?<Constant "\nERROR!!! SLAST adjus...">    40
     ?<Constant "\nSADDR = 0x%x">               16
     ?<Constant "\nDLAST adjustment is ...">    32
     ?<Constant "\nERROR!!! DLAST adjus...">    44
     ?<Constant "\nDADDR = 0x%x">               16
     ?<Constant "\nTesting DMA channel %d.">    28
     ?<Constant "\nDAE error detected c...">    32
     ?<Constant "\nDBE error detected c...">    32
     ?<Constant "\nDOE error detected c...">    32
     ?<Constant "\nNCE error detected c...">    32
     ?<Constant "\nSAE error detected c...">    32
     ?<Constant "\nCPE error detected c...">    32
     ?<Constant "\nSBE error detected c...">    32
     ?<Constant "\nSGE error detected c...">    32
     ?<Constant "\nSOE error detected c...">    32
     ?<Constant "\nError cancel transfe...">    44
     ?<Constant "\nERROR NOT DETECTED!!!\n">    24
     ?<Constant "\nNO ERROR DETECTED!!!\n">     24
     ?<Constant "\nBefore DMA_ERR = 0x%x">      24
     ?<Constant "\nAfter DMA_ERR = 0x%x">       24
     ?<Constant "\nChannel %d transfer ...">    64
     ?<Constant "\nBoth the channels ha...">    48

 
    92 bytes in section .bss
 5 787 bytes in section .text
 
 5 787 bytes of CODE memory
    92 bytes of DATA memory

Errors: none
Warnings: 1
