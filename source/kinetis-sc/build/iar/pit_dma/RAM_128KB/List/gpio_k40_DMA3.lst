###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     17/Feb/2011  21:31:27 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[ #
#                    \kinetis-sc\src\projects\pit_dma\gpio_k40_DMA3.c         #
#    Command line =  "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\src\projects\pit_dma\gpio_k40_DMA3.c" -D    #
#                    IAR -D TWR_K40X256 -lCN "D:\Profiles\B17685\My           #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\RAM_128KB\List\" -lB "D:\Profiles\B17685\My      #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\RAM_128KB\List\" -o "D:\Profiles\B17685\My       #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\RAM_128KB\Obj\" --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_2\arm\INC\c\DLib_Config_N #
#                    ormal.h" -I "D:\Profiles\B17685\My                       #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\..\..\..\src\projects\pit_dma\" -I               #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\build\iar\pit_dma\..\..\..\src\common\" -I  #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\build\iar\pit_dma\..\..\..\src\cpu\" -I     #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\build\iar\pit_dma\..\..\..\src\cpu\headers\ #
#                    " -I "D:\Profiles\B17685\My                              #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\..\..\..\src\drivers\adc16\" -I                  #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\build\iar\pit_dma\..\..\..\src\drivers\uart #
#                    \" -I "D:\Profiles\B17685\My                             #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\..\..\..\src\drivers\mcg\" -I                    #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\build\iar\pit_dma\..\..\..\src\drivers\wdog #
#                    \" -I "D:\Profiles\B17685\My                             #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\..\..\..\src\platforms\" -I                      #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\build\iar\pit_dma\..\" -Ol --use_c++_inline #
#    List file    =  D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[ #
#                    \kinetis-sc\build\iar\pit_dma\RAM_128KB\List\gpio_k40_DM #
#                    A3.lst                                                   #
#    Object file  =  D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[ #
#                    \kinetis-sc\build\iar\pit_dma\RAM_128KB\Obj\gpio_k40_DMA #
#                    3.o                                                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\src\projects\pit_dma\gpio_k40_DMA3.c
      1          /*
      2           * File:		gpio_k40.c
      3           * Purpose:		LED and Switch Example
      4           *
      5           *                      Configures GPIO for the LED and push buttons on the TWR-K40X256
      6           *                      Blue LED - On
      7           *                      Green LED - Toggles on/off
      8           *                      Orange LED - On if SW7 pressed
      9           *                      Yellow LED - On if SW6 pressed
     10           *
     11           *                      Also configures push buttons for falling IRQ's. ISR
     12           *                        configured in vector table in isr.h
     13           */
     14          
     15          #include "common.h"
     16          #include "adc16.h"
     17          #include "uif.h"
     18          #define GPIO_PIN_MASK            0x1Fu
     19          #define GPIO_PIN(x)              (((1)<<(x & GPIO_PIN_MASK)))
     20          
     21          
     22          

   \                                 In section .bss, align 4
     23          int isr_flag, dma_error, diff,thld1,thld2, temp3 = 0;
   \                     isr_flag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     dma_error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     diff:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     thld1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     thld2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     temp3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     24          uint32 Dma_Source_WORD[3], Period;
   \                     Dma_Source_WORD:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     Period:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     25          uint32 Dma_Source_WORD1[3], Period1;
   \                     Dma_Source_WORD1:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     Period1:
   \   00000000                      DS8 4
     26          

   \                                 In section .bss, align 4
     27          int *res_ptr;
   \                     res_ptr:
   \   00000000                      DS8 4
     28          #define DMA_TCD_SADDR(x)                            DMA_SADDR_REG(DMA_BASE_PTR,x) 
     29          #define DMA_TCD_SOFF(x)                             DMA_SOFF_REG(DMA_BASE_PTR,x)
     30          #define DMA_TCD_ATTR(x)                             DMA_ATTR_REG(DMA_BASE_PTR,x)
     31          #define DMA_TCD_NBYTES_MLNO(x)                      DMA_NBYTES_MLNO_REG(DMA_BASE_PTR,x)
     32          #define DMA_TCD_NBYTES_MLOFFNO(x)                   DMA_NBYTES_MLOFFNO_REG(DMA_BASE_PTR,x)
     33          #define DMA_TCD_NBYTES_MLOFFYES(x)                  DMA_NBYTES_MLOFFYES_REG(DMA_BASE_PTR,x)
     34          #define DMA_TCD_SLAST(x)                            DMA_SLAST_REG(DMA_BASE_PTR,x)
     35          #define DMA_TCD_DADDR(x)                            DMA_DADDR_REG(DMA_BASE_PTR,x)
     36          #define DMA_TCD_DOFF(x)                             DMA_DOFF_REG(DMA_BASE_PTR,x)
     37          #define DMA_TCD_CITER_ELINKYES(x)                   DMA_CITER_ELINKYES_REG(DMA_BASE_PTR,x)
     38          #define DMA_TCD_CITER_ELINKNO(x)                    DMA_CITER_ELINKNO_REG(DMA_BASE_PTR,x)
     39          #define DMA_TCD_DLASTSGA(x)                         DMA_DLAST_SGA_REG(DMA_BASE_PTR,x)
     40          #define DMA_TCD_CSR(x)                              DMA_CSR_REG(DMA_BASE_PTR,x)
     41          #define DMA_TCD_BITER_ELINKNO(x)                    DMA_BITER_ELINKNO_REG(DMA_BASE_PTR,x)
     42          #define DMA_TCD_BITER_ELINKYES(x)                   DMA_BITER_ELINKYES_REG(DMA_BASE_PTR,x)
     43          //#define DMAMUX_CHCFG(x)                             DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR,x)
     44          
     45          struct dma_tcd {
     46          	uint32_t saddr;
     47          	int16_t soff;
     48          	uint16_t tcdAttr;
     49          	uint32_t nbytes;
     50          	int32_t slast;
     51          	uint32_t daddr;
     52          	int16_t doff;
     53          	uint16_t citer;
     54          	int32_t dlast_sga;
     55          	uint16_t csr;	
     56          	uint16_t biter;
     57          	int channelno;
     58          	uint32_t testdata;
     59          	int loopcount;
     60              uint32_t link;
     61          };
     62          
     63          enum COMMAND
     64          {
     65          	CONFIG_BASIC_XFR,
     66          	MEM_FILL,
     67          	DMA_SOFT_START,
     68          	XFR_OVER_WAIT,
     69          	CMP_MEM,
     70          	CONFIG_BASIC_XFR_ERR,
     71          	MINOR_LOOP_CH_LINK,
     72          	MAJOR_LOOP_LINK_EN,
     73          	SLAST_CHECK,
     74          	DLAST_CHECK,
     75          	SGA_TEST_CONFIG,
     76          	SGA_ENB,
     77          	XFR_WAIT_ERROR_CHECK,
     78          	ERROR_CLR,
     79          	INSERT_CPE_ERR,
     80          	CONFIG_PRIORITY,
     81          	CHECK_PRI
     82          };
     83          
     84          struct dummy_tcd {
     85          
     86          	uint32_t saddr;
     87          	int16_t soff;
     88          	uint16_t attr;
     89          	uint32_t nbytes;
     90          	int32_t slast;
     91          	uint32_t daddr;
     92          	int16_t doff;
     93          	uint16_t citer;
     94          	int32_t dlast_sga;
     95          	uint16_t csr;
     96          	uint16_t biter;
     97          	
     98          };
     99          

   \                                 In section .bss, align 4
    100          struct dma_tcd tcd;
   \                     tcd:
   \   00000000                      DS8 48
    101          
    102          //Function declarations
    103          void cmd_rd (int, char **);
    104          void cmd_wrt (int, char **);
    105          void init_gpio(void);
    106          void dma_config(int COMMAND , struct dma_tcd *tcd_value);
    107          void Set_Pit0(void);
    108          

   \                                 In section .text, align 4, keep-with-next
    109          UIF_CMD UIF_CMDTAB[] =
   \                     UIF_CMDTAB:
   \   00000000                      ; Initializer data, 140 bytes
   \   00000000   ........0000       DC32 `?<Constant "help">`, 0, 1, 0, uif_cmd_help, `?<Constant "Help">`, `?<Constant "<cmd>">`, `?<Constant "set">`, 0, 2
   \              000001000000
   \              00000000....
   \              ............
   \              ............
   \              ....00000000
   \              02000000    
   \   00000028   00000000....       DC32 0, uif_cmd_set, `?<Constant "Set Config">`, `?<Constant "<option value>">`, `?<Constant "show">`, 0, 1, 0, uif_cmd_show, `?<Constant "Show Config">`
   \              ............
   \              ............
   \              ....00000000
   \              010000000000
   \              0000........
   \              ........    
   \   00000050   ............       DC32 `?<Constant "<option>">`, `?<Constant "rd">`, 0, 0, 0, cmd_rd, `?<Constant "Register Display">`, `?<Constant "">`, `?<Constant "wrt">`, 0
   \              ....00000000
   \              000000000000
   \              0000........
   \              ............
   \              ............
   \              00000000    
   \   00000078   030000000000       DC32 3, 0, cmd_wrt, `?<Constant "Write PIT  <register ...">`
   \              0000........
   \              ........    
   \   00000088   00000000           DC8 0, 0, 0, 0
    110          {
    111              UIF_CMDS_ALL
    112              {"rd",0,0,0,cmd_rd, "Register Display",""},
    113              {"wrt",0,3,0,cmd_wrt, "Write PIT  <register index> <value>"},
    114          
    115          };
    116          

   \                                 In section .text, align 4, keep-with-next
    117          UIF_SETCMD UIF_SETCMDTAB[] =
   \                     UIF_SETCMDTAB:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   ........0000       DC32 `?<Constant "sysclk">`, 0, 1, 0, `?<Constant "">`
   \              000001000000
   \              00000000....
   \              ....        
    118          {
    119              {"sysclk", 0,1,0,""},
    120          };
    121          

   \                                 In section .text, align 4, keep-with-next
    122          const int UIF_NUM_CMD    = UIF_CMDTAB_SIZE;
   \                     UIF_NUM_CMD:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   05000000           DC32 5

   \                                 In section .text, align 4, keep-with-next
    123          const int UIF_NUM_SETCMD = UIF_SETCMDTAB_SIZE;
   \                     UIF_NUM_SETCMD:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   01000000           DC32 1
    124          

   \                                 In section .text, align 2, keep-with-next
    125          void cmd_rd (int argc, char **argv)
    126          {
   \                     cmd_rd:
   \   00000000   80B5               PUSH     {R7,LR}
    127          
    128              printf("\n-------------------------------------------\n");
   \   00000002   ........           LDR.W    R0,??DataTable74
   \   00000006   ........           BL       printf
    129              printf("       PIT Register Read Utility\n");
   \   0000000A   ........           LDR.W    R0,??DataTable74_1
   \   0000000E   ........           BL       printf
    130              printf("-------------------------------------------\n");
   \   00000012   ........           LDR.W    R0,??DataTable74_2
   \   00000016   ........           BL       printf
    131              printf("\n");
   \   0000001A   ....               ADR.N    R0,??DataTable71  ;; "\n"
   \   0000001C   ........           BL       printf
    132                  printf("Pit0   = %d \r\n", (PIT_LDVAL0));
   \   00000020   ........           LDR.W    R0,??DataTable74_3  ;; 0x40037100
   \   00000024   0168               LDR      R1,[R0, #+0]
   \   00000026   ........           LDR.W    R0,??DataTable74_4
   \   0000002A   ........           BL       printf
    133                  printf("Pit1   = %d \r\n", (PIT_LDVAL1));
   \   0000002E   ........           LDR.W    R0,??DataTable74_5  ;; 0x40037110
   \   00000032   0168               LDR      R1,[R0, #+0]
   \   00000034   ........           LDR.W    R0,??DataTable79
   \   00000038   ........           BL       printf
    134                  
    135             
    136          }// end cmd_rd
   \   0000003C   01BD               POP      {R0,PC}          ;; return
    137          
    138          //******************************************************************************
    139          

   \                                 In section .text, align 2, keep-with-next
    140          void
    141          cmd_wrt (int argc, char **argv)
    142          {
   \                     cmd_wrt:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0C00               MOVS     R4,R1
    143              uint32 regindex;
    144              uint32 regvalue;
    145              
    146              int result = 0;
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   0090               STR      R0,[SP, #+0]
    147              res_ptr = &result;
   \   0000000A   ........           LDR.W    R0,??DataTable75
   \   0000000E   00A9               ADD      R1,SP,#+0
   \   00000010   0160               STR      R1,[R0, #+0]
    148                   
    149              printf("\n-------------------------------------------\n");
   \   00000012   ........           LDR.W    R0,??DataTable74
   \   00000016   ........           BL       printf
    150              printf(" PWM Write Utility\n");
   \   0000001A   ........           LDR.W    R0,??DataTable74_6
   \   0000001E   ........           BL       printf
    151              printf("-------------------------------------------\n");
   \   00000022   ........           LDR.W    R0,??DataTable74_2
   \   00000026   ........           BL       printf
    152              printf("\n");
   \   0000002A   ....               ADR.N    R0,??DataTable71  ;; "\n"
   \   0000002C   ........           BL       printf
    153              printf("Valid 'wrt' syntax:\n");
   \   00000030   ........           LDR.W    R0,??DataTable75_1
   \   00000034   ........           BL       printf
    154                   printf("Set PTD7  Period > wrt  <0> <value(Hz)>\n");
   \   00000038   ........           LDR.W    R0,??DataTable75_2
   \   0000003C   ........           BL       printf
    155                   printf("Set PTD7  Duty > wrt  <1> <value(percent)> \n\n");
   \   00000040   ........           LDR.W    R0,??DataTable75_3
   \   00000044   ........           BL       printf
    156                   printf("Set PTA16 Period > wrt  <2> <value(Hz)>\n");
   \   00000048   ........           LDR.W    R0,??DataTable76
   \   0000004C   ........           BL       printf
    157                   printf("Set PTA16 Duty > wrt  <3> <value(percent)> \n\n");
   \   00000050   ........           LDR.W    R0,??DataTable76_1
   \   00000054   ........           BL       printf
    158                  
    159              if (argc != 3)
   \   00000058   032D               CMP      R5,#+3
   \   0000005A   14D0               BEQ.N    ??cmd_wrt_0
    160              {
    161                  printf("Valid 'wrt' syntax:\n");
   \   0000005C   ........           LDR.W    R0,??DataTable75_1
   \   00000060   ........           BL       printf
    162                  printf("Set PTD7 Period > wrt  <0> <value(Hz)> \n\n");
   \   00000064   ........           LDR.W    R0,??DataTable78
   \   00000068   ........           BL       printf
    163                  printf("Set PTD7 Duty > wrt  <1> <value(percent)> \n\n");
   \   0000006C   ........           LDR.W    R0,??DataTable79_1
   \   00000070   ........           BL       printf
    164                  printf("Set PTA16 Period > wrt  <2> <value(Hz)> \n\n");
   \   00000074   ........           LDR.W    R0,??DataTable79_2
   \   00000078   ........           BL       printf
    165                  printf("Set PTA16 Duty > wrt  <4> <value(percent)> \n\n");
   \   0000007C   ........           LDR.W    R0,??DataTable79_3
   \   00000080   ........           BL       printf
    166                  return;
   \   00000084   B3E0               B.N      ??cmd_wrt_1
    167              }
    168              else{
    169                
    170                  regindex = get_value(argv[1],res_ptr,10);
   \                     ??cmd_wrt_0:
   \   00000086   0A22               MOVS     R2,#+10
   \   00000088   ........           LDR.W    R0,??DataTable75
   \   0000008C   0168               LDR      R1,[R0, #+0]
   \   0000008E   6068               LDR      R0,[R4, #+4]
   \   00000090   ........           BL       get_value
   \   00000094   0500               MOVS     R5,R0
    171                  regvalue = get_value(argv[2],res_ptr,10);
   \   00000096   0A22               MOVS     R2,#+10
   \   00000098   ........           LDR.W    R0,??DataTable75
   \   0000009C   0168               LDR      R1,[R0, #+0]
   \   0000009E   A068               LDR      R0,[R4, #+8]
   \   000000A0   ........           BL       get_value
    172                          
    173                   if(regvalue<4294967294){        
   \   000000A4   10F1020F           CMN      R0,#+2
   \   000000A8   80F09D80           BCS.W    ??cmd_wrt_2
    174                        switch (regindex){
   \   000000AC   002D               CMP      R5,#+0
   \   000000AE   05D0               BEQ.N    ??cmd_wrt_3
   \   000000B0   022D               CMP      R5,#+2
   \   000000B2   54D0               BEQ.N    ??cmd_wrt_4
   \   000000B4   2BD3               BCC.N    ??cmd_wrt_5
   \   000000B6   032D               CMP      R5,#+3
   \   000000B8   7AD0               BEQ.N    ??cmd_wrt_6
   \   000000BA   93E0               B.N      ??cmd_wrt_7
    175                           case 0: Period = 2 * ((48000000/regvalue)/2 -3*32000/regvalue);
   \                     ??cmd_wrt_3:
   \   000000BC   ........           LDR.W    R1,??DataTable79_4  ;; 0x2dc6c00
   \   000000C0   B1FBF0F1           UDIV     R1,R1,R0
   \   000000C4   ........           LDR.W    R2,??DataTable79_5  ;; 0x17700
   \   000000C8   B2FBF0F0           UDIV     R0,R2,R0
   \   000000CC   D0EB5100           RSBS     R0,R0,R1, LSR #+1
   \   000000D0   4000               LSLS     R0,R0,#+1
   \   000000D2   ........           LDR.W    R1,??DataTable79_6
   \   000000D6   0860               STR      R0,[R1, #+0]
    176                           Dma_Source_WORD[2] = Period - ((Period*50))/100;
   \   000000D8   ........           LDR.W    R0,??DataTable79_6
   \   000000DC   0068               LDR      R0,[R0, #+0]
   \   000000DE   ........           LDR.W    R1,??DataTable79_6
   \   000000E2   0968               LDR      R1,[R1, #+0]
   \   000000E4   3222               MOVS     R2,#+50
   \   000000E6   5143               MULS     R1,R2,R1
   \   000000E8   6422               MOVS     R2,#+100
   \   000000EA   B1FBF2F1           UDIV     R1,R1,R2
   \   000000EE   401A               SUBS     R0,R0,R1
   \   000000F0   ........           LDR.W    R1,??DataTable79_7
   \   000000F4   8860               STR      R0,[R1, #+8]
    177                             Dma_Source_WORD[1] = ((Period*50))/100;
   \   000000F6   ........           LDR.W    R0,??DataTable79_6
   \   000000FA   0068               LDR      R0,[R0, #+0]
   \   000000FC   3221               MOVS     R1,#+50
   \   000000FE   4843               MULS     R0,R1,R0
   \   00000100   6421               MOVS     R1,#+100
   \   00000102   B0FBF1F0           UDIV     R0,R0,R1
   \   00000106   ........           LDR.W    R1,??DataTable79_7
   \   0000010A   4860               STR      R0,[R1, #+4]
    178                             break;
   \   0000010C   6FE0               B.N      ??cmd_wrt_8
    179                           case 1: 
    180                             
    181                             Dma_Source_WORD[2] = Period - ((Period*regvalue))/100;
   \                     ??cmd_wrt_5:
   \   0000010E   ........           LDR.W    R1,??DataTable79_6
   \   00000112   0968               LDR      R1,[R1, #+0]
   \   00000114   ........           LDR.W    R2,??DataTable79_6
   \   00000118   1268               LDR      R2,[R2, #+0]
   \   0000011A   4243               MULS     R2,R0,R2
   \   0000011C   6423               MOVS     R3,#+100
   \   0000011E   B2FBF3F2           UDIV     R2,R2,R3
   \   00000122   891A               SUBS     R1,R1,R2
   \   00000124   ........           LDR.W    R2,??DataTable79_7
   \   00000128   9160               STR      R1,[R2, #+8]
    182                             Dma_Source_WORD[1] = ((Period*regvalue))/100;
   \   0000012A   ........           LDR.W    R1,??DataTable79_6
   \   0000012E   0968               LDR      R1,[R1, #+0]
   \   00000130   00FB01F0           MUL      R0,R0,R1
   \   00000134   6421               MOVS     R1,#+100
   \   00000136   B0FBF1F0           UDIV     R0,R0,R1
   \   0000013A   ........           LDR.W    R1,??DataTable79_7
   \   0000013E   4860               STR      R0,[R1, #+4]
    183                             //printf("\nDma_Source_WORD[0] = %d\n", Dma_Source_WORD[0]);
    184                             printf("\nDma_Source_WORD[1] = %d\n", Dma_Source_WORD[1]);
   \   00000140   ........           LDR.W    R0,??DataTable79_7
   \   00000144   4168               LDR      R1,[R0, #+4]
   \   00000146   ........           LDR.W    R0,??DataTable79_8
   \   0000014A   ........           BL       printf
    185                             printf("Dma_Source_WORD[2] = %d\n\n", Dma_Source_WORD[2]);
   \   0000014E   ........           LDR.W    R0,??DataTable79_7
   \   00000152   8168               LDR      R1,[R0, #+8]
   \   00000154   ........           LDR.W    R0,??DataTable79_9
   \   00000158   ........           BL       printf
    186                              break;
   \   0000015C   47E0               B.N      ??cmd_wrt_8
    187                           case 2: Period1 = 2 * ((48000000/regvalue)/2 -3*32000/regvalue);
   \                     ??cmd_wrt_4:
   \   0000015E   ........           LDR.W    R1,??DataTable79_4  ;; 0x2dc6c00
   \   00000162   B1FBF0F1           UDIV     R1,R1,R0
   \   00000166   ........           LDR.W    R2,??DataTable79_5  ;; 0x17700
   \   0000016A   B2FBF0F0           UDIV     R0,R2,R0
   \   0000016E   D0EB5100           RSBS     R0,R0,R1, LSR #+1
   \   00000172   4000               LSLS     R0,R0,#+1
   \   00000174   ........           LDR.W    R1,??DataTable79_10
   \   00000178   0860               STR      R0,[R1, #+0]
    188                             Dma_Source_WORD1[2] = Period1 - ((Period1*50))/100;
   \   0000017A   ........           LDR.W    R0,??DataTable79_10
   \   0000017E   0068               LDR      R0,[R0, #+0]
   \   00000180   ........           LDR.W    R1,??DataTable79_10
   \   00000184   0968               LDR      R1,[R1, #+0]
   \   00000186   3222               MOVS     R2,#+50
   \   00000188   5143               MULS     R1,R2,R1
   \   0000018A   6422               MOVS     R2,#+100
   \   0000018C   B1FBF2F1           UDIV     R1,R1,R2
   \   00000190   401A               SUBS     R0,R0,R1
   \   00000192   ........           LDR.W    R1,??DataTable79_11
   \   00000196   8860               STR      R0,[R1, #+8]
    189                             Dma_Source_WORD1[1] = ((Period1*50))/100;
   \   00000198   ........           LDR.W    R0,??DataTable79_10
   \   0000019C   0068               LDR      R0,[R0, #+0]
   \   0000019E   3221               MOVS     R1,#+50
   \   000001A0   4843               MULS     R0,R1,R0
   \   000001A2   6421               MOVS     R1,#+100
   \   000001A4   B0FBF1F0           UDIV     R0,R0,R1
   \   000001A8   ........           LDR.W    R1,??DataTable79_11
   \   000001AC   4860               STR      R0,[R1, #+4]
    190                             break;
   \   000001AE   1EE0               B.N      ??cmd_wrt_8
    191                           case 3: 
    192                             Dma_Source_WORD1[2] = Period1 - ((Period1*regvalue))/100;
   \                     ??cmd_wrt_6:
   \   000001B0   ........           LDR.W    R1,??DataTable79_10
   \   000001B4   0968               LDR      R1,[R1, #+0]
   \   000001B6   ........           LDR.W    R2,??DataTable79_10
   \   000001BA   1268               LDR      R2,[R2, #+0]
   \   000001BC   4243               MULS     R2,R0,R2
   \   000001BE   6423               MOVS     R3,#+100
   \   000001C0   B2FBF3F2           UDIV     R2,R2,R3
   \   000001C4   891A               SUBS     R1,R1,R2
   \   000001C6   ........           LDR.W    R2,??DataTable79_11
   \   000001CA   9160               STR      R1,[R2, #+8]
    193                             Dma_Source_WORD1[1] = ((Period1*regvalue))/100;
   \   000001CC   ........           LDR.W    R1,??DataTable79_10
   \   000001D0   0968               LDR      R1,[R1, #+0]
   \   000001D2   00FB01F0           MUL      R0,R0,R1
   \   000001D6   6421               MOVS     R1,#+100
   \   000001D8   B0FBF1F0           UDIV     R0,R0,R1
   \   000001DC   ........           LDR.W    R1,??DataTable79_11
   \   000001E0   4860               STR      R0,[R1, #+4]
    194                             //printf("\nDma_Source_WORD[0] = %d\n", Dma_Source_WORD[0]);
    195                             //printf("\nDma_Source_WORD[1] = %d\n", Dma_Source_WORD1[1]);
    196                             //printf("Dma_Source_WORD[2] = %d\n\n", Dma_Source_WORD1[2]);
    197                              break;
   \   000001E2   04E0               B.N      ??cmd_wrt_8
    198                           default: break;
   \                     ??cmd_wrt_7:
   \   000001E4   03E0               B.N      ??cmd_wrt_8
    199                        } // end switch/case regindex
    200                   } // if
    201                  else 
    202                  printf("Register value not in valid range.\r\n\n");
   \                     ??cmd_wrt_2:
   \   000001E6   ........           LDR.W    R0,??DataTable79_12
   \   000001EA   ........           BL       printf
    203                 
    204              }// end else
    205          }// end cmd_wrt
   \                     ??cmd_wrt_8:
   \                     ??cmd_wrt_1:
   \   000001EE   31BD               POP      {R0,R4,R5,PC}    ;; return
    206          
    207          /************************************************************************************ 
    208          *  DMA 32-bit transmit test 
    209          *******************************************************************************/
    210          

   \                                 In section .text, align 2, keep-with-next
    211          void dma_32bit (void)
    212          {volatile uint32 *tempptr;
   \                     dma_32bit:
   \   00000000   80B5               PUSH     {R7,LR}
    213                 
    214                  SIM_SCGC6 |= SIM_SCGC6_DMAMUX_MASK;
   \   00000002   ........           LDR.W    R0,??DataTable79_13  ;; 0x4004803c
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   50F00200           ORRS     R0,R0,#0x2
   \   0000000C   ........           LDR.W    R1,??DataTable79_13  ;; 0x4004803c
   \   00000010   0860               STR      R0,[R1, #+0]
    215                  
    216                
    217                  ///////////////////////////////////////////
    218                  //Set up DMA from PIT0
    219                  ///////////////////////////////////////////
    220                  DMAMUX_CHCFG0|=DMAMUX_CHCFG_SOURCE(52);  //PORTD 
   \   00000012   ........           LDR.W    R0,??DataTable79_14  ;; 0x40021000
   \   00000016   0078               LDRB     R0,[R0, #+0]
   \   00000018   50F03400           ORRS     R0,R0,#0x34
   \   0000001C   ........           LDR.W    R1,??DataTable79_14  ;; 0x40021000
   \   00000020   0870               STRB     R0,[R1, #+0]
    221                  DMAMUX_CHCFG0 |= DMAMUX_CHCFG_ENBL_MASK|DMAMUX_CHCFG_TRIG_MASK;
   \   00000022   ........           LDR.W    R0,??DataTable79_14  ;; 0x40021000
   \   00000026   0078               LDRB     R0,[R0, #+0]
   \   00000028   50F0C000           ORRS     R0,R0,#0xC0
   \   0000002C   ........           LDR.W    R1,??DataTable79_14  ;; 0x40021000
   \   00000030   0870               STRB     R0,[R1, #+0]
    222            
    223          	printf("\nStarting eDMA 32-bit memory to memory transfer test!\n");
   \   00000032   ........           LDR.W    R0,??DataTable79_15
   \   00000036   ........           BL       printf
    224                  tempptr = &Dma_Source_WORD[0];
   \   0000003A   ........           LDR.W    R0,??DataTable79_7
    225          	
    226          	tcd.saddr = (uint32_t)tempptr;
   \   0000003E   ........           LDR.W    R1,??DataTable79_16
   \   00000042   0860               STR      R0,[R1, #+0]
    227          	tcd.daddr = 0x400Ff0CC; //ADDRESS of PTD_PTOR
   \   00000044   ........           LDR.W    R0,??DataTable79_16
   \   00000048   ........           LDR.W    R1,??DataTable79_17  ;; 0x400ff0cc
   \   0000004C   0161               STR      R1,[R0, #+16]
    228          	
    229          	tcd.nbytes = 4;
   \   0000004E   ........           LDR.W    R0,??DataTable79_16
   \   00000052   0421               MOVS     R1,#+4
   \   00000054   8160               STR      R1,[R0, #+8]
    230          	tcd.tcdAttr = DMA_ATTR_SSIZE(2) | DMA_ATTR_DSIZE(2); //EDMA_TCD_ATTR_SSIZE_32BIT|EDMA_TCD_ATTR_DSIZE_32BIT ;
   \   00000056   ........           LDR.W    R0,??DataTable79_16
   \   0000005A   40F20221           MOVW     R1,#+514
   \   0000005E   C180               STRH     R1,[R0, #+6]
    231          	tcd.soff = 0x0;
   \   00000060   ........           LDR.W    R0,??DataTable79_16
   \   00000064   0021               MOVS     R1,#+0
   \   00000066   8180               STRH     R1,[R0, #+4]
    232          	tcd.doff = 0x0;
   \   00000068   ........           LDR.W    R0,??DataTable79_16
   \   0000006C   0021               MOVS     R1,#+0
   \   0000006E   8182               STRH     R1,[R0, #+20]
    233          	tcd.slast = 0x0;
   \   00000070   ........           LDR.W    R0,??DataTable79_16
   \   00000074   0021               MOVS     R1,#+0
   \   00000076   C160               STR      R1,[R0, #+12]
    234          	tcd.loopcount = 0x1;
   \   00000078   ........           LDR.W    R0,??DataTable79_16
   \   0000007C   0121               MOVS     R1,#+1
   \   0000007E   8162               STR      R1,[R0, #+40]
    235          	tcd.dlast_sga = 0x0;
   \   00000080   ........           LDR.W    R0,??DataTable79_16
   \   00000084   0021               MOVS     R1,#+0
   \   00000086   8161               STR      R1,[R0, #+24]
    236          	tcd.csr = 0x0520;
   \   00000088   ........           LDR.W    R0,??DataTable79_16
   \   0000008C   4FF4A461           MOV      R1,#+1312
   \   00000090   8183               STRH     R1,[R0, #+28]
    237          	
    238                  tcd.channelno = 0;
   \   00000092   ........           LDR.W    R0,??DataTable79_16
   \   00000096   0021               MOVS     R1,#+0
   \   00000098   0162               STR      R1,[R0, #+32]
    239              
    240                  dma_config(CONFIG_BASIC_XFR, &tcd);
   \   0000009A   ........           LDR.W    R1,??DataTable79_16
   \   0000009E   0020               MOVS     R0,#+0
   \   000000A0   ........           BL       dma_config
    241                  DMA_ERQ|= 1;
   \   000000A4   ........           LDR.W    R0,??DataTable79_18  ;; 0x4000800c
   \   000000A8   0068               LDR      R0,[R0, #+0]
   \   000000AA   50F00100           ORRS     R0,R0,#0x1
   \   000000AE   ........           LDR.W    R1,??DataTable79_18  ;; 0x4000800c
   \   000000B2   0860               STR      R0,[R1, #+0]
    242                  
    243                  
    244                  tempptr = &Dma_Source_WORD[1];
   \   000000B4   ........           LDR.W    R0,??DataTable79_19
    245          	
    246          	tcd.saddr = (uint32_t)tempptr;
   \   000000B8   ........           LDR.W    R1,??DataTable79_16
   \   000000BC   0860               STR      R0,[R1, #+0]
    247          	tcd.daddr = 0x40037100; //ADDRESS of PIT_LDVAL0
   \   000000BE   ........           LDR.W    R0,??DataTable79_16
   \   000000C2   ....               LDR.N    R1,??DataTable74_3  ;; 0x40037100
   \   000000C4   0161               STR      R1,[R0, #+16]
    248          	
    249          	tcd.nbytes = 4;
   \   000000C6   ........           LDR.W    R0,??DataTable79_16
   \   000000CA   0421               MOVS     R1,#+4
   \   000000CC   8160               STR      R1,[R0, #+8]
    250          	tcd.tcdAttr = DMA_ATTR_SSIZE(2) | DMA_ATTR_DSIZE(2); //EDMA_TCD_ATTR_SSIZE_32BIT|EDMA_TCD_ATTR_DSIZE_32BIT ;
   \   000000CE   ........           LDR.W    R0,??DataTable79_16
   \   000000D2   40F20221           MOVW     R1,#+514
   \   000000D6   C180               STRH     R1,[R0, #+6]
    251          	tcd.soff = 0x04;
   \   000000D8   ........           LDR.W    R0,??DataTable79_16
   \   000000DC   0421               MOVS     R1,#+4
   \   000000DE   8180               STRH     R1,[R0, #+4]
    252          	tcd.doff = 0x0;
   \   000000E0   ........           LDR.W    R0,??DataTable79_16
   \   000000E4   0021               MOVS     R1,#+0
   \   000000E6   8182               STRH     R1,[R0, #+20]
    253          	tcd.slast = -8;
   \   000000E8   ........           LDR.W    R0,??DataTable79_16
   \   000000EC   7FF00701           MVNS     R1,#+7
   \   000000F0   C160               STR      R1,[R0, #+12]
    254          	tcd.loopcount = 0x2;
   \   000000F2   ........           LDR.W    R0,??DataTable79_16
   \   000000F6   0221               MOVS     R1,#+2
   \   000000F8   8162               STR      R1,[R0, #+40]
    255          	tcd.dlast_sga = 0x0;
   \   000000FA   ........           LDR.W    R0,??DataTable79_16
   \   000000FE   0021               MOVS     R1,#+0
   \   00000100   8161               STR      R1,[R0, #+24]
    256          	tcd.csr = 0x0;
   \   00000102   ........           LDR.W    R0,??DataTable79_16
   \   00000106   0021               MOVS     R1,#+0
   \   00000108   8183               STRH     R1,[R0, #+28]
    257                  tcd.channelno = 5;
   \   0000010A   ........           LDR.W    R0,??DataTable79_16
   \   0000010E   0521               MOVS     R1,#+5
   \   00000110   0162               STR      R1,[R0, #+32]
    258          	
    259                  dma_config(CONFIG_BASIC_XFR, &tcd);
   \   00000112   ........           LDR.W    R1,??DataTable79_16
   \   00000116   0020               MOVS     R0,#+0
   \   00000118   ........           BL       dma_config
    260                  DMA_ERQ|= 2;
   \   0000011C   ........           LDR.W    R0,??DataTable79_18  ;; 0x4000800c
   \   00000120   0068               LDR      R0,[R0, #+0]
   \   00000122   50F00200           ORRS     R0,R0,#0x2
   \   00000126   ........           LDR.W    R1,??DataTable79_18  ;; 0x4000800c
   \   0000012A   0860               STR      R0,[R1, #+0]
    261                 
    262                  
    263                  ///////////////////////////////////////////
    264                  //Set up DMA from PIT1
    265                  ///////////////////////////////////////////
    266                  DMAMUX_CHCFG1|=DMAMUX_CHCFG_SOURCE(49);  //PORTA
   \   0000012C   ........           LDR.W    R0,??DataTable79_20  ;; 0x40021001
   \   00000130   0078               LDRB     R0,[R0, #+0]
   \   00000132   50F03100           ORRS     R0,R0,#0x31
   \   00000136   ........           LDR.W    R1,??DataTable79_20  ;; 0x40021001
   \   0000013A   0870               STRB     R0,[R1, #+0]
    267                  DMAMUX_CHCFG1 |= DMAMUX_CHCFG_ENBL_MASK|DMAMUX_CHCFG_TRIG_MASK; 
   \   0000013C   ........           LDR.W    R0,??DataTable79_20  ;; 0x40021001
   \   00000140   0078               LDRB     R0,[R0, #+0]
   \   00000142   50F0C000           ORRS     R0,R0,#0xC0
   \   00000146   ........           LDR.W    R1,??DataTable79_20  ;; 0x40021001
   \   0000014A   0870               STRB     R0,[R1, #+0]
    268            
    269            
    270          	printf("\nStarting eDMA 32-bit memory to memory transfer test!\n");
   \   0000014C   ........           LDR.W    R0,??DataTable79_15
   \   00000150   ........           BL       printf
    271                  tempptr = &Dma_Source_WORD1[0];
   \   00000154   ........           LDR.W    R0,??DataTable79_11
    272          	
    273          	tcd.saddr = (uint32_t)tempptr;
   \   00000158   ........           LDR.W    R1,??DataTable79_16
   \   0000015C   0860               STR      R0,[R1, #+0]
    274          	tcd.daddr = 0x400Ff00C; //ADDRESS of PTA_PTOR
   \   0000015E   ........           LDR.W    R0,??DataTable79_16
   \   00000162   ........           LDR.W    R1,??DataTable79_21  ;; 0x400ff00c
   \   00000166   0161               STR      R1,[R0, #+16]
    275          	
    276          	tcd.nbytes = 4;
   \   00000168   ........           LDR.W    R0,??DataTable79_16
   \   0000016C   0421               MOVS     R1,#+4
   \   0000016E   8160               STR      R1,[R0, #+8]
    277          	tcd.tcdAttr = DMA_ATTR_SSIZE(2) | DMA_ATTR_DSIZE(2); //EDMA_TCD_ATTR_SSIZE_32BIT|EDMA_TCD_ATTR_DSIZE_32BIT ;
   \   00000170   ........           LDR.W    R0,??DataTable79_16
   \   00000174   40F20221           MOVW     R1,#+514
   \   00000178   C180               STRH     R1,[R0, #+6]
    278          	tcd.soff = 0x0;
   \   0000017A   ........           LDR.W    R0,??DataTable79_16
   \   0000017E   0021               MOVS     R1,#+0
   \   00000180   8180               STRH     R1,[R0, #+4]
    279          	tcd.doff = 0x0;
   \   00000182   ........           LDR.W    R0,??DataTable79_16
   \   00000186   0021               MOVS     R1,#+0
   \   00000188   8182               STRH     R1,[R0, #+20]
    280          	tcd.slast = 0x0;
   \   0000018A   ........           LDR.W    R0,??DataTable79_16
   \   0000018E   0021               MOVS     R1,#+0
   \   00000190   C160               STR      R1,[R0, #+12]
    281          	tcd.loopcount = 0x1;
   \   00000192   ........           LDR.W    R0,??DataTable79_16
   \   00000196   0121               MOVS     R1,#+1
   \   00000198   8162               STR      R1,[R0, #+40]
    282          	tcd.dlast_sga = 0x0;
   \   0000019A   ........           LDR.W    R0,??DataTable79_16
   \   0000019E   0021               MOVS     R1,#+0
   \   000001A0   8161               STR      R1,[R0, #+24]
    283          	tcd.csr = 0x0620;
   \   000001A2   ........           LDR.W    R0,??DataTable79_16
   \   000001A6   4FF4C461           MOV      R1,#+1568
   \   000001AA   8183               STRH     R1,[R0, #+28]
    284          	
    285                  tcd.channelno = 1;
   \   000001AC   ........           LDR.W    R0,??DataTable79_16
   \   000001B0   0121               MOVS     R1,#+1
   \   000001B2   0162               STR      R1,[R0, #+32]
    286              
    287                  dma_config(CONFIG_BASIC_XFR, &tcd);
   \   000001B4   ........           LDR.W    R1,??DataTable79_16
   \   000001B8   0020               MOVS     R0,#+0
   \   000001BA   ........           BL       dma_config
    288                  DMA_ERQ|= 3;
   \   000001BE   ........           LDR.W    R0,??DataTable79_18  ;; 0x4000800c
   \   000001C2   0068               LDR      R0,[R0, #+0]
   \   000001C4   50F00300           ORRS     R0,R0,#0x3
   \   000001C8   ........           LDR.W    R1,??DataTable79_18  ;; 0x4000800c
   \   000001CC   0860               STR      R0,[R1, #+0]
    289          
    290          
    291                  tempptr = &Dma_Source_WORD1[1];
   \   000001CE   ........           LDR.W    R0,??DataTable79_22
    292          	
    293          	tcd.saddr = (uint32_t)tempptr;
   \   000001D2   ........           LDR.W    R1,??DataTable79_16
   \   000001D6   0860               STR      R0,[R1, #+0]
    294          	tcd.daddr = 0x40037110; //ADDRESS of PIT_LDVAL1
   \   000001D8   ........           LDR.W    R0,??DataTable79_16
   \   000001DC   ....               LDR.N    R1,??DataTable74_5  ;; 0x40037110
   \   000001DE   0161               STR      R1,[R0, #+16]
    295          	
    296          	tcd.nbytes = 4;
   \   000001E0   ........           LDR.W    R0,??DataTable79_16
   \   000001E4   0421               MOVS     R1,#+4
   \   000001E6   8160               STR      R1,[R0, #+8]
    297          	tcd.tcdAttr = DMA_ATTR_SSIZE(2) | DMA_ATTR_DSIZE(2); //EDMA_TCD_ATTR_SSIZE_32BIT|EDMA_TCD_ATTR_DSIZE_32BIT ;
   \   000001E8   ........           LDR.W    R0,??DataTable79_16
   \   000001EC   40F20221           MOVW     R1,#+514
   \   000001F0   C180               STRH     R1,[R0, #+6]
    298          	tcd.soff = 0x04;
   \   000001F2   ........           LDR.W    R0,??DataTable79_16
   \   000001F6   0421               MOVS     R1,#+4
   \   000001F8   8180               STRH     R1,[R0, #+4]
    299          	tcd.doff = 0x0;
   \   000001FA   ........           LDR.W    R0,??DataTable79_16
   \   000001FE   0021               MOVS     R1,#+0
   \   00000200   8182               STRH     R1,[R0, #+20]
    300          	tcd.slast = -8;
   \   00000202   ........           LDR.W    R0,??DataTable79_16
   \   00000206   7FF00701           MVNS     R1,#+7
   \   0000020A   C160               STR      R1,[R0, #+12]
    301          	tcd.loopcount = 0x2;
   \   0000020C   ........           LDR.W    R0,??DataTable79_16
   \   00000210   0221               MOVS     R1,#+2
   \   00000212   8162               STR      R1,[R0, #+40]
    302          	tcd.dlast_sga = 0x0;
   \   00000214   ........           LDR.W    R0,??DataTable79_16
   \   00000218   0021               MOVS     R1,#+0
   \   0000021A   8161               STR      R1,[R0, #+24]
    303          	tcd.csr = 0x0;
   \   0000021C   ........           LDR.W    R0,??DataTable79_16
   \   00000220   0021               MOVS     R1,#+0
   \   00000222   8183               STRH     R1,[R0, #+28]
    304                  tcd.channelno = 6;
   \   00000224   ........           LDR.W    R0,??DataTable79_16
   \   00000228   0621               MOVS     R1,#+6
   \   0000022A   0162               STR      R1,[R0, #+32]
    305          	
    306                  dma_config(CONFIG_BASIC_XFR, &tcd);
   \   0000022C   ........           LDR.W    R1,??DataTable79_16
   \   00000230   0020               MOVS     R0,#+0
   \   00000232   ........           BL       dma_config
    307                  DMA_ERQ|= 4;
   \   00000236   ........           LDR.W    R0,??DataTable79_18  ;; 0x4000800c
   \   0000023A   0068               LDR      R0,[R0, #+0]
   \   0000023C   50F00400           ORRS     R0,R0,#0x4
   \   00000240   ........           LDR.W    R1,??DataTable79_18  ;; 0x4000800c
   \   00000244   0860               STR      R0,[R1, #+0]
    308                 
    309                 
    310          }
   \   00000246   01BD               POP      {R0,PC}          ;; return
    311          
    312          //**************************************************************/
    313          

   \                                 In section .text, align 2, keep-with-next
    314          void main (void)
    315          {
   \                     main:
   \   00000000   80B5               PUSH     {R7,LR}
    316            
    317                    printf("TWR-K40X256 GPIO Example!\n");
   \   00000002   ........           LDR.W    R0,??DataTable79_23
   \   00000006   ........           BL       printf
    318                  
    319                    /* Turn on all port clocks */
    320                    SIM_SCGC5 = SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTE_MASK;
   \   0000000A   ........           LDR.W    R0,??DataTable79_24  ;; 0x40048038
   \   0000000E   4FF47851           MOV      R1,#+15872
   \   00000012   0160               STR      R1,[R0, #+0]
    321                  
    322                    /* Initialize GPIO on TWR-K40X256 */
    323                    init_gpio();
   \   00000014   ........           BL       init_gpio
    324                    
    325                    //PTD
    326                    Dma_Source_WORD[0]= 0x00000080; //7pin toggle
   \   00000018   ........           LDR.W    R0,??DataTable79_7
   \   0000001C   8021               MOVS     R1,#+128
   \   0000001E   0160               STR      R1,[R0, #+0]
    327                    // 1kHz duty 50% PIT_LDVAL0
    328                    Dma_Source_WORD[1]= 0x00000957;
   \   00000020   ........           LDR.W    R0,??DataTable79_7
   \   00000024   40F65711           MOVW     R1,#+2391
   \   00000028   4160               STR      R1,[R0, #+4]
    329                    Dma_Source_WORD[2]= 0x00000957;
   \   0000002A   ........           LDR.W    R0,??DataTable79_7
   \   0000002E   40F65711           MOVW     R1,#+2391
   \   00000032   8160               STR      R1,[R0, #+8]
    330                    
    331                    //PTA
    332                    Dma_Source_WORD1[0]= 0x00010000; //16pin toggle
   \   00000034   ........           LDR.W    R0,??DataTable79_11
   \   00000038   5FF48031           MOVS     R1,#+65536
   \   0000003C   0160               STR      R1,[R0, #+0]
    333                    // 1kHz duty 50% PIT_LDVAL1
    334                    Dma_Source_WORD1[1]= 0x00000957;
   \   0000003E   ........           LDR.W    R0,??DataTable79_11
   \   00000042   40F65711           MOVW     R1,#+2391
   \   00000046   4160               STR      R1,[R0, #+4]
    335                    Dma_Source_WORD1[2]= 0x00000957;
   \   00000048   ........           LDR.W    R0,??DataTable79_11
   \   0000004C   40F65711           MOVW     R1,#+2391
   \   00000050   8160               STR      R1,[R0, #+8]
    336                    
    337                    GPIOD_PTOR = 0x00000080; //PTD7 toggle
   \   00000052   ........           LDR.W    R0,??DataTable79_17  ;; 0x400ff0cc
   \   00000056   8021               MOVS     R1,#+128
   \   00000058   0160               STR      R1,[R0, #+0]
    338                    GPIOA_PTOR =  0x00010000; //PTA16 toggle
   \   0000005A   ........           LDR.W    R0,??DataTable79_21  ;; 0x400ff00c
   \   0000005E   5FF48031           MOVS     R1,#+65536
   \   00000062   0160               STR      R1,[R0, #+0]
    339                    dma_32bit();  // DMA setting
   \   00000064   ........           BL       dma_32bit
    340                    Set_Pit0(); // PIT module enbale
   \   00000068   ........           BL       Set_Pit0
    341                    PIT_LDVAL0 = 1777;
   \   0000006C   ....               LDR.N    R0,??DataTable74_3  ;; 0x40037100
   \   0000006E   40F2F161           MOVW     R1,#+1777
   \   00000072   0160               STR      R1,[R0, #+0]
    342                    PIT_LDVAL1 = 1777;
   \   00000074   ....               LDR.N    R0,??DataTable74_5  ;; 0x40037110
   \   00000076   40F2F161           MOVW     R1,#+1777
   \   0000007A   0160               STR      R1,[R0, #+0]
    343                    
    344                    PIT_TFLG0 = PIT_TFLG_TIF_MASK;
   \   0000007C   ........           LDR.W    R0,??DataTable79_25  ;; 0x4003710c
   \   00000080   0121               MOVS     R1,#+1
   \   00000082   0160               STR      R1,[R0, #+0]
    345                    PIT_TFLG1 = PIT_TFLG_TIF_MASK;
   \   00000084   ........           LDR.W    R0,??DataTable79_26  ;; 0x4003711c
   \   00000088   0121               MOVS     R1,#+1
   \   0000008A   0160               STR      R1,[R0, #+0]
    346                    GPIOD_PSOR = 0x00000080;  // PTD7 output
   \   0000008C   ........           LDR.W    R0,??DataTable79_27  ;; 0x400ff0c4
   \   00000090   8021               MOVS     R1,#+128
   \   00000092   0160               STR      R1,[R0, #+0]
    347                    GPIOA_PSOR = 0x00010000;  // PTA16 output
   \   00000094   ........           LDR.W    R0,??DataTable79_28  ;; 0x400ff004
   \   00000098   5FF48031           MOVS     R1,#+65536
   \   0000009C   0160               STR      R1,[R0, #+0]
    348                    PIT_TCTRL1 |= PIT_TCTRL_TEN_MASK;   // start the timer
   \   0000009E   ........           LDR.W    R0,??DataTable79_29  ;; 0x40037118
   \   000000A2   0068               LDR      R0,[R0, #+0]
   \   000000A4   50F00100           ORRS     R0,R0,#0x1
   \   000000A8   ........           LDR.W    R1,??DataTable79_29  ;; 0x40037118
   \   000000AC   0860               STR      R0,[R1, #+0]
    349                    PIT_TCTRL0 |= PIT_TCTRL_TEN_MASK;
   \   000000AE   ........           LDR.W    R0,??DataTable79_30  ;; 0x40037108
   \   000000B2   0068               LDR      R0,[R0, #+0]
   \   000000B4   50F00100           ORRS     R0,R0,#0x1
   \   000000B8   ........           LDR.W    R1,??DataTable79_30  ;; 0x40037108
   \   000000BC   0860               STR      R0,[R1, #+0]
    350                        
    351            while(1){
    352                        
    353             
    354            
    355              run_cmd();
   \                     ??main_0:
   \   000000BE   ........           BL       run_cmd
   \   000000C2   FCE7               B.N      ??main_0
    356            
    357            
    358            }//While(1)
    359            
    360            }//Main
    361            
    362            
    363            
    364          
    365          
    366          /*
    367           * Initialize GPIO
    368           */

   \                                 In section .text, align 2, keep-with-next
    369          void init_gpio()
    370          {
    371            //DMA outputs
    372            PORTD_PCR7|=(0|PORT_PCR_MUX(1)|PORT_PCR_IRQC(0x3));
   \                     init_gpio:
   \   00000000   ........           LDR.W    R0,??DataTable79_31  ;; 0x4004c01c
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   ........           LDR.W    R1,??DataTable79_32  ;; 0x30100
   \   0000000A   0843               ORRS     R0,R1,R0
   \   0000000C   ........           LDR.W    R1,??DataTable79_31  ;; 0x4004c01c
   \   00000010   0860               STR      R0,[R1, #+0]
    373            PORTA_PCR16|=(0|PORT_PCR_MUX(1)|PORT_PCR_IRQC(0x3));
   \   00000012   ........           LDR.W    R0,??DataTable79_33  ;; 0x40049040
   \   00000016   0068               LDR      R0,[R0, #+0]
   \   00000018   ........           LDR.W    R1,??DataTable79_32  ;; 0x30100
   \   0000001C   0843               ORRS     R0,R1,R0
   \   0000001E   ........           LDR.W    R1,??DataTable79_33  ;; 0x40049040
   \   00000022   0860               STR      R0,[R1, #+0]
    374          
    375          
    376            //Change PTD7, PTA16 to outputs
    377            
    378            GPIOD_PDDR|=GPIO_PDDR_PDD(GPIO_PIN(7));	
   \   00000024   ........           LDR.W    R0,??DataTable79_34  ;; 0x400ff0d4
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   50F08000           ORRS     R0,R0,#0x80
   \   0000002E   ........           LDR.W    R1,??DataTable79_34  ;; 0x400ff0d4
   \   00000032   0860               STR      R0,[R1, #+0]
    379            GPIOA_PDDR|=GPIO_PDDR_PDD(GPIO_PIN(16));	
   \   00000034   ........           LDR.W    R0,??DataTable79_35  ;; 0x400ff014
   \   00000038   0068               LDR      R0,[R0, #+0]
   \   0000003A   50F48030           ORRS     R0,R0,#0x10000
   \   0000003E   ........           LDR.W    R1,??DataTable79_35  ;; 0x400ff014
   \   00000042   0860               STR      R0,[R1, #+0]
    380          }
   \   00000044   7047               BX       LR               ;; return
    381          /********************************************************************/
    382          
    383          //////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    384          void dma_config(int COMMAND , struct dma_tcd *tcd_value)
    385          {
   \                     dma_config:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0C00               MOVS     R4,R1
    386          	int  i=0,j=0;
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   0026               MOVS     R6,#+0
    387          	
    388          	switch(COMMAND) 
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   25D0               BEQ.N    ??dma_config_0
   \   0000000C   0228               CMP      R0,#+2
   \   0000000E   75D0               BEQ.N    ??dma_config_1
   \   00000010   69D3               BCC.N    ??dma_config_2
   \   00000012   0428               CMP      R0,#+4
   \   00000014   00F0A480           BEQ.W    ??dma_config_3
   \   00000018   76D3               BCC.N    ??dma_config_4
   \   0000001A   0628               CMP      R0,#+6
   \   0000001C   00F01581           BEQ.W    ??dma_config_5
   \   00000020   C0F0CB80           BCC.W    ??dma_config_6
   \   00000024   0828               CMP      R0,#+8
   \   00000026   00F08781           BEQ.W    ??dma_config_7
   \   0000002A   C0F06281           BCC.W    ??dma_config_8
   \   0000002E   0A28               CMP      R0,#+10
   \   00000030   00F0C681           BEQ.W    ??dma_config_9
   \   00000034   C0F0A181           BCC.W    ??dma_config_10
   \   00000038   0C28               CMP      R0,#+12
   \   0000003A   00F02382           BEQ.W    ??dma_config_11
   \   0000003E   C0F00782           BCC.W    ??dma_config_12
   \   00000042   0E28               CMP      R0,#+14
   \   00000044   00F0AE82           BEQ.W    ??dma_config_13
   \   00000048   C0F09682           BCC.W    ??dma_config_14
   \   0000004C   1028               CMP      R0,#+16
   \   0000004E   00F0E582           BEQ.W    ??dma_config_15
   \   00000052   C0F0AF82           BCC.W    ??dma_config_16
   \   00000056   0DE3               B.N      ??dma_config_17
    389          	{
    390          	  case CONFIG_BASIC_XFR:	
    391          	    
    392                      i = tcd_value->channelno;
   \                     ??dma_config_0:
   \   00000058   256A               LDR      R5,[R4, #+32]
    393                      //printf("\nTesting DMA channel "); Print8(i); printf("\n");	   	
    394                      DMA_TCD_SADDR(i) = tcd_value->saddr;
   \   0000005A   6801               LSLS     R0,R5,#+5
   \   0000005C   ........           LDR.W    R1,??DataTable79_36  ;; 0x40009000
   \   00000060   2268               LDR      R2,[R4, #+0]
   \   00000062   4250               STR      R2,[R0, R1]
    395          		    
    396          	    DMA_TCD_ATTR(i) = tcd_value->tcdAttr;
   \   00000064   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000068   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000006C   E188               LDRH     R1,[R4, #+6]
   \   0000006E   C180               STRH     R1,[R0, #+6]
    397          	        
    398          	    DMA_TCD_SOFF(i) = tcd_value->soff;	  
   \   00000070   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000074   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000078   A188               LDRH     R1,[R4, #+4]
   \   0000007A   8180               STRH     R1,[R0, #+4]
    399          	       	
    400          	    DMA_TCD_NBYTES_MLNO(i) = tcd_value->nbytes;	
   \   0000007C   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000080   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000084   A168               LDR      R1,[R4, #+8]
   \   00000086   8160               STR      R1,[R0, #+8]
    401          		    	    
    402          	    DMA_TCD_SLAST(i) = tcd_value->slast;	        
   \   00000088   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   0000008C   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000090   E168               LDR      R1,[R4, #+12]
   \   00000092   C160               STR      R1,[R0, #+12]
    403          	        
    404          	    DMA_TCD_DADDR(i) = tcd_value->daddr;	    
   \   00000094   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000098   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000009C   2169               LDR      R1,[R4, #+16]
   \   0000009E   0161               STR      R1,[R0, #+16]
    405          	            
    406          	    DMA_TCD_CITER_ELINKNO(i) = DMA_CITER_ELINKNO_CITER(tcd_value->loopcount);	        
   \   000000A0   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000000A4   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000000A8   A16A               LDR      R1,[R4, #+40]
   \   000000AA   4904               LSLS     R1,R1,#+17
   \   000000AC   490C               LSRS     R1,R1,#+17
   \   000000AE   C182               STRH     R1,[R0, #+22]
    407          		    
    408                      DMA_TCD_DOFF(i) = tcd_value->doff;	
   \   000000B0   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000000B4   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000000B8   A18A               LDRH     R1,[R4, #+20]
   \   000000BA   8182               STRH     R1,[R0, #+20]
    409          		    	    
    410          	    DMA_TCD_DLASTSGA(i) = tcd_value->dlast_sga;	        
   \   000000BC   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000000C0   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000000C4   A169               LDR      R1,[R4, #+24]
   \   000000C6   8161               STR      R1,[R0, #+24]
    411          	        
    412                      DMA_TCD_BITER_ELINKNO(i) = DMA_BITER_ELINKNO_BITER(tcd_value->loopcount);
   \   000000C8   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000000CC   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000000D0   A16A               LDR      R1,[R4, #+40]
   \   000000D2   4904               LSLS     R1,R1,#+17
   \   000000D4   490C               LSRS     R1,R1,#+17
   \   000000D6   C183               STRH     R1,[R0, #+30]
    413          		    
    414                      DMA_TCD_CSR(i) = tcd_value->csr;
   \   000000D8   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000000DC   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000000E0   A18B               LDRH     R1,[R4, #+28]
   \   000000E2   8183               STRH     R1,[R0, #+28]
    415                      
    416          	
    417          	    break;
   \   000000E4   C6E2               B.N      ??dma_config_17
    418          		
    419                    case MEM_FILL:  
    420          		
    421          	    i = tcd_value->channelno;
   \                     ??dma_config_2:
   \   000000E6   256A               LDR      R5,[R4, #+32]
    422          	    for( j=0; j < tcd_value->nbytes; j++)	//j=j+4
   \   000000E8   0026               MOVS     R6,#+0
   \   000000EA   03E0               B.N      ??dma_config_18
    423          	    {
    424          	      //*((unsigned long int *)(tcd_value->saddr +j)) = tcd_value->testdata;
    425          	      *((unsigned char *)(tcd_value->saddr +j)) = j + i;
   \                     ??dma_config_19:
   \   000000EC   A819               ADDS     R0,R5,R6
   \   000000EE   2168               LDR      R1,[R4, #+0]
   \   000000F0   7054               STRB     R0,[R6, R1]
    426          	      //printf("\n"); Print8(*((unsigned char *)(tcd_value->saddr +j)));
    427          	    }
   \   000000F2   761C               ADDS     R6,R6,#+1
   \                     ??dma_config_18:
   \   000000F4   A068               LDR      R0,[R4, #+8]
   \   000000F6   8642               CMP      R6,R0
   \   000000F8   F8D3               BCC.N    ??dma_config_19
    428                      //*((unsigned long int *)(tcd_value->saddr +j)) = 0x0+j;
    429                      break;
   \   000000FA   BBE2               B.N      ??dma_config_17
    430          		
    431          	  case DMA_SOFT_START: 
    432          		
    433          	    i = tcd_value->channelno;		
   \                     ??dma_config_1:
   \   000000FC   256A               LDR      R5,[R4, #+32]
    434          	    //printf("\nDMA channel %d started.\n", i);
    435          	    DMA_SSRT = tcd_value->channelno;     
   \   000000FE   206A               LDR      R0,[R4, #+32]
   \   00000100   ........           LDR.W    R1,??DataTable79_37  ;; 0x4000801d
   \   00000104   0870               STRB     R0,[R1, #+0]
    436          	    break;
   \   00000106   B5E2               B.N      ??dma_config_17
    437          		        
    438                    case XFR_OVER_WAIT: 
    439          		
    440          	    i = tcd_value->channelno;
   \                     ??dma_config_4:
   \   00000108   256A               LDR      R5,[R4, #+32]
    441          	    //printf("\nBefore waiting.");
    442                      //printf("\nDMA_TCD_CSR %d = 0x%x", i, DMA_TCD_CSR(i));
    443                      //printf("\nDMA_CSR & MASK = 0x%x", (DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK));
    444                      //printf("\nDMA_ES = 0x%x", DMA_ES);
    445          	    while((( DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) == 0) && ( DMA_ES == 0));
   \                     ??dma_config_20:
   \   0000010A   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   0000010E   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000112   808B               LDRH     R0,[R0, #+28]
   \   00000114   0006               LSLS     R0,R0,#+24
   \   00000116   04D4               BMI.N    ??dma_config_21
   \   00000118   ........           LDR.W    R0,??DataTable79_38  ;; 0x40008004
   \   0000011C   0068               LDR      R0,[R0, #+0]
   \   0000011E   0028               CMP      R0,#+0
   \   00000120   F3D0               BEQ.N    ??dma_config_20
    446          	    //while((DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) == 0);
    447          	    //printf("\nAfter waiting.");			
    448          	    if (DMA_ES)
   \                     ??dma_config_21:
   \   00000122   ........           LDR.W    R0,??DataTable79_38  ;; 0x40008004
   \   00000126   0068               LDR      R0,[R0, #+0]
   \   00000128   0028               CMP      R0,#+0
   \   0000012A   18D0               BEQ.N    ??dma_config_22
    449          	    {
    450                        dma_error++;
   \   0000012C   ........           LDR.W    R0,??DataTable79_39
   \   00000130   0068               LDR      R0,[R0, #+0]
   \   00000132   401C               ADDS     R0,R0,#+1
   \   00000134   ........           LDR.W    R1,??DataTable79_39
   \   00000138   0860               STR      R0,[R1, #+0]
    451                        printf("\nERROR!!! An error ocurred while processing.\n");
   \   0000013A   ........           ADR.W    R0,`?<Constant "\\nERROR!!! An error oc...">`
   \   0000013E   ........           BL       printf
    452          	      printf("\nDMA_ES = 0x%x", DMA_ES);
   \   00000142   ........           LDR.W    R0,??DataTable79_38  ;; 0x40008004
   \   00000146   0168               LDR      R1,[R0, #+0]
   \   00000148   ........           ADR.W    R0,`?<Constant "\\nDMA_ES = 0x%x">`
   \   0000014C   ........           BL       printf
    453                        printf("\nDMA_ERR = 0x%x", DMA_ERR);
   \   00000150   ........           LDR.W    R0,??DataTable79_40  ;; 0x4000802c
   \   00000154   0168               LDR      R1,[R0, #+0]
   \   00000156   ........           ADR.W    R0,`?<Constant "\\nDMA_ERR = 0x%x">`
   \   0000015A   ........           BL       printf
    454          	    }  
    455          	    break;
   \                     ??dma_config_22:
   \   0000015E   89E2               B.N      ??dma_config_17
    456          		        
    457                    case CMP_MEM:
    458          		
    459                      j = tcd_value->channelno;
   \                     ??dma_config_3:
   \   00000160   266A               LDR      R6,[R4, #+32]
    460                      //printf("\nCSR0 = "); //Print16(DMA_TCD_CSR(0));
    461                      for(i=0; i < (tcd_value->nbytes); i++)
   \   00000162   0025               MOVS     R5,#+0
   \   00000164   00E0               B.N      ??dma_config_23
   \                     ??dma_config_24:
   \   00000166   6D1C               ADDS     R5,R5,#+1
   \                     ??dma_config_23:
   \   00000168   A068               LDR      R0,[R4, #+8]
   \   0000016A   8542               CMP      R5,R0
   \   0000016C   24D2               BCS.N    ??dma_config_25
    462                      {		            	
    463                        /*
    464          	      printf("\nSADDR: ");
    465                        Print32((unsigned long int)(tcd_value->saddr+ i)); printf(" = ");
    466                        Print8(*(unsigned char *)( tcd_value->saddr+ i));		          
    467                        printf("\nDADDR: ");
    468                        Print32((unsigned long int)(tcd_value->daddr+ i)); printf(" = ");
    469                        Print8(*(unsigned char *)( tcd_value->daddr+ i));
    470                        printf("\n");
    471               	      */
    472                        if ( (*(unsigned char *)(tcd_value->saddr + i)) != (*(unsigned char *)(tcd_value->daddr + i)) )
   \   0000016E   2068               LDR      R0,[R4, #+0]
   \   00000170   285C               LDRB     R0,[R5, R0]
   \   00000172   2169               LDR      R1,[R4, #+16]
   \   00000174   695C               LDRB     R1,[R5, R1]
   \   00000176   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000178   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000017A   8842               CMP      R0,R1
   \   0000017C   F3D0               BEQ.N    ??dma_config_24
    473                        {
    474                          dma_error++;
   \   0000017E   ........           LDR.W    R0,??DataTable79_39
   \   00000182   0068               LDR      R0,[R0, #+0]
   \   00000184   401C               ADDS     R0,R0,#+1
   \   00000186   ........           LDR.W    R1,??DataTable79_39
   \   0000018A   0860               STR      R0,[R1, #+0]
    475                          printf("\nData error!");
   \   0000018C   ........           ADR.W    R0,`?<Constant "\\nData error!">`
   \   00000190   ........           BL       printf
    476                   	printf("\nSADDR: 0x%x = 0x%x", ((unsigned long int)(tcd_value->saddr+i)), (*(unsigned char *)( tcd_value->saddr+i)));       
   \   00000194   2068               LDR      R0,[R4, #+0]
   \   00000196   2A5C               LDRB     R2,[R5, R0]
   \   00000198   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000019A   2068               LDR      R0,[R4, #+0]
   \   0000019C   2918               ADDS     R1,R5,R0
   \   0000019E   ........           ADR.W    R0,`?<Constant "\\nSADDR: 0x%x = 0x%x">`
   \   000001A2   ........           BL       printf
    477                          printf("\nDADDR: 0x%x = 0x%x", ((unsigned long int)(tcd_value->daddr+i)), (*(unsigned char *)( tcd_value->daddr+i)));
   \   000001A6   2069               LDR      R0,[R4, #+16]
   \   000001A8   2A5C               LDRB     R2,[R5, R0]
   \   000001AA   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001AC   2069               LDR      R0,[R4, #+16]
   \   000001AE   2918               ADDS     R1,R5,R0
   \   000001B0   ........           ADR.W    R0,`?<Constant "\\nDADDR: 0x%x = 0x%x">`
   \   000001B4   ........           BL       printf
    478                          break;
    479                        }
    480                      }
    481                    
    482                      break;                
   \                     ??dma_config_25:
   \   000001B8   5CE2               B.N      ??dma_config_17
    483                      
    484                    case CONFIG_BASIC_XFR_ERR:
    485                  
    486                      i = tcd_value->channelno ;
   \                     ??dma_config_6:
   \   000001BA   256A               LDR      R5,[R4, #+32]
    487                      printf("\nTesting DMA channel %d", i);
   \   000001BC   2900               MOVS     R1,R5
   \   000001BE   ........           ADR.W    R0,`?<Constant "\\nTesting DMA channel %d">`
   \   000001C2   ........           BL       printf
    488                      DMA_TCD_SADDR(i) = tcd_value->saddr ;
   \   000001C6   6801               LSLS     R0,R5,#+5
   \   000001C8   ........           LDR.W    R1,??DataTable79_36  ;; 0x40009000
   \   000001CC   2268               LDR      R2,[R4, #+0]
   \   000001CE   4250               STR      R2,[R0, R1]
    489          	
    490                      DMA_TCD_ATTR(i) = tcd_value->tcdAttr; 
   \   000001D0   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000001D4   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000001D8   E188               LDRH     R1,[R4, #+6]
   \   000001DA   C180               STRH     R1,[R0, #+6]
    491          							
    492                      DMA_TCD_SOFF(i) = tcd_value->soff;
   \   000001DC   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000001E0   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000001E4   A188               LDRH     R1,[R4, #+4]
   \   000001E6   8180               STRH     R1,[R0, #+4]
    493          	
    494                      DMA_TCD_NBYTES_MLNO(i) = tcd_value->nbytes;
   \   000001E8   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000001EC   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000001F0   A168               LDR      R1,[R4, #+8]
   \   000001F2   8160               STR      R1,[R0, #+8]
    495          	
    496                      DMA_TCD_SLAST(i) = tcd_value->slast;
   \   000001F4   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000001F8   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000001FC   E168               LDR      R1,[R4, #+12]
   \   000001FE   C160               STR      R1,[R0, #+12]
    497          
    498                      DMA_TCD_DADDR(i) = tcd_value->daddr;
   \   00000200   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000204   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000208   2169               LDR      R1,[R4, #+16]
   \   0000020A   0161               STR      R1,[R0, #+16]
    499          	
    500                      //DMA_TCD_CITER_ELINKNO(i) = tcd_value->citer;
    501                      DMA_TCD_CITER_ELINKYES(i) = tcd_value->citer;
   \   0000020C   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000210   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000214   E18A               LDRH     R1,[R4, #+22]
   \   00000216   C182               STRH     R1,[R0, #+22]
    502          								
    503                      DMA_TCD_DOFF(i) = tcd_value->doff;
   \   00000218   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   0000021C   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000220   A18A               LDRH     R1,[R4, #+20]
   \   00000222   8182               STRH     R1,[R0, #+20]
    504          									
    505                      DMA_TCD_DLASTSGA(i) = tcd_value->dlast_sga;
   \   00000224   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000228   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000022C   A169               LDR      R1,[R4, #+24]
   \   0000022E   8161               STR      R1,[R0, #+24]
    506          
    507                      //DMA_TCD_BITER_ELINKNO(i) = tcd_value->biter;
    508                      DMA_TCD_BITER_ELINKYES(i) = tcd_value->biter;
   \   00000230   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000234   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000238   E18B               LDRH     R1,[R4, #+30]
   \   0000023A   C183               STRH     R1,[R0, #+30]
    509          	
    510                      DMA_TCD_CSR(i) = tcd_value->csr;	
   \   0000023C   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000240   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000244   A18B               LDRH     R1,[R4, #+28]
   \   00000246   8183               STRH     R1,[R0, #+28]
    511          		        
    512                      break; 
   \   00000248   14E2               B.N      ??dma_config_17
    513                  		
    514                    case MINOR_LOOP_CH_LINK:
    515          		
    516                      i = tcd_value->channelno ;
   \                     ??dma_config_5:
   \   0000024A   256A               LDR      R5,[R4, #+32]
    517          		
    518                      j = tcd_value->link ;
   \   0000024C   E66A               LDR      R6,[R4, #+44]
    519          
    520                      
    521          		        		   	
    522                      DMA_TCD_SADDR(i) = tcd_value->saddr ;
   \   0000024E   6801               LSLS     R0,R5,#+5
   \   00000250   ........           LDR.W    R1,??DataTable79_36  ;; 0x40009000
   \   00000254   2268               LDR      R2,[R4, #+0]
   \   00000256   4250               STR      R2,[R0, R1]
    523          	
    524                      DMA_TCD_ATTR(i) = tcd_value->tcdAttr; 
   \   00000258   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   0000025C   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000260   E188               LDRH     R1,[R4, #+6]
   \   00000262   C180               STRH     R1,[R0, #+6]
    525          							
    526                      DMA_TCD_SOFF(i) = tcd_value->soff;
   \   00000264   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000268   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000026C   A188               LDRH     R1,[R4, #+4]
   \   0000026E   8180               STRH     R1,[R0, #+4]
    527          	
    528                      DMA_TCD_NBYTES_MLNO(i) = tcd_value->nbytes;
   \   00000270   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000274   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000278   A168               LDR      R1,[R4, #+8]
   \   0000027A   8160               STR      R1,[R0, #+8]
    529          	
    530                      DMA_TCD_SLAST(i) = 0x0;
   \   0000027C   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000280   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000284   0021               MOVS     R1,#+0
   \   00000286   C160               STR      R1,[R0, #+12]
    531          
    532                      DMA_TCD_DADDR(i) = tcd_value->daddr;
   \   00000288   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   0000028C   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000290   2169               LDR      R1,[R4, #+16]
   \   00000292   0161               STR      R1,[R0, #+16]
    533          	
    534                      DMA_TCD_CITER_ELINKYES(i) =  DMA_CITER_ELINKYES_CITER(tcd_value->loopcount)| DMA_CITER_ELINKYES_ELINK_MASK | DMA_CITER_ELINKYES_LINKCH(j) ;
   \   00000294   A06A               LDR      R0,[R4, #+40]
   \   00000296   C005               LSLS     R0,R0,#+23
   \   00000298   C00D               LSRS     R0,R0,#+23
   \   0000029A   7102               LSLS     R1,R6,#+9
   \   0000029C   11F4F051           ANDS     R1,R1,#0x1E00
   \   000002A0   0843               ORRS     R0,R1,R0
   \   000002A2   50F40040           ORRS     R0,R0,#0x8000
   \   000002A6   ........           LDR.W    R1,??DataTable79_36  ;; 0x40009000
   \   000002AA   11EB4511           ADDS     R1,R1,R5, LSL #+5
   \   000002AE   C882               STRH     R0,[R1, #+22]
    535          																											
    536                      DMA_TCD_DOFF(i) = tcd_value->doff;
   \   000002B0   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000002B4   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000002B8   A18A               LDRH     R1,[R4, #+20]
   \   000002BA   8182               STRH     R1,[R0, #+20]
    537          									
    538                      DMA_TCD_DLASTSGA(i) = 0x0;
   \   000002BC   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000002C0   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000002C4   0021               MOVS     R1,#+0
   \   000002C6   8161               STR      R1,[R0, #+24]
    539          
    540                      DMA_TCD_BITER_ELINKYES(i) =  DMA_BITER_ELINKYES_BITER(tcd_value->loopcount)| DMA_BITER_ELINKYES_ELINK_MASK | DMA_BITER_ELINKYES_LINKCH(j);
   \   000002C8   A06A               LDR      R0,[R4, #+40]
   \   000002CA   C005               LSLS     R0,R0,#+23
   \   000002CC   C00D               LSRS     R0,R0,#+23
   \   000002CE   7102               LSLS     R1,R6,#+9
   \   000002D0   11F4F051           ANDS     R1,R1,#0x1E00
   \   000002D4   0843               ORRS     R0,R1,R0
   \   000002D6   50F40040           ORRS     R0,R0,#0x8000
   \   000002DA   ........           LDR.W    R1,??DataTable79_36  ;; 0x40009000
   \   000002DE   11EB4511           ADDS     R1,R1,R5, LSL #+5
   \   000002E2   C883               STRH     R0,[R1, #+30]
    541          	
    542                      DMA_TCD_CSR(i) = 0x0;	
   \   000002E4   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000002E8   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000002EC   0021               MOVS     R1,#+0
   \   000002EE   8183               STRH     R1,[R0, #+28]
    543          		        
    544                      //printf("\nDMA_TCD_CITER_ELINKYES %d = 0x%x", i , DMA_TCD_CITER_ELINKYES(i));
    545                      //printf("\nDMA_TCD_BITER_ELINKYES %d = 0x%x", i , DMA_TCD_BITER_ELINKYES(i));
    546                      break;
   \   000002F0   C0E1               B.N      ??dma_config_17
    547          
    548                    case MAJOR_LOOP_LINK_EN:
    549          	  		
    550                      i = tcd_value->channelno;
   \                     ??dma_config_8:
   \   000002F2   256A               LDR      R5,[R4, #+32]
    551                      j = tcd_value->link;
   \   000002F4   E66A               LDR      R6,[R4, #+44]
   \   000002F6   05E0               B.N      ??dma_config_26
    552                      /* In order to follow the coherency model, the following
    553                          steps are REQUIRED to correctly enable major channel
    554                          linking:
    555          		
    556                          1. Perform a write to the CSR to clear the DONE bit
    557                          2. Then perform another write to the CSR to set the MAJORELINK bit */
    558                      
    559                      /* Make sure the DONE bit is cleared before enabling link */
    560          			
    561                      /* Keep trying to clear DONE bit until it is detected cleared */	
    562                      while ((DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) != 0)
    563                      {
    564                        DMA_TCD_CSR(i) = 0 ;
   \                     ??dma_config_27:
   \   000002F8   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000002FC   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000300   0021               MOVS     R1,#+0
   \   00000302   8183               STRH     R1,[R0, #+28]
    565                      }														
   \                     ??dma_config_26:
   \   00000304   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000308   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000030C   808B               LDRH     R0,[R0, #+28]
   \   0000030E   0006               LSLS     R0,R0,#+24
   \   00000310   F2D4               BMI.N    ??dma_config_27
    566          			
    567                      /* Keep trying to set E_LINK bit until it is detected set */	
    568                      while ((DMA_TCD_CSR(i) & DMA_CSR_MAJORELINK_MASK) == 0)
   \                     ??dma_config_28:
   \   00000312   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000316   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000031A   808B               LDRH     R0,[R0, #+28]
   \   0000031C   8006               LSLS     R0,R0,#+26
   \   0000031E   0AD4               BMI.N    ??dma_config_29
    569                      {
    570                        DMA_TCD_CSR(i) = ( 0
    571                                            |  DMA_CSR_MAJORLINKCH(j)
    572                                            |  DMA_CSR_MAJORELINK_MASK 
    573                                          );									
   \   00000320   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000324   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000328   3102               LSLS     R1,R6,#+8
   \   0000032A   11F47061           ANDS     R1,R1,#0xF00
   \   0000032E   51F02001           ORRS     R1,R1,#0x20
   \   00000332   8183               STRH     R1,[R0, #+28]
   \   00000334   EDE7               B.N      ??dma_config_28
    574                      }
    575          	    //printf("\nDMA_TCD_CSR %d = 0x%x", i, DMA_TCD_CSR(i));			
    576                      break;
   \                     ??dma_config_29:
   \   00000336   9DE1               B.N      ??dma_config_17
    577               
    578                    case SLAST_CHECK:
    579          			
    580                      i = tcd_value->channelno ;		
   \                     ??dma_config_7:
   \   00000338   256A               LDR      R5,[R4, #+32]
    581          		
    582                      if ( DMA_TCD_SADDR(i) == tcd_value->saddr)
   \   0000033A   6801               LSLS     R0,R5,#+5
   \   0000033C   ........           LDR.W    R1,??DataTable79_36  ;; 0x40009000
   \   00000340   4058               LDR      R0,[R0, R1]
   \   00000342   2168               LDR      R1,[R4, #+0]
   \   00000344   8842               CMP      R0,R1
   \   00000346   04D1               BNE.N    ??dma_config_30
    583                        printf("\nSLAST adjustment is correct.");
   \   00000348   ........           ADR.W    R0,`?<Constant "\\nSLAST adjustment is ...">`
   \   0000034C   ........           BL       printf
   \   00000350   12E0               B.N      ??dma_config_31
    584                      else
    585                      {
    586                        dma_error++;
   \                     ??dma_config_30:
   \   00000352   ........           LDR.W    R0,??DataTable79_39
   \   00000356   0068               LDR      R0,[R0, #+0]
   \   00000358   401C               ADDS     R0,R0,#+1
   \   0000035A   ........           LDR.W    R1,??DataTable79_39
   \   0000035E   0860               STR      R0,[R1, #+0]
    587                        printf("\nERROR!!! SLAST adjustment not correct.");
   \   00000360   ........           ADR.W    R0,`?<Constant "\\nERROR!!! SLAST adjus...">`
   \   00000364   ........           BL       printf
    588                        printf("\nSADDR = 0x%x", DMA_TCD_SADDR(i));
   \   00000368   6801               LSLS     R0,R5,#+5
   \   0000036A   ........           LDR.W    R1,??DataTable79_36  ;; 0x40009000
   \   0000036E   4158               LDR      R1,[R0, R1]
   \   00000370   ........           ADR.W    R0,`?<Constant "\\nSADDR = 0x%x">`
   \   00000374   ........           BL       printf
    589                      }
    590                      break;
   \                     ??dma_config_31:
   \   00000378   7CE1               B.N      ??dma_config_17
    591          		         
    592                    case DLAST_CHECK:
    593          			
    594                      i = tcd_value->channelno ;		
   \                     ??dma_config_10:
   \   0000037A   256A               LDR      R5,[R4, #+32]
    595          		
    596                      if ( DMA_TCD_DADDR(i) == tcd_value->daddr)
   \   0000037C   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000380   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000384   0069               LDR      R0,[R0, #+16]
   \   00000386   2169               LDR      R1,[R4, #+16]
   \   00000388   8842               CMP      R0,R1
   \   0000038A   04D1               BNE.N    ??dma_config_32
    597                        printf("\nDLAST adjustment is correct.");
   \   0000038C   ........           ADR.W    R0,`?<Constant "\\nDLAST adjustment is ...">`
   \   00000390   ........           BL       printf
   \   00000394   13E0               B.N      ??dma_config_33
    598                      else
    599                      {
    600                        dma_error++;
   \                     ??dma_config_32:
   \   00000396   ........           LDR.W    R0,??DataTable79_39
   \   0000039A   0068               LDR      R0,[R0, #+0]
   \   0000039C   401C               ADDS     R0,R0,#+1
   \   0000039E   ........           LDR.W    R1,??DataTable79_39
   \   000003A2   0860               STR      R0,[R1, #+0]
    601                        printf("\nERROR!!! DLAST adjustment not correct.\n");
   \   000003A4   ........           ADR.W    R0,`?<Constant "\\nERROR!!! DLAST adjus...">`
   \   000003A8   ........           BL       printf
    602                        printf("\nDADDR = 0x%x", DMA_TCD_DADDR(i));
   \   000003AC   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000003B0   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000003B4   0169               LDR      R1,[R0, #+16]
   \   000003B6   ........           ADR.W    R0,`?<Constant "\\nDADDR = 0x%x">`
   \   000003BA   ........           BL       printf
    603                      }
    604                      break;
   \                     ??dma_config_33:
   \   000003BE   59E1               B.N      ??dma_config_17
    605          		        		   
    606                    case SGA_TEST_CONFIG:
    607          		
    608                      i = tcd_value->channelno ;
   \                     ??dma_config_9:
   \   000003C0   256A               LDR      R5,[R4, #+32]
    609          		        
    610                      printf("\nTesting DMA channel %d.", i);
   \   000003C2   2900               MOVS     R1,R5
   \   000003C4   ........           ADR.W    R0,`?<Constant "\\nTesting DMA channel %d.">`
   \   000003C8   ........           BL       printf
    611          		        		   	
    612                      DMA_TCD_SADDR(i) = tcd_value->saddr;
   \   000003CC   6801               LSLS     R0,R5,#+5
   \   000003CE   ........           LDR.W    R1,??DataTable79_36  ;; 0x40009000
   \   000003D2   2268               LDR      R2,[R4, #+0]
   \   000003D4   4250               STR      R2,[R0, R1]
    613          	
    614                      DMA_TCD_ATTR(i) = tcd_value->tcdAttr; 
   \   000003D6   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000003DA   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000003DE   E188               LDRH     R1,[R4, #+6]
   \   000003E0   C180               STRH     R1,[R0, #+6]
    615          							
    616                      DMA_TCD_SOFF(i) = tcd_value->soff;
   \   000003E2   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000003E6   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000003EA   A188               LDRH     R1,[R4, #+4]
   \   000003EC   8180               STRH     R1,[R0, #+4]
    617          	
    618                      DMA_TCD_NBYTES_MLNO(i) = tcd_value->nbytes;
   \   000003EE   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000003F2   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   000003F6   A168               LDR      R1,[R4, #+8]
   \   000003F8   8160               STR      R1,[R0, #+8]
    619          	
    620                      DMA_TCD_SLAST(i) = tcd_value->slast;
   \   000003FA   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   000003FE   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000402   E168               LDR      R1,[R4, #+12]
   \   00000404   C160               STR      R1,[R0, #+12]
    621          
    622                      DMA_TCD_DADDR(i) = tcd_value->daddr;
   \   00000406   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   0000040A   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000040E   2169               LDR      R1,[R4, #+16]
   \   00000410   0161               STR      R1,[R0, #+16]
    623          	
    624                      DMA_TCD_CITER_ELINKNO(i) =  DMA_CITER_ELINKNO_CITER(tcd_value->loopcount) ;
   \   00000412   ........           LDR.W    R0,??DataTable79_36  ;; 0x40009000
   \   00000416   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000041A   A16A               LDR      R1,[R4, #+40]
   \   0000041C   4904               LSLS     R1,R1,#+17
   \   0000041E   490C               LSRS     R1,R1,#+17
   \   00000420   C182               STRH     R1,[R0, #+22]
    625          								
    626                      DMA_TCD_DOFF(i) = tcd_value->doff;
   \   00000422   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   00000424   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000428   A18A               LDRH     R1,[R4, #+20]
   \   0000042A   8182               STRH     R1,[R0, #+20]
    627          									
    628                      DMA_TCD_DLASTSGA(i) = tcd_value->link;
   \   0000042C   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   0000042E   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000432   E16A               LDR      R1,[R4, #+44]
   \   00000434   8161               STR      R1,[R0, #+24]
    629          
    630                      DMA_TCD_BITER_ELINKNO(i) =  DMA_BITER_ELINKNO_BITER(tcd_value->loopcount);
   \   00000436   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   00000438   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000043C   A16A               LDR      R1,[R4, #+40]
   \   0000043E   4904               LSLS     R1,R1,#+17
   \   00000440   490C               LSRS     R1,R1,#+17
   \   00000442   C183               STRH     R1,[R0, #+30]
    631          	
    632                      DMA_TCD_CSR(i) = tcd_value->csr;	
   \   00000444   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   00000446   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000044A   A18B               LDRH     R1,[R4, #+28]
   \   0000044C   8183               STRH     R1,[R0, #+28]
    633                    
    634                      break;
   \   0000044E   11E1               B.N      ??dma_config_17
    635          		        
    636                    case SGA_ENB: 	
    637                      /* In order to follow the coherency model, the following
    638                          steps are REQUIRED to correctly enable scatter/gather
    639                          functionality:
    640          		
    641                          1. Perform a write to the CSR to clear the DONE bit
    642                          2. Then perform another write to the CSR to set the E_SG bit */
    643                      /* Make sure the DONE bit is cleared before enabling link */
    644                      /* Keep trying to clear DONE bit until it is detected cleared */	
    645          	    	
    646                      i = tcd_value->channelno ;
   \                     ??dma_config_12:
   \   00000450   256A               LDR      R5,[R4, #+32]
   \   00000452   04E0               B.N      ??dma_config_34
    647          	               
    648                      while ((DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) != 0)
    649                      {
    650                        DMA_TCD_CSR(i) = 0 ;
   \                     ??dma_config_35:
   \   00000454   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   00000456   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000045A   0021               MOVS     R1,#+0
   \   0000045C   8183               STRH     R1,[R0, #+28]
    651                      }														
   \                     ??dma_config_34:
   \   0000045E   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   00000460   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000464   808B               LDRH     R0,[R0, #+28]
   \   00000466   0006               LSLS     R0,R0,#+24
   \   00000468   F4D4               BMI.N    ??dma_config_35
    652          		
    653                      /* Keep trying to set E_SG bit until it is detected set */	
    654                      while ((DMA_TCD_CSR(i) & DMA_CSR_ESG_MASK) == 0)
   \                     ??dma_config_36:
   \   0000046A   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   0000046C   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000470   808B               LDRH     R0,[R0, #+28]
   \   00000472   C006               LSLS     R0,R0,#+27
   \   00000474   05D4               BMI.N    ??dma_config_37
    655                      {
    656                        DMA_TCD_CSR(i) = ( 0
    657                                            |  DMA_CSR_ESG_MASK 
    658                                          );
   \   00000476   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   00000478   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000047C   1021               MOVS     R1,#+16
   \   0000047E   8183               STRH     R1,[R0, #+28]
   \   00000480   F3E7               B.N      ??dma_config_36
    659                      }					
    660                      break;
   \                     ??dma_config_37:
   \   00000482   F7E0               B.N      ??dma_config_17
    661          		            
    662                    case XFR_WAIT_ERROR_CHECK: 	/* Wait for DMA to complete */
    663          			
    664                      i = tcd_value->channelno ;
   \                     ??dma_config_11:
   \   00000484   256A               LDR      R5,[R4, #+32]
    665                      //printf("\nbefore while..");																	
    666                      while((( DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) == 0) && ( DMA_ES == 0));
   \                     ??dma_config_38:
   \   00000486   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   00000488   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   0000048C   808B               LDRH     R0,[R0, #+28]
   \   0000048E   0006               LSLS     R0,R0,#+24
   \   00000490   03D4               BMI.N    ??dma_config_39
   \   00000492   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   00000494   0068               LDR      R0,[R0, #+0]
   \   00000496   0028               CMP      R0,#+0
   \   00000498   F5D0               BEQ.N    ??dma_config_38
    667                      //printf("\nafter while..");
    668                      /* Check for errors */
    669                      if (DMA_ES)
   \                     ??dma_config_39:
   \   0000049A   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   0000049C   0068               LDR      R0,[R0, #+0]
   \   0000049E   0028               CMP      R0,#+0
   \   000004A0   65D0               BEQ.N    ??dma_config_40
    670                      {
    671                        //printf("\nDMA_TCD_CSR = "); Print16(DMA_TCD_CSR(i));
    672                        //printf("\nDMA_ES = "); Print32(DMA_ES);
    673                        //printf("\nDMA_ERR = "); Print32(DMA_ERR);
    674          	      dma_error++; 	
   \   000004A2   ....               LDR.N    R0,??DataTable79_39
   \   000004A4   0068               LDR      R0,[R0, #+0]
   \   000004A6   401C               ADDS     R0,R0,#+1
   \   000004A8   ....               LDR.N    R1,??DataTable79_39
   \   000004AA   0860               STR      R0,[R1, #+0]
    675                        if ((DMA_ES & DMA_ES_DAE_MASK) != 0)
   \   000004AC   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   000004AE   0068               LDR      R0,[R0, #+0]
   \   000004B0   8006               LSLS     R0,R0,#+26
   \   000004B2   04D5               BPL.N    ??dma_config_41
    676                        {
    677                          printf("\nDAE error detected correctly.\n");
   \   000004B4   ........           ADR.W    R0,`?<Constant "\\nDAE error detected c...">`
   \   000004B8   ........           BL       printf
    678                          j++;
   \   000004BC   761C               ADDS     R6,R6,#+1
    679                        }	
    680                        if((DMA_ES & DMA_ES_DBE_MASK) != 0)
   \                     ??dma_config_41:
   \   000004BE   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   000004C0   0068               LDR      R0,[R0, #+0]
   \   000004C2   C007               LSLS     R0,R0,#+31
   \   000004C4   04D5               BPL.N    ??dma_config_42
    681                        {
    682                          printf("\nDBE error detected correctly.\n");
   \   000004C6   ........           ADR.W    R0,`?<Constant "\\nDBE error detected c...">`
   \   000004CA   ........           BL       printf
    683                          j++;
   \   000004CE   761C               ADDS     R6,R6,#+1
    684                        }
    685                        if((DMA_ES & DMA_ES_DOE_MASK) != 0)
   \                     ??dma_config_42:
   \   000004D0   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   000004D2   0068               LDR      R0,[R0, #+0]
   \   000004D4   C006               LSLS     R0,R0,#+27
   \   000004D6   04D5               BPL.N    ??dma_config_43
    686                        {
    687                          printf("\nDOE error detected correctly.\n");
   \   000004D8   ........           ADR.W    R0,`?<Constant "\\nDOE error detected c...">`
   \   000004DC   ........           BL       printf
    688                          j++;
   \   000004E0   761C               ADDS     R6,R6,#+1
    689                        }
    690                        if((DMA_ES & DMA_ES_NCE_MASK) != 0)
   \                     ??dma_config_43:
   \   000004E2   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   000004E4   0068               LDR      R0,[R0, #+0]
   \   000004E6   0007               LSLS     R0,R0,#+28
   \   000004E8   04D5               BPL.N    ??dma_config_44
    691                        {
    692                          printf("\nNCE error detected correctly.\n");
   \   000004EA   ........           ADR.W    R0,`?<Constant "\\nNCE error detected c...">`
   \   000004EE   ........           BL       printf
    693                          j++;
   \   000004F2   761C               ADDS     R6,R6,#+1
    694                        }
    695                        if((DMA_ES & DMA_ES_SAE_MASK) != 0)
   \                     ??dma_config_44:
   \   000004F4   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   000004F6   0068               LDR      R0,[R0, #+0]
   \   000004F8   0006               LSLS     R0,R0,#+24
   \   000004FA   04D5               BPL.N    ??dma_config_45
    696                        {
    697                          printf("\nSAE error detected correctly.\n");
   \   000004FC   ........           ADR.W    R0,`?<Constant "\\nSAE error detected c...">`
   \   00000500   ........           BL       printf
    698                          j++;
   \   00000504   761C               ADDS     R6,R6,#+1
    699                        }
    700                        if((DMA_ES & DMA_ES_CPE_MASK) != 0)
   \                     ??dma_config_45:
   \   00000506   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   00000508   0068               LDR      R0,[R0, #+0]
   \   0000050A   4004               LSLS     R0,R0,#+17
   \   0000050C   04D5               BPL.N    ??dma_config_46
    701                        {
    702                          printf("\nCPE error detected correctly.\n");
   \   0000050E   ........           ADR.W    R0,`?<Constant "\\nCPE error detected c...">`
   \   00000512   ........           BL       printf
    703                          j++;
   \   00000516   761C               ADDS     R6,R6,#+1
    704                        }
    705                        if((DMA_ES & DMA_ES_SBE_MASK) != 0)
   \                     ??dma_config_46:
   \   00000518   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   0000051A   0068               LDR      R0,[R0, #+0]
   \   0000051C   8007               LSLS     R0,R0,#+30
   \   0000051E   04D5               BPL.N    ??dma_config_47
    706                        {
    707                          printf("\nSBE error detected correctly.\n");
   \   00000520   ........           ADR.W    R0,`?<Constant "\\nSBE error detected c...">`
   \   00000524   ........           BL       printf
    708                          j++;
   \   00000528   761C               ADDS     R6,R6,#+1
    709                        }
    710                        if((DMA_ES & DMA_ES_SGE_MASK) != 0)
   \                     ??dma_config_47:
   \   0000052A   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   0000052C   0068               LDR      R0,[R0, #+0]
   \   0000052E   4007               LSLS     R0,R0,#+29
   \   00000530   04D5               BPL.N    ??dma_config_48
    711                        {
    712                          printf("\nSGE error detected correctly.\n");
   \   00000532   ........           ADR.W    R0,`?<Constant "\\nSGE error detected c...">`
   \   00000536   ........           BL       printf
    713                          j++;
   \   0000053A   761C               ADDS     R6,R6,#+1
    714                        } 
    715                        if((DMA_ES & DMA_ES_SOE_MASK) != 0)
   \                     ??dma_config_48:
   \   0000053C   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   0000053E   0068               LDR      R0,[R0, #+0]
   \   00000540   4006               LSLS     R0,R0,#+25
   \   00000542   04D5               BPL.N    ??dma_config_49
    716                        {
    717                          printf("\nSOE error detected correctly.\n");
   \   00000544   ........           ADR.W    R0,`?<Constant "\\nSOE error detected c...">`
   \   00000548   ........           BL       printf
    718                          j++;
   \   0000054C   761C               ADDS     R6,R6,#+1
    719                        }
    720                        if((DMA_ES & DMA_ES_ECX_MASK) != 0)
   \                     ??dma_config_49:
   \   0000054E   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   00000550   0068               LDR      R0,[R0, #+0]
   \   00000552   C003               LSLS     R0,R0,#+15
   \   00000554   04D5               BPL.N    ??dma_config_50
    721                        {
    722                          printf("\nError cancel transfer detected correctly.\n");
   \   00000556   ........           ADR.W    R0,`?<Constant "\\nError cancel transfe...">`
   \   0000055A   ........           BL       printf
    723                          j++;
   \   0000055E   761C               ADDS     R6,R6,#+1
    724                        }
    725                        if (j == 0)
   \                     ??dma_config_50:
   \   00000560   002E               CMP      R6,#+0
   \   00000562   08D1               BNE.N    ??dma_config_51
    726                          printf("\nERROR NOT DETECTED!!!\n");		        
   \   00000564   ........           ADR.W    R0,`?<Constant "\\nERROR NOT DETECTED!!!\\n">`
   \   00000568   ........           BL       printf
   \   0000056C   03E0               B.N      ??dma_config_51
    727                          //printf("\nDMAERR = "); Print32(DMA_ERR);
    728                      }
    729          	    else
    730                        printf("\nNO ERROR DETECTED!!!\n");
   \                     ??dma_config_40:
   \   0000056E   ........           ADR.W    R0,`?<Constant "\\nNO ERROR DETECTED!!!\\n">`
   \   00000572   ........           BL       printf
    731          	            	
    732          	    break;
   \                     ??dma_config_51:
   \   00000576   7DE0               B.N      ??dma_config_17
    733          	            	
    734                    case ERROR_CLR:     
    735          			
    736                      printf("\nBefore DMA_ERR = 0x%x", DMA_ERR);
   \                     ??dma_config_14:
   \   00000578   ....               LDR.N    R0,??DataTable79_40  ;; 0x4000802c
   \   0000057A   0168               LDR      R1,[R0, #+0]
   \   0000057C   ........           ADR.W    R0,`?<Constant "\\nBefore DMA_ERR = 0x%x">`
   \   00000580   ........           BL       printf
    737                      DMA_CERR = DMA_CERR_CAEI_MASK;
   \   00000584   ....               LDR.N    R0,??DataTable79_41  ;; 0x4000801e
   \   00000586   4021               MOVS     R1,#+64
   \   00000588   0170               STRB     R1,[R0, #+0]
    738                      //printf("\nAfter Clear Error.");
    739                      printf("\nAfter DMA_ERR = 0x%x", DMA_ERR);
   \   0000058A   ....               LDR.N    R0,??DataTable79_40  ;; 0x4000802c
   \   0000058C   0168               LDR      R1,[R0, #+0]
   \   0000058E   ........           ADR.W    R0,`?<Constant "\\nAfter DMA_ERR = 0x%x">`
   \   00000592   ........           BL       printf
    740                      printf("\nDMA_ES = 0x%x", DMA_ES);
   \   00000596   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   00000598   0168               LDR      R1,[R0, #+0]
   \   0000059A   ........           ADR.W    R0,`?<Constant "\\nDMA_ES = 0x%x">`
   \   0000059E   ........           BL       printf
    741                      break;
   \   000005A2   67E0               B.N      ??dma_config_17
    742          		            
    743                    case INSERT_CPE_ERR:
    744          			
    745                      i = tcd_value->channelno ;
   \                     ??dma_config_13:
   \   000005A4   256A               LDR      R5,[R4, #+32]
    746                      DMA_DCHPRI1 = 0x01;
   \   000005A6   ....               LDR.N    R0,??DataTable79_42  ;; 0x40008102
   \   000005A8   0121               MOVS     R1,#+1
   \   000005AA   0170               STRB     R1,[R0, #+0]
    747                      DMA_DCHPRI2 = 0x01;
   \   000005AC   ....               LDR.N    R0,??DataTable79_43  ;; 0x40008101
   \   000005AE   0121               MOVS     R1,#+1
   \   000005B0   0170               STRB     R1,[R0, #+0]
    748                      /*
    749                      for(j=0;j<2;j++)
    750                      {
    751                        //DMA_DCHPRI(j) = 0x01;
    752                        //printf("\nDCHPRI("); Print8(j); printf(") = "); Print8(DMA_DCHPRI(j));
    753                      }
    754                      */        
    755                      break;
   \   000005B2   5FE0               B.N      ??dma_config_17
    756          	                
    757                    case CONFIG_PRIORITY:
    758          			
    759                      DMA_DCHPRI0 = 0x80 + 0;	//0x80+ 5;
   \                     ??dma_config_16:
   \   000005B4   ....               LDR.N    R0,??DataTable79_44  ;; 0x40008103
   \   000005B6   8021               MOVS     R1,#+128
   \   000005B8   0170               STRB     R1,[R0, #+0]
    760                      DMA_DCHPRI1 = 0x80 + 1;	//0xC0 + 1;	    	
   \   000005BA   ....               LDR.N    R0,??DataTable79_42  ;; 0x40008102
   \   000005BC   8121               MOVS     R1,#+129
   \   000005BE   0170               STRB     R1,[R0, #+0]
    761                      DMA_DCHPRI2 = 0x80 + 2;
   \   000005C0   ....               LDR.N    R0,??DataTable79_43  ;; 0x40008101
   \   000005C2   8221               MOVS     R1,#+130
   \   000005C4   0170               STRB     R1,[R0, #+0]
    762                      DMA_DCHPRI3 = 0x80 + 3;	    	
   \   000005C6   ....               LDR.N    R0,??DataTable79_45  ;; 0x40008100
   \   000005C8   8321               MOVS     R1,#+131
   \   000005CA   0170               STRB     R1,[R0, #+0]
    763                      DMA_DCHPRI4 = 0x80 + 4;
   \   000005CC   ....               LDR.N    R0,??DataTable79_46  ;; 0x40008107
   \   000005CE   8421               MOVS     R1,#+132
   \   000005D0   0170               STRB     R1,[R0, #+0]
    764                      DMA_DCHPRI5 = 0x80 + 5;	//0;
   \   000005D2   ....               LDR.N    R0,??DataTable79_47  ;; 0x40008106
   \   000005D4   8521               MOVS     R1,#+133
   \   000005D6   0170               STRB     R1,[R0, #+0]
    765                      DMA_DCHPRI6 = 0x80 + 6;
   \   000005D8   ....               LDR.N    R0,??DataTable79_48  ;; 0x40008105
   \   000005DA   8621               MOVS     R1,#+134
   \   000005DC   0170               STRB     R1,[R0, #+0]
    766                      DMA_DCHPRI7 = 0x80 + 7;
   \   000005DE   ....               LDR.N    R0,??DataTable79_49  ;; 0x40008104
   \   000005E0   8721               MOVS     R1,#+135
   \   000005E2   0170               STRB     R1,[R0, #+0]
    767                      DMA_DCHPRI8 = 0x80 + 8;
   \   000005E4   ....               LDR.N    R0,??DataTable79_50  ;; 0x4000810b
   \   000005E6   8821               MOVS     R1,#+136
   \   000005E8   0170               STRB     R1,[R0, #+0]
    768                      DMA_DCHPRI9 = 0x80 + 9;
   \   000005EA   ....               LDR.N    R0,??DataTable79_51  ;; 0x4000810a
   \   000005EC   8921               MOVS     R1,#+137
   \   000005EE   0170               STRB     R1,[R0, #+0]
    769                      DMA_DCHPRI10 = 0x80 + 10;
   \   000005F0   ....               LDR.N    R0,??DataTable79_52  ;; 0x40008109
   \   000005F2   8A21               MOVS     R1,#+138
   \   000005F4   0170               STRB     R1,[R0, #+0]
    770                      DMA_DCHPRI11 = 0x80 + 11;
   \   000005F6   ....               LDR.N    R0,??DataTable79_53  ;; 0x40008108
   \   000005F8   8B21               MOVS     R1,#+139
   \   000005FA   0170               STRB     R1,[R0, #+0]
    771                      DMA_DCHPRI12 = 0x80 + 12;
   \   000005FC   ....               LDR.N    R0,??DataTable79_54  ;; 0x4000810f
   \   000005FE   8C21               MOVS     R1,#+140
   \   00000600   0170               STRB     R1,[R0, #+0]
    772                      DMA_DCHPRI13 = 0x80 + 13;
   \   00000602   ....               LDR.N    R0,??DataTable79_55  ;; 0x4000810e
   \   00000604   8D21               MOVS     R1,#+141
   \   00000606   0170               STRB     R1,[R0, #+0]
    773                      DMA_DCHPRI14 = 0x80 + 14;
   \   00000608   ....               LDR.N    R0,??DataTable79_56  ;; 0x4000810d
   \   0000060A   8E21               MOVS     R1,#+142
   \   0000060C   0170               STRB     R1,[R0, #+0]
    774                      DMA_DCHPRI15 = 0x80 + 15;    
   \   0000060E   ....               LDR.N    R0,??DataTable79_57  ;; 0x4000810c
   \   00000610   8F21               MOVS     R1,#+143
   \   00000612   0170               STRB     R1,[R0, #+0]
    775          	        
    776                      DMA_CR = 0x0000;
   \   00000614   ....               LDR.N    R0,??DataTable79_58  ;; 0x40008000
   \   00000616   0021               MOVS     R1,#+0
   \   00000618   0160               STR      R1,[R0, #+0]
    777                  
    778                      break;
   \   0000061A   2BE0               B.N      ??dma_config_17
    779          	                
    780                    case CHECK_PRI:
    781          		
    782                      i = tcd_value->channelno ;
   \                     ??dma_config_15:
   \   0000061C   256A               LDR      R5,[R4, #+32]
    783                      j = tcd_value->link ;
   \   0000061E   E66A               LDR      R6,[R4, #+44]
    784          			
    785                      while((((DMA_TCD_CSR(i) & DMA_CSR_ACTIVE_MASK) == 0) || (( DMA_TCD_CSR(j) & DMA_CSR_DONE_MASK) == 0)) && (DMA_ES == 0));
   \                     ??dma_config_52:
   \   00000620   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   00000622   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000626   808B               LDRH     R0,[R0, #+28]
   \   00000628   4006               LSLS     R0,R0,#+25
   \   0000062A   05D5               BPL.N    ??dma_config_53
   \   0000062C   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   0000062E   10EB4610           ADDS     R0,R0,R6, LSL #+5
   \   00000632   808B               LDRH     R0,[R0, #+28]
   \   00000634   0006               LSLS     R0,R0,#+24
   \   00000636   03D4               BMI.N    ??dma_config_54
   \                     ??dma_config_53:
   \   00000638   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   0000063A   0068               LDR      R0,[R0, #+0]
   \   0000063C   0028               CMP      R0,#+0
   \   0000063E   EFD0               BEQ.N    ??dma_config_52
    786                      //while((!( DMA_TCD_CSR(i) &  DMA_TCD_CSR_ACTIVE)) & (!( DMA_ES)) & (!( DMA_TCD_CSR(j) &  DMA_TCD_CSR_DONE))  );
    787                      printf("\nChannel %d transfer is complete and channel %d is preempted \n", j, i);
   \                     ??dma_config_54:
   \   00000640   2A00               MOVS     R2,R5
   \   00000642   3100               MOVS     R1,R6
   \   00000644   ........           ADR.W    R0,`?<Constant "\\nChannel %d transfer ...">`
   \   00000648   ........           BL       printf
    788              		    
    789                      while((((DMA_TCD_CSR(i) & DMA_CSR_DONE_MASK) == 0) || (( DMA_TCD_CSR(j) & DMA_CSR_DONE_MASK) == 0)) && (DMA_ES == 0));        
   \                     ??dma_config_55:
   \   0000064C   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   0000064E   10EB4510           ADDS     R0,R0,R5, LSL #+5
   \   00000652   808B               LDRH     R0,[R0, #+28]
   \   00000654   0006               LSLS     R0,R0,#+24
   \   00000656   05D5               BPL.N    ??dma_config_56
   \   00000658   ....               LDR.N    R0,??DataTable79_36  ;; 0x40009000
   \   0000065A   10EB4610           ADDS     R0,R0,R6, LSL #+5
   \   0000065E   808B               LDRH     R0,[R0, #+28]
   \   00000660   0006               LSLS     R0,R0,#+24
   \   00000662   03D4               BMI.N    ??dma_config_57
   \                     ??dma_config_56:
   \   00000664   ....               LDR.N    R0,??DataTable79_38  ;; 0x40008004
   \   00000666   0068               LDR      R0,[R0, #+0]
   \   00000668   0028               CMP      R0,#+0
   \   0000066A   EFD0               BEQ.N    ??dma_config_55
    790                      //while((!( DMA_TCD_CSR(j) &  DMA_TCD_CSR_DONE)) & (!( DMA_ES)) & (!( DMA_TCD_CSR(j) &  DMA_TCD_CSR_DONE)));
    791                      printf("\nBoth the channels have completed the transfer\n");
   \                     ??dma_config_57:
   \   0000066C   ........           ADR.W    R0,`?<Constant "\\nBoth the channels ha...">`
   \   00000670   ........           BL       printf
    792                              
    793                      break;	               
    794          	}
    795          }
   \                     ??dma_config_17:
   \   00000674   70BD               POP      {R4-R6,PC}       ;; return
    796          
    797          
    798          //////////////////////////////////
    799          ////////////////////////////////////
    800          //////////////////////////////////////
    801          

   \                                 In section .text, align 2, keep-with-next
    802          void Set_Pit0(void)
    803          {
    804            SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;      // turn on PIT cloccks
   \                     Set_Pit0:
   \   00000000   ....               LDR.N    R0,??DataTable79_13  ;; 0x4004803c
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   50F40000           ORRS     R0,R0,#0x800000
   \   00000008   ....               LDR.N    R1,??DataTable79_13  ;; 0x4004803c
   \   0000000A   0860               STR      R0,[R1, #+0]
    805            PIT_MCR    = 1;                    // reset MDIS -> enable the module
   \   0000000C   ....               LDR.N    R0,??DataTable79_59  ;; 0x40037000
   \   0000000E   0121               MOVS     R1,#+1
   \   00000010   0160               STR      R1,[R0, #+0]
    806          //  PIT_LDVAL0 = 0x017d7840;           // free running on 32 bits 
    807            //PIT_TCTRL0 = PIT_TCTRL_TIE_MASK;   // start the timer
    808            //PIT_TCTRL0 |= PIT_TCTRL_TEN_MASK;   // start the timer
    809            
    810          }  
   \   00000012   7047               BX       LR               ;; return
    811          //////////////////////////////////////
    812          
    813          
    814          /*
    815           * ISR for PORTC interrupts
    816           */

   \                                 In section .text, align 2, keep-with-next
    817          void portc_isr(void)
    818          {
    819            PORTC_ISFR=0xFFFFFFFF;  //Clear Port C ISR flags
   \                     portc_isr:
   \   00000000   ....               LDR.N    R0,??DataTable79_60  ;; 0x4004b0a0
   \   00000002   5FF0FF31           MOVS     R1,#-1
   \   00000006   0160               STR      R1,[R0, #+0]
    820          }
   \   00000008   7047               BX       LR               ;; return
    821          
    822          /*
    823           * ISR for PORTE interrupts
    824           */

   \                                 In section .text, align 2, keep-with-next
    825          void porte_isr(void)
    826          {
    827            PORTE_ISFR=0xFFFFFFFF;  //Clear Port E ISR flags
   \                     porte_isr:
   \   00000000   ....               LDR.N    R0,??DataTable79_61  ;; 0x4004d0a0
   \   00000002   5FF0FF31           MOVS     R1,#-1
   \   00000006   0160               STR      R1,[R0, #+0]
    828          }
   \   00000008   7047               BX       LR               ;; return
    829          
    830          /*
    831           * ISR for PORTA interrupts
    832           */

   \                                 In section .text, align 2, keep-with-next
    833          void porta_isr(void)
    834          {
    835            PORTA_ISFR=0xFFFFFFFF;  //Clear Port A ISR flags
   \                     porta_isr:
   \   00000000   ....               LDR.N    R0,??DataTable79_62  ;; 0x400490a0
   \   00000002   5FF0FF31           MOVS     R1,#-1
   \   00000006   0160               STR      R1,[R0, #+0]
    836          }
   \   00000008   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71:
   \   00000000   0A000000           DC8      "\n",0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   ........           DC32     `?<Constant "\\n--------------------...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_1:
   \   00000000   ........           DC32     `?<Constant "       PIT Register R...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_2:
   \   00000000   ........           DC32     `?<Constant "---------------------...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_3:
   \   00000000   00710340           DC32     0x40037100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_4:
   \   00000000   ........           DC32     `?<Constant "Pit0   = %d \\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_5:
   \   00000000   10710340           DC32     0x40037110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_6:
   \   00000000   ........           DC32     `?<Constant " PWM Write Utility\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   ........           DC32     res_ptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_1:
   \   00000000   ........           DC32     `?<Constant "Valid \\'wrt\\' syntax:\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_2:
   \   00000000   ........           DC32     `?<Constant "Set PTD7  Period > wr...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_3:
   \   00000000   ........           DC32     `?<Constant "Set PTD7  Duty > wrt ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76:
   \   00000000   ........           DC32     `?<Constant "Set PTA16 Period > wr...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76_1:
   \   00000000   ........           DC32     `?<Constant "Set PTA16 Duty > wrt ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   ........           DC32     `?<Constant "Set PTD7 Period > wrt...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79:
   \   00000000   ........           DC32     `?<Constant "Pit1   = %d \\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_1:
   \   00000000   ........           DC32     `?<Constant "Set PTD7 Duty > wrt  ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_2:
   \   00000000   ........           DC32     `?<Constant "Set PTA16 Period > wr...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_3:
   \   00000000   ........           DC32     `?<Constant "Set PTA16 Duty > wrt ...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_4:
   \   00000000   006CDC02           DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_5:
   \   00000000   00770100           DC32     0x17700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_6:
   \   00000000   ........           DC32     Period

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_7:
   \   00000000   ........           DC32     Dma_Source_WORD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_8:
   \   00000000   ........           DC32     `?<Constant "\\nDma_Source_WORD[1] =...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_9:
   \   00000000   ........           DC32     `?<Constant "Dma_Source_WORD[2] = ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_10:
   \   00000000   ........           DC32     Period1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_11:
   \   00000000   ........           DC32     Dma_Source_WORD1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_12:
   \   00000000   ........           DC32     `?<Constant "Register value not in...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_13:
   \   00000000   3C800440           DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_14:
   \   00000000   00100240           DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_15:
   \   00000000   ........           DC32     `?<Constant "\\nStarting eDMA 32-bit...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_16:
   \   00000000   ........           DC32     tcd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_17:
   \   00000000   CCF00F40           DC32     0x400ff0cc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_18:
   \   00000000   0C800040           DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_19:
   \   00000000   ........           DC32     Dma_Source_WORD+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_20:
   \   00000000   01100240           DC32     0x40021001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_21:
   \   00000000   0CF00F40           DC32     0x400ff00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_22:
   \   00000000   ........           DC32     Dma_Source_WORD1+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_23:
   \   00000000   ........           DC32     `?<Constant "TWR-K40X256 GPIO Exam...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_24:
   \   00000000   38800440           DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_25:
   \   00000000   0C710340           DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_26:
   \   00000000   1C710340           DC32     0x4003711c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_27:
   \   00000000   C4F00F40           DC32     0x400ff0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_28:
   \   00000000   04F00F40           DC32     0x400ff004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_29:
   \   00000000   18710340           DC32     0x40037118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_30:
   \   00000000   08710340           DC32     0x40037108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_31:
   \   00000000   1CC00440           DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_32:
   \   00000000   00010300           DC32     0x30100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_33:
   \   00000000   40900440           DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_34:
   \   00000000   D4F00F40           DC32     0x400ff0d4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_35:
   \   00000000   14F00F40           DC32     0x400ff014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_36:
   \   00000000   00900040           DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_37:
   \   00000000   1D800040           DC32     0x4000801d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_38:
   \   00000000   04800040           DC32     0x40008004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_39:
   \   00000000   ........           DC32     dma_error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_40:
   \   00000000   2C800040           DC32     0x4000802c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_41:
   \   00000000   1E800040           DC32     0x4000801e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_42:
   \   00000000   02810040           DC32     0x40008102

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_43:
   \   00000000   01810040           DC32     0x40008101

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_44:
   \   00000000   03810040           DC32     0x40008103

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_45:
   \   00000000   00810040           DC32     0x40008100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_46:
   \   00000000   07810040           DC32     0x40008107

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_47:
   \   00000000   06810040           DC32     0x40008106

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_48:
   \   00000000   05810040           DC32     0x40008105

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_49:
   \   00000000   04810040           DC32     0x40008104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_50:
   \   00000000   0B810040           DC32     0x4000810b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_51:
   \   00000000   0A810040           DC32     0x4000810a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_52:
   \   00000000   09810040           DC32     0x40008109

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_53:
   \   00000000   08810040           DC32     0x40008108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_54:
   \   00000000   0F810040           DC32     0x4000810f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_55:
   \   00000000   0E810040           DC32     0x4000810e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_56:
   \   00000000   0D810040           DC32     0x4000810d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_57:
   \   00000000   0C810040           DC32     0x4000810c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_58:
   \   00000000   00800040           DC32     0x40008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_59:
   \   00000000   00700340           DC32     0x40037000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_60:
   \   00000000   A0B00440           DC32     0x4004b0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_61:
   \   00000000   A0D00440           DC32     0x4004d0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_62:
   \   00000000   A0900440           DC32     0x400490a0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "help">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   68656C700000       DC8 104, 101, 108, 112, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Help">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   48656C700000       DC8 72, 101, 108, 112, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<cmd>">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   3C636D643E00       DC8 60, 99, 109, 100, 62, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "set">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   73657400           DC8 115, 101, 116, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Set Config">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   53657420436F       DC8 83, 101, 116, 32, 67, 111, 110, 102, 105, 103
   \              6E666967    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<option value>">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   3C6F7074696F       DC8 60, 111, 112, 116, 105, 111, 110, 32, 118, 97
   \              6E207661    
   \   0000000A   6C75653E0000       DC8 108, 117, 101, 62, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "show">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   73686F770000       DC8 115, 104, 111, 119, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Show Config">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   53686F772043       DC8 83, 104, 111, 119, 32, 67, 111, 110, 102, 105
   \              6F6E6669    
   \   0000000A   6700               DC8 103, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<option>">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   3C6F7074696F       DC8 60, 111, 112, 116, 105, 111, 110, 62, 0, 0
   \              6E3E0000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "rd">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   72640000           DC8 114, 100, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Register Display">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   526567697374       DC8 82, 101, 103, 105, 115, 116, 101, 114, 32, 68
   \              65722044    
   \   0000000A   6973706C6179       DC8 105, 115, 112, 108, 97, 121, 0, 0, 0, 0
   \              00000000    

   \                                 In section .text, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000                      ; Initializer data, 1 bytes
   \   00000000   00                 DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "wrt">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   77727400           DC8 119, 114, 116, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Write PIT  <register ...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   577269746520       DC8 87, 114, 105, 116, 101, 32, 80, 73, 84, 32
   \              50495420    
   \   0000000A   203C72656769       DC8 32, 60, 114, 101, 103, 105, 115, 116, 101, 114
   \              73746572    
   \   00000014   20696E646578       DC8 32, 105, 110, 100, 101, 120, 62, 32, 60, 118
   \              3E203C76    
   \   0000001E   616C75653E00       DC8 97, 108, 117, 101, 62, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n--------------------...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   0A2D2D2D2D2D       DC8 10, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   0000000A   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   00000014   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   0000001E   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   00000028   2D2D2D2D0A00       DC8 45, 45, 45, 45, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       PIT Register R...">`:
   \   00000000                      ; Initializer data, 36 bytes
   \   00000000   202020202020       DC8 32, 32, 32, 32, 32, 32, 32, 80, 73, 84
   \              20504954    
   \   0000000A   205265676973       DC8 32, 82, 101, 103, 105, 115, 116, 101, 114, 32
   \              74657220    
   \   00000014   526561642055       DC8 82, 101, 97, 100, 32, 85, 116, 105, 108, 105
   \              74696C69    
   \   0000001E   74790A000000       DC8 116, 121, 10, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "---------------------...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   0000000A   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   00000014   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   0000001E   2D2D2D2D2D2D       DC8 45, 45, 45, 45, 45, 45, 45, 45, 45, 45
   \              2D2D2D2D    
   \   00000028   2D2D2D0A0000       DC8 45, 45, 45, 10, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "sysclk">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   737973636C6B       DC8 115, 121, 115, 99, 108, 107, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Pit0   = %d \\r\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   506974302020       DC8 80, 105, 116, 48, 32, 32, 32, 61, 32, 37
   \              203D2025    
   \   0000000A   64200D0A0000       DC8 100, 32, 13, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Pit1   = %d \\r\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   506974312020       DC8 80, 105, 116, 49, 32, 32, 32, 61, 32, 37
   \              203D2025    
   \   0000000A   64200D0A0000       DC8 100, 32, 13, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " PWM Write Utility\\n">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   2050574D2057       DC8 32, 80, 87, 77, 32, 87, 114, 105, 116, 101
   \              72697465    
   \   0000000A   205574696C69       DC8 32, 85, 116, 105, 108, 105, 116, 121, 10, 0
   \              74790A00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Valid \\'wrt\\' syntax:\\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   56616C696420       DC8 86, 97, 108, 105, 100, 32, 39, 119, 114, 116
   \              27777274    
   \   0000000A   272073796E74       DC8 39, 32, 115, 121, 110, 116, 97, 120, 58, 10
   \              61783A0A    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Set PTD7  Period > wr...">`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   536574205054       DC8 83, 101, 116, 32, 80, 84, 68, 55, 32, 32
   \              44372020    
   \   0000000A   506572696F64       DC8 80, 101, 114, 105, 111, 100, 32, 62, 32, 119
   \              203E2077    
   \   00000014   727420203C30       DC8 114, 116, 32, 32, 60, 48, 62, 32, 60, 118
   \              3E203C76    
   \   0000001E   616C75652848       DC8 97, 108, 117, 101, 40, 72, 122, 41, 62, 10
   \              7A293E0A    
   \   00000028   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Set PTD7  Duty > wrt ...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   536574205054       DC8 83, 101, 116, 32, 80, 84, 68, 55, 32, 32
   \              44372020    
   \   0000000A   44757479203E       DC8 68, 117, 116, 121, 32, 62, 32, 119, 114, 116
   \              20777274    
   \   00000014   20203C313E20       DC8 32, 32, 60, 49, 62, 32, 60, 118, 97, 108
   \              3C76616C    
   \   0000001E   756528706572       DC8 117, 101, 40, 112, 101, 114, 99, 101, 110, 116
   \              63656E74    
   \   00000028   293E200A0A00       DC8 41, 62, 32, 10, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Set PTA16 Period > wr...">`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   536574205054       DC8 83, 101, 116, 32, 80, 84, 65, 49, 54, 32
   \              41313620    
   \   0000000A   506572696F64       DC8 80, 101, 114, 105, 111, 100, 32, 62, 32, 119
   \              203E2077    
   \   00000014   727420203C32       DC8 114, 116, 32, 32, 60, 50, 62, 32, 60, 118
   \              3E203C76    
   \   0000001E   616C75652848       DC8 97, 108, 117, 101, 40, 72, 122, 41, 62, 10
   \              7A293E0A    
   \   00000028   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Set PTA16 Duty > wrt ...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   536574205054       DC8 83, 101, 116, 32, 80, 84, 65, 49, 54, 32
   \              41313620    
   \   0000000A   44757479203E       DC8 68, 117, 116, 121, 32, 62, 32, 119, 114, 116
   \              20777274    
   \   00000014   20203C333E20       DC8 32, 32, 60, 51, 62, 32, 60, 118, 97, 108
   \              3C76616C    
   \   0000001E   756528706572       DC8 117, 101, 40, 112, 101, 114, 99, 101, 110, 116
   \              63656E74    
   \   00000028   293E200A0A00       DC8 41, 62, 32, 10, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Set PTD7 Period > wrt...">`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   536574205054       DC8 83, 101, 116, 32, 80, 84, 68, 55, 32, 80
   \              44372050    
   \   0000000A   6572696F6420       DC8 101, 114, 105, 111, 100, 32, 62, 32, 119, 114
   \              3E207772    
   \   00000014   7420203C303E       DC8 116, 32, 32, 60, 48, 62, 32, 60, 118, 97
   \              203C7661    
   \   0000001E   6C756528487A       DC8 108, 117, 101, 40, 72, 122, 41, 62, 32, 10
   \              293E200A    
   \   00000028   0A000000           DC8 10, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Set PTD7 Duty > wrt  ...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   536574205054       DC8 83, 101, 116, 32, 80, 84, 68, 55, 32, 68
   \              44372044    
   \   0000000A   757479203E20       DC8 117, 116, 121, 32, 62, 32, 119, 114, 116, 32
   \              77727420    
   \   00000014   203C313E203C       DC8 32, 60, 49, 62, 32, 60, 118, 97, 108, 117
   \              76616C75    
   \   0000001E   652870657263       DC8 101, 40, 112, 101, 114, 99, 101, 110, 116, 41
   \              656E7429    
   \   00000028   3E200A0A0000       DC8 62, 32, 10, 10, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Set PTA16 Period > wr...">_1`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   536574205054       DC8 83, 101, 116, 32, 80, 84, 65, 49, 54, 32
   \              41313620    
   \   0000000A   506572696F64       DC8 80, 101, 114, 105, 111, 100, 32, 62, 32, 119
   \              203E2077    
   \   00000014   727420203C32       DC8 114, 116, 32, 32, 60, 50, 62, 32, 60, 118
   \              3E203C76    
   \   0000001E   616C75652848       DC8 97, 108, 117, 101, 40, 72, 122, 41, 62, 32
   \              7A293E20    
   \   00000028   0A0A0000           DC8 10, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Set PTA16 Duty > wrt ...">_1`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   536574205054       DC8 83, 101, 116, 32, 80, 84, 65, 49, 54, 32
   \              41313620    
   \   0000000A   44757479203E       DC8 68, 117, 116, 121, 32, 62, 32, 119, 114, 116
   \              20777274    
   \   00000014   20203C343E20       DC8 32, 32, 60, 52, 62, 32, 60, 118, 97, 108
   \              3C76616C    
   \   0000001E   756528706572       DC8 117, 101, 40, 112, 101, 114, 99, 101, 110, 116
   \              63656E74    
   \   00000028   293E200A0A00       DC8 41, 62, 32, 10, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDma_Source_WORD[1] =...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   0A446D615F53       DC8 10, 68, 109, 97, 95, 83, 111, 117, 114, 99
   \              6F757263    
   \   0000000A   655F574F5244       DC8 101, 95, 87, 79, 82, 68, 91, 49, 93, 32
   \              5B315D20    
   \   00000014   3D2025640A00       DC8 61, 32, 37, 100, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Dma_Source_WORD[2] = ...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   446D615F536F       DC8 68, 109, 97, 95, 83, 111, 117, 114, 99, 101
   \              75726365    
   \   0000000A   5F574F52445B       DC8 95, 87, 79, 82, 68, 91, 50, 93, 32, 61
   \              325D203D    
   \   00000014   2025640A0A00       DC8 32, 37, 100, 10, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Register value not in...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   526567697374       DC8 82, 101, 103, 105, 115, 116, 101, 114, 32, 118
   \              65722076    
   \   0000000A   616C7565206E       DC8 97, 108, 117, 101, 32, 110, 111, 116, 32, 105
   \              6F742069    
   \   00000014   6E2076616C69       DC8 110, 32, 118, 97, 108, 105, 100, 32, 114, 97
   \              64207261    
   \   0000001E   6E67652E0D0A       DC8 110, 103, 101, 46, 13, 10, 10, 0, 0, 0
   \              0A000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nStarting eDMA 32-bit...">`:
   \   00000000                      ; Initializer data, 56 bytes
   \   00000000   0A5374617274       DC8 10, 83, 116, 97, 114, 116, 105, 110, 103, 32
   \              696E6720    
   \   0000000A   65444D412033       DC8 101, 68, 77, 65, 32, 51, 50, 45, 98, 105
   \              322D6269    
   \   00000014   74206D656D6F       DC8 116, 32, 109, 101, 109, 111, 114, 121, 32, 116
   \              72792074    
   \   0000001E   6F206D656D6F       DC8 111, 32, 109, 101, 109, 111, 114, 121, 32, 116
   \              72792074    
   \   00000028   72616E736665       DC8 114, 97, 110, 115, 102, 101, 114, 32, 116, 101
   \              72207465    
   \   00000032   7374210A0000       DC8 115, 116, 33, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TWR-K40X256 GPIO Exam...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   5457522D4B34       DC8 84, 87, 82, 45, 75, 52, 48, 88, 50, 53
   \              30583235    
   \   0000000A   36204750494F       DC8 54, 32, 71, 80, 73, 79, 32, 69, 120, 97
   \              20457861    
   \   00000014   6D706C65210A       DC8 109, 112, 108, 101, 33, 10, 0, 0
   \              0000        

   \                                 In section .text, align 2, keep-with-next
   \                     `?<Constant "\\n">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nERROR!!! An error oc...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   0A4552524F52       DC8 10, 69, 82, 82, 79, 82, 33, 33, 33, 32
   \              21212120    
   \   0000000A   416E20657272       DC8 65, 110, 32, 101, 114, 114, 111, 114, 32, 111
   \              6F72206F    
   \   00000014   637572726564       DC8 99, 117, 114, 114, 101, 100, 32, 119, 104, 105
   \              20776869    
   \   0000001E   6C652070726F       DC8 108, 101, 32, 112, 114, 111, 99, 101, 115, 115
   \              63657373    
   \   00000028   696E672E0A00       DC8 105, 110, 103, 46, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDMA_ES = 0x%x">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   0A444D415F45       DC8 10, 68, 77, 65, 95, 69, 83, 32, 61, 32
   \              53203D20    
   \   0000000A   307825780000       DC8 48, 120, 37, 120, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDMA_ERR = 0x%x">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   0A444D415F45       DC8 10, 68, 77, 65, 95, 69, 82, 82, 32, 61
   \              5252203D    
   \   0000000A   203078257800       DC8 32, 48, 120, 37, 120, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nData error!">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   0A4461746120       DC8 10, 68, 97, 116, 97, 32, 101, 114, 114, 111
   \              6572726F    
   \   0000000A   722100000000       DC8 114, 33, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSADDR: 0x%x = 0x%x">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   0A5341444452       DC8 10, 83, 65, 68, 68, 82, 58, 32, 48, 120
   \              3A203078    
   \   0000000A   2578203D2030       DC8 37, 120, 32, 61, 32, 48, 120, 37, 120, 0
   \              78257800    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDADDR: 0x%x = 0x%x">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   0A4441444452       DC8 10, 68, 65, 68, 68, 82, 58, 32, 48, 120
   \              3A203078    
   \   0000000A   2578203D2030       DC8 37, 120, 32, 61, 32, 48, 120, 37, 120, 0
   \              78257800    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nTesting DMA channel %d">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   0A5465737469       DC8 10, 84, 101, 115, 116, 105, 110, 103, 32, 68
   \              6E672044    
   \   0000000A   4D4120636861       DC8 77, 65, 32, 99, 104, 97, 110, 110, 101, 108
   \              6E6E656C    
   \   00000014   20256400           DC8 32, 37, 100, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSLAST adjustment is ...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A534C415354       DC8 10, 83, 76, 65, 83, 84, 32, 97, 100, 106
   \              2061646A    
   \   0000000A   7573746D656E       DC8 117, 115, 116, 109, 101, 110, 116, 32, 105, 115
   \              74206973    
   \   00000014   20636F727265       DC8 32, 99, 111, 114, 114, 101, 99, 116, 46, 0
   \              63742E00    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nERROR!!! SLAST adjus...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   0A4552524F52       DC8 10, 69, 82, 82, 79, 82, 33, 33, 33, 32
   \              21212120    
   \   0000000A   534C41535420       DC8 83, 76, 65, 83, 84, 32, 97, 100, 106, 117
   \              61646A75    
   \   00000014   73746D656E74       DC8 115, 116, 109, 101, 110, 116, 32, 110, 111, 116
   \              206E6F74    
   \   0000001E   20636F727265       DC8 32, 99, 111, 114, 114, 101, 99, 116, 46, 0
   \              63742E00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSADDR = 0x%x">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   0A5341444452       DC8 10, 83, 65, 68, 68, 82, 32, 61, 32, 48
   \              203D2030    
   \   0000000A   782578000000       DC8 120, 37, 120, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDLAST adjustment is ...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A444C415354       DC8 10, 68, 76, 65, 83, 84, 32, 97, 100, 106
   \              2061646A    
   \   0000000A   7573746D656E       DC8 117, 115, 116, 109, 101, 110, 116, 32, 105, 115
   \              74206973    
   \   00000014   20636F727265       DC8 32, 99, 111, 114, 114, 101, 99, 116, 46, 0
   \              63742E00    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nERROR!!! DLAST adjus...">`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   0A4552524F52       DC8 10, 69, 82, 82, 79, 82, 33, 33, 33, 32
   \              21212120    
   \   0000000A   444C41535420       DC8 68, 76, 65, 83, 84, 32, 97, 100, 106, 117
   \              61646A75    
   \   00000014   73746D656E74       DC8 115, 116, 109, 101, 110, 116, 32, 110, 111, 116
   \              206E6F74    
   \   0000001E   20636F727265       DC8 32, 99, 111, 114, 114, 101, 99, 116, 46, 10
   \              63742E0A    
   \   00000028   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDADDR = 0x%x">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   0A4441444452       DC8 10, 68, 65, 68, 68, 82, 32, 61, 32, 48
   \              203D2030    
   \   0000000A   782578000000       DC8 120, 37, 120, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nTesting DMA channel %d.">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   0A5465737469       DC8 10, 84, 101, 115, 116, 105, 110, 103, 32, 68
   \              6E672044    
   \   0000000A   4D4120636861       DC8 77, 65, 32, 99, 104, 97, 110, 110, 101, 108
   \              6E6E656C    
   \   00000014   2025642E0000       DC8 32, 37, 100, 46, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDAE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A4441452065       DC8 10, 68, 65, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDBE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A4442452065       DC8 10, 68, 66, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nDOE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A444F452065       DC8 10, 68, 79, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nNCE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A4E43452065       DC8 10, 78, 67, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSAE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A5341452065       DC8 10, 83, 65, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nCPE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A4350452065       DC8 10, 67, 80, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSBE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A5342452065       DC8 10, 83, 66, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSGE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A5347452065       DC8 10, 83, 71, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nSOE error detected c...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   0A534F452065       DC8 10, 83, 79, 69, 32, 101, 114, 114, 111, 114
   \              72726F72    
   \   0000000A   206465746563       DC8 32, 100, 101, 116, 101, 99, 116, 101, 100, 32
   \              74656420    
   \   00000014   636F72726563       DC8 99, 111, 114, 114, 101, 99, 116, 108, 121, 46
   \              746C792E    
   \   0000001E   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nError cancel transfe...">`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   0A4572726F72       DC8 10, 69, 114, 114, 111, 114, 32, 99, 97, 110
   \              2063616E    
   \   0000000A   63656C207472       DC8 99, 101, 108, 32, 116, 114, 97, 110, 115, 102
   \              616E7366    
   \   00000014   657220646574       DC8 101, 114, 32, 100, 101, 116, 101, 99, 116, 101
   \              65637465    
   \   0000001E   6420636F7272       DC8 100, 32, 99, 111, 114, 114, 101, 99, 116, 108
   \              6563746C    
   \   00000028   792E0A00           DC8 121, 46, 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nERROR NOT DETECTED!!!\\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   0A4552524F52       DC8 10, 69, 82, 82, 79, 82, 32, 78, 79, 84
   \              204E4F54    
   \   0000000A   204445544543       DC8 32, 68, 69, 84, 69, 67, 84, 69, 68, 33
   \              54454421    
   \   00000014   21210A00           DC8 33, 33, 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nNO ERROR DETECTED!!!\\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   0A4E4F204552       DC8 10, 78, 79, 32, 69, 82, 82, 79, 82, 32
   \              524F5220    
   \   0000000A   444554454354       DC8 68, 69, 84, 69, 67, 84, 69, 68, 33, 33
   \              45442121    
   \   00000014   210A0000           DC8 33, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nBefore DMA_ERR = 0x%x">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   0A4265666F72       DC8 10, 66, 101, 102, 111, 114, 101, 32, 68, 77
   \              6520444D    
   \   0000000A   415F45525220       DC8 65, 95, 69, 82, 82, 32, 61, 32, 48, 120
   \              3D203078    
   \   00000014   25780000           DC8 37, 120, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nAfter DMA_ERR = 0x%x">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   0A4166746572       DC8 10, 65, 102, 116, 101, 114, 32, 68, 77, 65
   \              20444D41    
   \   0000000A   5F455252203D       DC8 95, 69, 82, 82, 32, 61, 32, 48, 120, 37
   \              20307825    
   \   00000014   78000000           DC8 120, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nChannel %d transfer ...">`:
   \   00000000                      ; Initializer data, 64 bytes
   \   00000000   0A4368616E6E       DC8 10, 67, 104, 97, 110, 110, 101, 108, 32, 37
   \              656C2025    
   \   0000000A   64207472616E       DC8 100, 32, 116, 114, 97, 110, 115, 102, 101, 114
   \              73666572    
   \   00000014   20697320636F       DC8 32, 105, 115, 32, 99, 111, 109, 112, 108, 101
   \              6D706C65    
   \   0000001E   746520616E64       DC8 116, 101, 32, 97, 110, 100, 32, 99, 104, 97
   \              20636861    
   \   00000028   6E6E656C2025       DC8 110, 110, 101, 108, 32, 37, 100, 32, 105, 115
   \              64206973    
   \   00000032   20707265656D       DC8 32, 112, 114, 101, 101, 109, 112, 116, 101, 100
   \              70746564    
   \   0000003C   200A0000           DC8 32, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nBoth the channels ha...">`:
   \   00000000                      ; Initializer data, 48 bytes
   \   00000000   0A426F746820       DC8 10, 66, 111, 116, 104, 32, 116, 104, 101, 32
   \              74686520    
   \   0000000A   6368616E6E65       DC8 99, 104, 97, 110, 110, 101, 108, 115, 32, 104
   \              6C732068    
   \   00000014   61766520636F       DC8 97, 118, 101, 32, 99, 111, 109, 112, 108, 101
   \              6D706C65    
   \   0000001E   746564207468       DC8 116, 101, 100, 32, 116, 104, 101, 32, 116, 114
   \              65207472    
   \   00000028   616E73666572       DC8 97, 110, 115, 102, 101, 114, 10, 0
   \              0A00        

   Maximum stack usage in bytes:

     Function   .cstack
     --------   -------
     Set_Pit0        0
     cmd_rd          8
     cmd_wrt        16
     dma_32bit       8
     dma_config     16
     init_gpio       0
     main            8
     porta_isr       0
     portc_isr       0
     porte_isr       0


   Section sizes:

     Function/Label                           Bytes
     --------------                           -----
     isr_flag                                    4
     dma_error                                   4
     diff                                        4
     thld1                                       4
     thld2                                       4
     temp3                                       4
     Dma_Source_WORD                            12
     Period                                      4
     Dma_Source_WORD1                           12
     Period1                                     4
     res_ptr                                     4
     tcd                                        48
     UIF_CMDTAB                                140
     UIF_SETCMDTAB                              20
     UIF_NUM_CMD                                 4
     UIF_NUM_SETCMD                              4
     cmd_rd                                     62
     cmd_wrt                                   496
     dma_32bit                                 584
     main                                      196
     init_gpio                                  70
     dma_config                               1654
     Set_Pit0                                   20
     portc_isr                                  10
     porte_isr                                  10
     porta_isr                                  10
     ??DataTable71                               4
     ??DataTable74                               4
     ??DataTable74_1                             4
     ??DataTable74_2                             4
     ??DataTable74_3                             4
     ??DataTable74_4                             4
     ??DataTable74_5                             4
     ??DataTable74_6                             4
     ??DataTable75                               4
     ??DataTable75_1                             4
     ??DataTable75_2                             4
     ??DataTable75_3                             4
     ??DataTable76                               4
     ??DataTable76_1                             4
     ??DataTable78                               4
     ??DataTable79                               4
     ??DataTable79_1                             4
     ??DataTable79_2                             4
     ??DataTable79_3                             4
     ??DataTable79_4                             4
     ??DataTable79_5                             4
     ??DataTable79_6                             4
     ??DataTable79_7                             4
     ??DataTable79_8                             4
     ??DataTable79_9                             4
     ??DataTable79_10                            4
     ??DataTable79_11                            4
     ??DataTable79_12                            4
     ??DataTable79_13                            4
     ??DataTable79_14                            4
     ??DataTable79_15                            4
     ??DataTable79_16                            4
     ??DataTable79_17                            4
     ??DataTable79_18                            4
     ??DataTable79_19                            4
     ??DataTable79_20                            4
     ??DataTable79_21                            4
     ??DataTable79_22                            4
     ??DataTable79_23                            4
     ??DataTable79_24                            4
     ??DataTable79_25                            4
     ??DataTable79_26                            4
     ??DataTable79_27                            4
     ??DataTable79_28                            4
     ??DataTable79_29                            4
     ??DataTable79_30                            4
     ??DataTable79_31                            4
     ??DataTable79_32                            4
     ??DataTable79_33                            4
     ??DataTable79_34                            4
     ??DataTable79_35                            4
     ??DataTable79_36                            4
     ??DataTable79_37                            4
     ??DataTable79_38                            4
     ??DataTable79_39                            4
     ??DataTable79_40                            4
     ??DataTable79_41                            4
     ??DataTable79_42                            4
     ??DataTable79_43                            4
     ??DataTable79_44                            4
     ??DataTable79_45                            4
     ??DataTable79_46                            4
     ??DataTable79_47                            4
     ??DataTable79_48                            4
     ??DataTable79_49                            4
     ??DataTable79_50                            4
     ??DataTable79_51                            4
     ??DataTable79_52                            4
     ??DataTable79_53                            4
     ??DataTable79_54                            4
     ??DataTable79_55                            4
     ??DataTable79_56                            4
     ??DataTable79_57                            4
     ??DataTable79_58                            4
     ??DataTable79_59                            4
     ??DataTable79_60                            4
     ??DataTable79_61                            4
     ??DataTable79_62                            4
     ?<Constant "help">                          8
     ?<Constant "Help">                          8
     ?<Constant "<cmd>">                         8
     ?<Constant "set">                           4
     ?<Constant "Set Config">                   12
     ?<Constant "<option value>">               16
     ?<Constant "show">                          8
     ?<Constant "Show Config">                  12
     ?<Constant "<option>">                     12
     ?<Constant "rd">                            4
     ?<Constant "Register Display">             20
     ?<Constant "">                              1
     ?<Constant "wrt">                           4
     ?<Constant "Write PIT  <register ...">     36
     ?<Constant "\n--------------------...">    48
     ?<Constant "       PIT Register R...">     36
     ?<Constant "---------------------...">     48
     ?<Constant "sysclk">                        8
     ?<Constant "Pit0   = %d \r\n">             16
     ?<Constant "Pit1   = %d \r\n">             16
     ?<Constant " PWM Write Utility\n">         20
     ?<Constant "Valid \'wrt\' syntax:\n">      24
     ?<Constant "Set PTD7  Period > wr...">     44
     ?<Constant "Set PTD7  Duty > wrt ...">     48
     ?<Constant "Set PTA16 Period > wr...">     44
     ?<Constant "Set PTA16 Duty > wrt ...">     48
     ?<Constant "Set PTD7 Period > wrt...">     44
     ?<Constant "Set PTD7 Duty > wrt  ...">     48
     ?<Constant "Set PTA16 Period > wr...">_1   44
     ?<Constant "Set PTA16 Duty > wrt ...">_1   48
     ?<Constant "\nDma_Source_WORD[1] =...">    28
     ?<Constant "Dma_Source_WORD[2] = ...">     28
     ?<Constant "Register value not in...">     40
     ?<Constant "\nStarting eDMA 32-bit...">    56
     ?<Constant "TWR-K40X256 GPIO Exam...">     28
     ?<Constant "\n">                            2
     ?<Constant "\nERROR!!! An error oc...">    48
     ?<Constant "\nDMA_ES = 0x%x">              16
     ?<Constant "\nDMA_ERR = 0x%x">             16
     ?<Constant "\nData error!">                16
     ?<Constant "\nSADDR: 0x%x = 0x%x">         20
     ?<Constant "\nDADDR: 0x%x = 0x%x">         20
     ?<Constant "\nTesting DMA channel %d">     24
     ?<Constant "\nSLAST adjustment is ...">    32
     ?<Constant "\nERROR!!! SLAST adjus...">    40
     ?<Constant "\nSADDR = 0x%x">               16
     ?<Constant "\nDLAST adjustment is ...">    32
     ?<Constant "\nERROR!!! DLAST adjus...">    44
     ?<Constant "\nDADDR = 0x%x">               16
     ?<Constant "\nTesting DMA channel %d.">    28
     ?<Constant "\nDAE error detected c...">    32
     ?<Constant "\nDBE error detected c...">    32
     ?<Constant "\nDOE error detected c...">    32
     ?<Constant "\nNCE error detected c...">    32
     ?<Constant "\nSAE error detected c...">    32
     ?<Constant "\nCPE error detected c...">    32
     ?<Constant "\nSBE error detected c...">    32
     ?<Constant "\nSGE error detected c...">    32
     ?<Constant "\nSOE error detected c...">    32
     ?<Constant "\nError cancel transfe...">    44
     ?<Constant "\nERROR NOT DETECTED!!!\n">    24
     ?<Constant "\nNO ERROR DETECTED!!!\n">     24
     ?<Constant "\nBefore DMA_ERR = 0x%x">      24
     ?<Constant "\nAfter DMA_ERR = 0x%x">       24
     ?<Constant "\nChannel %d transfer ...">    64
     ?<Constant "\nBoth the channels ha...">    48

 
   108 bytes in section .bss
 5 419 bytes in section .text
 
 5 419 bytes of CODE memory
   108 bytes of DATA memory

Errors: none
Warnings: none
