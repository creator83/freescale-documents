###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     17/Feb/2011  21:31:25 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[ #
#                    \kinetis-sc\src\drivers\adc16\adc16.c                    #
#    Command line =  "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\src\drivers\adc16\adc16.c" -D IAR -D        #
#                    TWR_K40X256 -lCN "D:\Profiles\B17685\My                  #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\RAM_128KB\List\" -lB "D:\Profiles\B17685\My      #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\RAM_128KB\List\" -o "D:\Profiles\B17685\My       #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\RAM_128KB\Obj\" --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_2\arm\INC\c\DLib_Config_N #
#                    ormal.h" -I "D:\Profiles\B17685\My                       #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\..\..\..\src\projects\pit_dma\" -I               #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\build\iar\pit_dma\..\..\..\src\common\" -I  #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\build\iar\pit_dma\..\..\..\src\cpu\" -I     #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\build\iar\pit_dma\..\..\..\src\cpu\headers\ #
#                    " -I "D:\Profiles\B17685\My                              #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\..\..\..\src\drivers\uart\" -I                   #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\build\iar\pit_dma\..\..\..\src\drivers\mcg\ #
#                    " -I "D:\Profiles\B17685\My                              #
#                    Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\build\iar\ #
#                    pit_dma\..\..\..\src\drivers\wdog\" -I                   #
#                    "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å #
#                    [\kinetis-sc\build\iar\pit_dma\..\..\..\src\platforms\"  #
#                    -I "D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[ #
#                    É^Å[\kinetis-sc\build\iar\pit_dma\..\" -Ol               #
#                    --use_c++_inline                                         #
#    List file    =  D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[ #
#                    \kinetis-sc\build\iar\pit_dma\RAM_128KB\List\adc16.lst   #
#    Object file  =  D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[ #
#                    \kinetis-sc\build\iar\pit_dma\RAM_128KB\Obj\adc16.o      #
#                                                                             #
#                                                                             #
###############################################################################

D:\Profiles\B17685\My Documents\FAE\MCU\Kinetis\ÉÇÅ[É^Å[\kinetis-sc\src\drivers\adc16\adc16.c
      1          /*
      2           * File:		a16dc.c
      3           * Purpose:		Simple Driver or API for AdC16/PGA
      4           * This file contains the following two functions:
      5           *  1. ADC_Cal: calibrates the ADC
      6           *  2. ADC_Config_Alt: Simply configures an ADC per a structure
      7           *
      8           * Typical usage: Fill the structure with the ADC and PGA register contents 
      9           * needed for the ADC usage.
     10          
     11           * a) Call the ADC_Config_Alt function to configure an ADC, (ADC0 or ADC1)
     12           * b) Call the ADC_Cal function to calibrate that ADC
     13           * c) Call the ADC_Config_Alt function again to restore desired configuation
     14           *    after a calibration
     15           *
     16           *
     17           */
     18          
     19          #include "common.h"
     20          #include "adc16.h"
     21          
     22          
     23          
     24          
     25          /******************************************************************************
     26          Function 1. Name	AUTO CAL ROUTINE   
     27          
     28          Parameters		ADC module pointer points to adc0 or adc1 register map 
     29                                   base address.
     30          Returns			Zero indicates success.
     31          Notes         		Calibrates the ADC16. Required to meet specifications 
     32                                  after reset and before a conversion is initiated.
     33          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     34          uint8 ADC_Cal(ADC_MemMapPtr adcmap)
     35          {
     36          
     37            unsigned short cal_var;
     38            
     39            ADC_SC2_REG(adcmap) &=  ~ADC_SC2_ADTRG_MASK ; // Enable Software Conversion Trigger for Calibration Process    - ADC0_SC2 = ADC0_SC2 | ADC_SC2_ADTRGW(0);   
   \                     ADC_Cal:
   \   00000000   016A               LDR      R1,[R0, #+32]
   \   00000002   31F04001           BICS     R1,R1,#0x40
   \   00000006   0162               STR      R1,[R0, #+32]
     40            ADC_SC3_REG(adcmap) &= ( ~ADC_SC3_ADCO_MASK & ~ADC_SC3_AVGS_MASK ); // set single conversion, clear avgs bitfield for next writing
   \   00000008   416A               LDR      R1,[R0, #+36]
   \   0000000A   31F00B01           BICS     R1,R1,#0xB
   \   0000000E   4162               STR      R1,[R0, #+36]
     41            ADC_SC3_REG(adcmap) |= ( ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(AVGS_32) );  // Turn averaging ON and set at max value ( 32 )
   \   00000010   416A               LDR      R1,[R0, #+36]
   \   00000012   51F00701           ORRS     R1,R1,#0x7
   \   00000016   4162               STR      R1,[R0, #+36]
     42            
     43            
     44            ADC_SC3_REG(adcmap) |= ADC_SC3_CAL_MASK ;      // Start CAL
   \   00000018   416A               LDR      R1,[R0, #+36]
   \   0000001A   51F08001           ORRS     R1,R1,#0x80
   \   0000001E   4162               STR      R1,[R0, #+36]
     45            while ( (ADC_SC1_REG(adcmap,A) & ADC_SC1_COCO_MASK ) == COCO_NOT ); // Wait calibration end
   \                     ??ADC_Cal_0:
   \   00000020   0168               LDR      R1,[R0, #+0]
   \   00000022   0906               LSLS     R1,R1,#+24
   \   00000024   FCD5               BPL.N    ??ADC_Cal_0
     46            	
     47            if ((ADC_SC3_REG(adcmap)& ADC_SC3_CALF_MASK) == CALF_FAIL )
   \   00000026   416A               LDR      R1,[R0, #+36]
   \   00000028   4906               LSLS     R1,R1,#+25
   \   0000002A   01D5               BPL.N    ??ADC_Cal_1
     48            {  
     49             return(1);    // Check for Calibration fail error and return 
   \   0000002C   0120               MOVS     R0,#+1
   \   0000002E   2EE0               B.N      ??ADC_Cal_2
     50            }
     51            // Calculate plus-side calibration
     52            cal_var = 0x00;
   \                     ??ADC_Cal_1:
   \   00000030   0021               MOVS     R1,#+0
     53            
     54            cal_var =  ADC_CLP0_REG(adcmap); 
   \   00000032   C26C               LDR      R2,[R0, #+76]
   \   00000034   1100               MOVS     R1,R2
     55            cal_var += ADC_CLP1_REG(adcmap);
   \   00000036   826C               LDR      R2,[R0, #+72]
   \   00000038   5118               ADDS     R1,R2,R1
     56            cal_var += ADC_CLP2_REG(adcmap);
   \   0000003A   426C               LDR      R2,[R0, #+68]
   \   0000003C   5118               ADDS     R1,R2,R1
     57            cal_var += ADC_CLP3_REG(adcmap);
   \   0000003E   026C               LDR      R2,[R0, #+64]
   \   00000040   5118               ADDS     R1,R2,R1
     58            cal_var += ADC_CLP4_REG(adcmap);
   \   00000042   C26B               LDR      R2,[R0, #+60]
   \   00000044   5118               ADDS     R1,R2,R1
     59            cal_var += ADC_CLPS_REG(adcmap);
   \   00000046   826B               LDR      R2,[R0, #+56]
   \   00000048   5118               ADDS     R1,R2,R1
     60          
     61            cal_var = cal_var/2;
   \   0000004A   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004C   0222               MOVS     R2,#+2
   \   0000004E   91FBF2F1           SDIV     R1,R1,R2
     62            cal_var |= 0x8000; // Set MSB
   \   00000052   51F40041           ORRS     R1,R1,#0x8000
     63          
     64            ADC_PG_REG(adcmap) = ADC_PG_PG(cal_var);
   \   00000056   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000058   C162               STR      R1,[R0, #+44]
     65           
     66          
     67            // Calculate minus-side calibration
     68            cal_var = 0x00;
   \   0000005A   0021               MOVS     R1,#+0
     69          
     70            cal_var =  ADC_CLM0_REG(adcmap); 
   \   0000005C   C26E               LDR      R2,[R0, #+108]
   \   0000005E   1100               MOVS     R1,R2
     71            cal_var += ADC_CLM1_REG(adcmap);
   \   00000060   826E               LDR      R2,[R0, #+104]
   \   00000062   5118               ADDS     R1,R2,R1
     72            cal_var += ADC_CLM2_REG(adcmap);
   \   00000064   426E               LDR      R2,[R0, #+100]
   \   00000066   5118               ADDS     R1,R2,R1
     73            cal_var += ADC_CLM3_REG(adcmap);
   \   00000068   026E               LDR      R2,[R0, #+96]
   \   0000006A   5118               ADDS     R1,R2,R1
     74            cal_var += ADC_CLM4_REG(adcmap);
   \   0000006C   C26D               LDR      R2,[R0, #+92]
   \   0000006E   5118               ADDS     R1,R2,R1
     75            cal_var += ADC_CLMS_REG(adcmap);
   \   00000070   826D               LDR      R2,[R0, #+88]
   \   00000072   5118               ADDS     R1,R2,R1
     76          
     77            cal_var = cal_var/2;
   \   00000074   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000076   0222               MOVS     R2,#+2
   \   00000078   91FBF2F1           SDIV     R1,R1,R2
     78          
     79            cal_var |= 0x8000; // Set MSB
   \   0000007C   51F40041           ORRS     R1,R1,#0x8000
     80          
     81            ADC_MG_REG(adcmap) = ADC_MG_MG(cal_var); 
   \   00000080   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000082   0163               STR      R1,[R0, #+48]
     82            
     83            ADC_SC3_REG(adcmap) &= ~ADC_SC3_CAL_MASK ; /* Clear CAL bit */
   \   00000084   416A               LDR      R1,[R0, #+36]
   \   00000086   31F08001           BICS     R1,R1,#0x80
   \   0000008A   4162               STR      R1,[R0, #+36]
     84          
     85            return(0);
   \   0000008C   0020               MOVS     R0,#+0
   \                     ??ADC_Cal_2:
   \   0000008E   7047               BX       LR               ;; return
     86          }
     87          
     88          
     89          
     90          
     91          /******************************************************************************
     92          Function 2 Name 	ADC_Config_Alt 
     93          Parameters		the register values to be set in the adc in a structure
     94          Returns			NONE
     95          Notes         		Configures ADC0 or ADC1 depending on adcmap
     96                                  Prior to calling this function populate the structure
     97                                  elements with the desired ADC configuration.
     98          ******************************************************************************/
     99          
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void ADC_Config_Alt(ADC_MemMapPtr adcmap, tADC_ConfigPtr ADC_CfgPtr)
    102          {
    103           ADC_CFG1_REG(adcmap) = ADC_CfgPtr->CONFIG1;
   \                     ADC_Config_Alt:
   \   00000000   0A78               LDRB     R2,[R1, #+0]
   \   00000002   8260               STR      R2,[R0, #+8]
    104           ADC_CFG2_REG(adcmap) = ADC_CfgPtr->CONFIG2;
   \   00000004   4A78               LDRB     R2,[R1, #+1]
   \   00000006   C260               STR      R2,[R0, #+12]
    105           ADC_CV1_REG(adcmap)  = ADC_CfgPtr->COMPARE1; 
   \   00000008   4A88               LDRH     R2,[R1, #+2]
   \   0000000A   8261               STR      R2,[R0, #+24]
    106           ADC_CV2_REG(adcmap)  = ADC_CfgPtr->COMPARE2;
   \   0000000C   8A88               LDRH     R2,[R1, #+4]
   \   0000000E   C261               STR      R2,[R0, #+28]
    107           ADC_SC2_REG(adcmap)  = ADC_CfgPtr->STATUS2;
   \   00000010   8A79               LDRB     R2,[R1, #+6]
   \   00000012   0262               STR      R2,[R0, #+32]
    108           ADC_SC3_REG(adcmap)  = ADC_CfgPtr->STATUS3;
   \   00000014   CA79               LDRB     R2,[R1, #+7]
   \   00000016   4262               STR      R2,[R0, #+36]
    109           ADC_PGA_REG(adcmap)  = ADC_CfgPtr->PGA;
   \   00000018   CA68               LDR      R2,[R1, #+12]
   \   0000001A   0265               STR      R2,[R0, #+80]
    110           ADC_SC1_REG(adcmap,A)= ADC_CfgPtr->STATUS1A;       
   \   0000001C   0A7A               LDRB     R2,[R1, #+8]
   \   0000001E   0260               STR      R2,[R0, #+0]
    111           ADC_SC1_REG(adcmap,B)= ADC_CfgPtr->STATUS1B;
   \   00000020   497A               LDRB     R1,[R1, #+9]
   \   00000022   4160               STR      R1,[R0, #+4]
    112          }
   \   00000024   7047               BX       LR               ;; return
    113          
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void ADC_Read_Cal(ADC_MemMapPtr adcmap, tADC_Cal_Blk *blk)
    116          {
    117            blk->OFS  = ADC_OFS_REG(adcmap);
   \                     ADC_Read_Cal:
   \   00000000   826A               LDR      R2,[R0, #+40]
   \   00000002   0A80               STRH     R2,[R1, #+0]
    118            blk->PG   = ADC_PG_REG(adcmap); 
   \   00000004   C26A               LDR      R2,[R0, #+44]
   \   00000006   4A80               STRH     R2,[R1, #+2]
    119            blk->MG   = ADC_MG_REG(adcmap); 
   \   00000008   026B               LDR      R2,[R0, #+48]
   \   0000000A   8A80               STRH     R2,[R1, #+4]
    120            blk->CLPD = ADC_CLPD_REG(adcmap); 
   \   0000000C   426B               LDR      R2,[R0, #+52]
   \   0000000E   8A71               STRB     R2,[R1, #+6]
    121            blk->CLPS = ADC_CLPS_REG(adcmap); 
   \   00000010   826B               LDR      R2,[R0, #+56]
   \   00000012   CA71               STRB     R2,[R1, #+7]
    122            blk->CLP4 = ADC_CLP4_REG(adcmap);
   \   00000014   C26B               LDR      R2,[R0, #+60]
   \   00000016   0A81               STRH     R2,[R1, #+8]
    123            blk->CLP3 = ADC_CLP3_REG(adcmap); 
   \   00000018   026C               LDR      R2,[R0, #+64]
   \   0000001A   4A81               STRH     R2,[R1, #+10]
    124            blk->CLP2 = ADC_CLP2_REG(adcmap); 
   \   0000001C   426C               LDR      R2,[R0, #+68]
   \   0000001E   0A73               STRB     R2,[R1, #+12]
    125            blk->CLP1 = ADC_CLP1_REG(adcmap);
   \   00000020   826C               LDR      R2,[R0, #+72]
   \   00000022   4A73               STRB     R2,[R1, #+13]
    126            blk->CLP0 = ADC_CLP0_REG(adcmap);
   \   00000024   C26C               LDR      R2,[R0, #+76]
   \   00000026   8A73               STRB     R2,[R1, #+14]
    127            blk->CLMD = ADC_CLMD_REG(adcmap); 
   \   00000028   426D               LDR      R2,[R0, #+84]
   \   0000002A   0A74               STRB     R2,[R1, #+16]
    128            blk->CLMS = ADC_CLMS_REG(adcmap); 
   \   0000002C   826D               LDR      R2,[R0, #+88]
   \   0000002E   4A74               STRB     R2,[R1, #+17]
    129            blk->CLM4 = ADC_CLM4_REG(adcmap);
   \   00000030   C26D               LDR      R2,[R0, #+92]
   \   00000032   4A82               STRH     R2,[R1, #+18]
    130            blk->CLM3 = ADC_CLM3_REG(adcmap); 
   \   00000034   026E               LDR      R2,[R0, #+96]
   \   00000036   8A82               STRH     R2,[R1, #+20]
    131            blk->CLM2 = ADC_CLM2_REG(adcmap); 
   \   00000038   426E               LDR      R2,[R0, #+100]
   \   0000003A   8A75               STRB     R2,[R1, #+22]
    132            blk->CLM1 = ADC_CLM1_REG(adcmap);
   \   0000003C   826E               LDR      R2,[R0, #+104]
   \   0000003E   CA75               STRB     R2,[R1, #+23]
    133            blk->CLM0 = ADC_CLM0_REG(adcmap);
   \   00000040   C06E               LDR      R0,[R0, #+108]
   \   00000042   0876               STRB     R0,[R1, #+24]
    134            
    135          }
   \   00000044   7047               BX       LR               ;; return
    136          
    137          

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     ADC_Cal             0
     ADC_Config_Alt      0
     ADC_Read_Cal        0


   Section sizes:

     Function/Label Bytes
     -------------- -----
     ADC_Cal         144
     ADC_Config_Alt   38
     ADC_Read_Cal     70

 
 252 bytes in section .text
 
 252 bytes of CODE memory

Errors: none
Warnings: none
